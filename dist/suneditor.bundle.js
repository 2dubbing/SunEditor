!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s="./src/bundle.js")}({"./lang/ko.js":
/*!********************!*\
  !*** ./lang/ko.js ***!
  \********************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n    \r\n    const lang = {\r\n        toolbar: {\r\n            font: '글꼴',\r\n            formats: '문단 형식',\r\n            fontSize: '크기',\r\n            bold: '굵게',\r\n            underline: '밑줄',\r\n            italic: '기울임',\r\n            strike: '취소선',\r\n            subscript: '아래 첨자',\r\n            superscript: '위 첨자',\r\n            removeFormat: '형식 제거',\r\n            fontColor: '글자색',\r\n            hiliteColor: '글자 배경색',\r\n            indent: '들여쓰기',\r\n            outdent: '내어쓰기',\r\n            align: '정렬',\r\n            alignLeft: '왼쪽 정렬',\r\n            alignRight: '오른쪽 정렬',\r\n            alignCenter: '가운데 정렬',\r\n            justifyFull: '양쪽 정렬',\r\n            list: '리스트',\r\n            orderList: '숫자형 불릿',\r\n            unorderList: '원형 불릿',\r\n            horizontalRule: '가로 줄 삽입',\r\n            table: '테이블',\r\n            link: '링크',\r\n            image: '이미지',\r\n            video: '동영상',\r\n            fullScreen: '전체화면',\r\n            showBlocks: '블록 보기',\r\n            codeView: 'HTML 편집',\r\n            undo: '실행 취소',\r\n            redo: '다시 실행',\r\n            preview: '미리보기',\r\n            print: '인쇄',\r\n            tag_p: '본문',\r\n            tag_div: '기본 (DIV)',\r\n            tag_h: '제목'\r\n        },\r\n        dialogBox: {\r\n            linkBox: {\r\n                title: '링크 삽입',\r\n                url: '인터넷 주소',\r\n                text: '화면 텍스트',\r\n                newWindowCheck: '새창으로 열기'\r\n            },\r\n            imageBox: {\r\n                title: '이미지 삽입',\r\n                file: '파일 선택',\r\n                url: '이미지 주소',\r\n                caption: '이미지 설명 넣기',\r\n                altText: '대체 문자열'\r\n            },\r\n            videoBox: {\r\n                title: '동영상 삽입',\r\n                url: '미디어 임베드 주소, 유튜브'\r\n            },\r\n            resize100: '100% 크기',\r\n            resize75: '75% 크기',\r\n            resize50: '50% 크기',\r\n            resize25: '25% 크기',\r\n            remove: '삭제',\r\n            submitButton: '확인',\r\n            revertButton: '되돌리기',\r\n            proportion: '비율 맞춤',\r\n            basic: '기본',\r\n            left: '왼쪽',\r\n            right: '오른쪽',\r\n            center: '가운데',\r\n            width: '가로',\r\n            height: '세로'\r\n        },\r\n        editLink: {\r\n            edit: '편집',\r\n            remove: '삭제'\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        if (typeof window.SUNEDITOR === 'undefined') {\r\n            window.SUNEDITOR = {};\r\n            SUNEDITOR.plugins = {};\r\n        }\r\n\r\n        window.SUNEDITOR.lang = lang;\r\n    }\r\n\r\n    return lang;\r\n}));\r\n\r\n\n\n//# sourceURL=webpack:///./lang/ko.js?")},"./src/bundle.js":
/*!***********************!*\
  !*** ./src/bundle.js ***!
  \***********************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _suneditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./suneditor */ \"./src/suneditor.js\");\n/* harmony import */ var _suneditor__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_suneditor__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./plugins/plugins_init */ \"./src/plugins/plugins_init.js\");\n/* harmony import */ var _lang_ko_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lang/ko.js */ \"./lang/ko.js\");\n/* harmony import */ var _lang_ko_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lang_ko_js__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n\r\n_suneditor__WEBPACK_IMPORTED_MODULE_0___default.a.create(document.getElementById('editor'), {\r\n    modules: [\r\n        _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"dialog\"]\r\n    ],\r\n    buttonList: [\r\n        ['undo', 'redo'],\r\n        [_plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"font\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"fontSize\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"formatBlock\"]],\r\n        ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],\r\n        ['removeFormat'],\r\n        '/',\r\n        [_plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"fontColor\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"hiliteColor\"]],\r\n        ['indent', 'outdent'],\r\n        [_plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"align\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"horizontalRule\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"list\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"table\"]],\r\n        [_plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"link\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"image\"], _plugins_plugins_init__WEBPACK_IMPORTED_MODULE_1__[\"video\"]],\r\n        ['fullScreen', 'showBlocks', 'codeView'],\r\n        ['preview', 'print']\r\n    ],\r\n    lang: _lang_ko_js__WEBPACK_IMPORTED_MODULE_2___default.a\r\n})\n\n//# sourceURL=webpack:///./src/bundle.js?")},"./src/plugins/dialog/image.js":
/*!*************************************!*\
  !*** ./src/plugins/dialog/image.js ***!
  \*************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function(w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const image = {\r\n        name: 'image',\r\n        add: function (_this) {\r\n            const context = _this.context;\r\n            context.image = {\r\n                _linkElement: null,\r\n                _element: null,\r\n                _resize_element: null,\r\n                _element_w: 1,\r\n                _element_h: 1,\r\n                _element_l: 0,\r\n                _element_t: 0,\r\n                _origin_w: context.user.imageSize,\r\n                _origin_h: 0,\r\n                _altText: '',\r\n                _imageCaption: null,\r\n                _linkValue: '',\r\n                _align: 'none',\r\n                _captionChecked: false,\r\n                _proportionChecked: true,\r\n                _onCaption: false\r\n            };\r\n    \r\n            /** image dialog */\r\n            let image_dialog = eval(this.setDialog(_this.context.user, _this.lang));\r\n            context.image.modal = image_dialog;\r\n            context.image.imgUrlFile = image_dialog.getElementsByClassName('sun-editor-id-image-url')[0];\r\n            context.image.imgInputFile = context.image.focusElement = image_dialog.getElementsByClassName('sun-editor-id-image-file')[0];\r\n            context.image.altText = image_dialog.getElementsByClassName('sun-editor-id-image-alt')[0];\r\n            context.image.imgLink = image_dialog.getElementsByClassName('sun-editor-id-image-link')[0];\r\n            context.image.imgLinkNewWindowCheck = image_dialog.getElementsByClassName('sun-editor-id-linkCheck')[0];\r\n            context.image.caption = image_dialog.querySelector('#suneditor_image_check_caption');\r\n            context.image.proportion = image_dialog.querySelector('#suneditor_image_check_proportion');\r\n            context.image.imageX = image_dialog.getElementsByClassName('sun-editor-id-image-x')[0];\r\n            context.image.imageY = image_dialog.getElementsByClassName('sun-editor-id-image-y')[0];\r\n    \r\n            context.image.imageX.value = _this.context.user.imageSize;\r\n    \r\n            /** add event listeners */\r\n            context.image.modal.getElementsByClassName('sun-editor-tab-button')[0].addEventListener('click', this.openTab.bind(_this));\r\n            context.image.modal.getElementsByClassName('btn-primary')[0].addEventListener('click', this.submit.bind(_this));\r\n            context.image.imageX.addEventListener('change', this.setInputSize.bind(_this, 'x'));\r\n            context.image.imageY.addEventListener('change', this.setInputSize.bind(_this, 'y'));\r\n            image_dialog.getElementsByClassName('sun-editor-id-image-revert-button')[0].addEventListener('click', this.sizeRevert.bind(_this));\r\n    \r\n            /** append html */\r\n            context.dialog.modal.appendChild(image_dialog);\r\n    \r\n            /** empty memory */\r\n            image_dialog = null;\r\n        },\r\n    \r\n        /** dialog */\r\n        setDialog: function (user, lang) {\r\n            const dialog = document.createElement('DIV');\r\n            dialog.className = 'modal-content sun-editor-id-dialog-image';\r\n            dialog.style.display = 'none';\r\n    \r\n            let html = '' +\r\n                '<div class=\"modal-header\">' +\r\n                '   <button type=\"button\" data-command=\"close\" class=\"close\" aria-label=\"Close\">' +\r\n                '       <div aria-hidden=\"true\" data-command=\"close\" class=\"icon-cancel\"></div>' +\r\n                '   </button>' +\r\n                '   <h5 class=\"modal-title\">' + lang.dialogBox.imageBox.title + '</h5>' +\r\n                '</div>' +\r\n                '<div class=\"sun-editor-tab-button\">' +\r\n                '   <button type=\"button\" class=\"sun-editor-id-tab-link active\" data-tab-link=\"image\">' + lang.toolbar.image + '</button>' +\r\n                '   <button type=\"button\" class=\"sun-editor-id-tab-link\" data-tab-link=\"url\">' + lang.toolbar.link + '</button>' +\r\n                '</div>' +\r\n                '<form class=\"editor_image\" method=\"post\" enctype=\"multipart/form-data\">' +\r\n                '   <div class=\"sun-editor-id-tab-content sun-editor-id-tab-content-image\">' +\r\n                '       <div class=\"modal-body\">';\r\n    \r\n                if (user.imageFileInput) {\r\n                    html += '' +\r\n                        '   <div class=\"form-group\">' +\r\n                        '       <label>' + lang.dialogBox.imageBox.file + '</label>' +\r\n                        '       <input class=\"form-control sun-editor-id-image-file\" type=\"file\" accept=\"image/*\" multiple=\"multiple\" />' +\r\n                        '   </div>' ;\r\n                }\r\n    \r\n                if (user.imageUrlInput) {\r\n                    html += '' +\r\n                        '   <div class=\"form-group\">' +\r\n                        '       <label>' + lang.dialogBox.imageBox.url + '</label>' +\r\n                        '       <input class=\"form-control sun-editor-id-image-url\" type=\"text\" />' +\r\n                        '   </div>';\r\n                }\r\n    \r\n                html += '' +\r\n                '           <div class=\"form-group\">' +\r\n                '               <label>' + lang.dialogBox.imageBox.altText + '</label><input class=\"form-control sun-editor-id-image-alt\" type=\"text\" />' +\r\n                '           </div>' +\r\n                '           <div class=\"form-group\">' +\r\n                '               <div class=\"size-text\"><label class=\"size-w\">' + lang.dialogBox.width + '</label><label class=\"size-x\">&nbsp;</label><label class=\"size-h\">' + lang.dialogBox.height + '</label></div>' +\r\n                '               <input class=\"form-size-control sun-editor-id-image-x\" type=\"number\" min=\"1\" /><label class=\"size-x\">x</label><input class=\"form-size-control sun-editor-id-image-y\" type=\"number\" min=\"1\" disabled />' +\r\n                '               <input type=\"checkbox\" id=\"suneditor_image_check_proportion\" style=\"margin-left: 20px;\" checked disabled/><label for=\"suneditor_image_check_proportion\">&nbsp;' + lang.dialogBox.proportion + '</label>' +\r\n                '               <button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" class=\"btn_editor sun-editor-id-image-revert-button\" style=\"float: right;\"><div class=\"icon-revert\"></div></button>' +\r\n                '           </div>' +\r\n                '           <div class=\"form-group-footer\">' +\r\n                '               <input type=\"checkbox\" id=\"suneditor_image_check_caption\" /><label for=\"suneditor_image_check_caption\">&nbsp;' + lang.dialogBox.imageBox.caption + '</label>' +\r\n                '           </div>' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '   <div class=\"sun-editor-id-tab-content sun-editor-id-tab-content-url\" style=\"display: none\">' +\r\n                '       <div class=\"modal-body\">' +\r\n                '           <div class=\"form-group\">' +\r\n                '               <label>' + lang.dialogBox.linkBox.url + '</label><input class=\"form-control sun-editor-id-image-link\" type=\"text\" />' +\r\n                '           </div>' +\r\n                '           <label><input type=\"checkbox\" class=\"sun-editor-id-linkCheck\" />&nbsp;' + lang.dialogBox.linkBox.newWindowCheck + '</label>' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '   <div class=\"modal-footer\">' +\r\n                '       <div style=\"float: left;\">' +\r\n                '           <input type=\"radio\" id=\"suneditor_image_radio_none\" name=\"suneditor_image_radio\" class=\"modal-radio\" value=\"none\" checked><label for=\"suneditor_image_radio_none\">' + lang.dialogBox.basic + '</label>' +\r\n                '           <input type=\"radio\" id=\"suneditor_image_radio_left\" name=\"suneditor_image_radio\" class=\"modal-radio\" value=\"left\"><label for=\"suneditor_image_radio_left\">' + lang.dialogBox.left + '</label>' +\r\n                '           <input type=\"radio\" id=\"suneditor_image_radio_center\" name=\"suneditor_image_radio\" class=\"modal-radio\" value=\"center\"><label for=\"suneditor_image_radio_center\">' + lang.dialogBox.center + '</label>' +\r\n                '           <input type=\"radio\" id=\"suneditor_image_radio_right\" name=\"suneditor_image_radio\" class=\"modal-radio\" value=\"right\"><label for=\"suneditor_image_radio_right\">' + lang.dialogBox.right + '</label>' +\r\n                '       </div>' +\r\n                '       <button type=\"submit\" class=\"btn btn-primary sun-editor-id-submit-image\"><span>' + lang.dialogBox.submitButton + '</span></button>' +\r\n                '   </div>' +\r\n                '</form>';\r\n    \r\n            dialog.innerHTML = html;\r\n    \r\n            return dialog;\r\n        },\r\n    \r\n        openTab: function (e) {\r\n            const targetElement = (e === 'init' ? document.getElementsByClassName('sun-editor-id-tab-link')[0] : e.target);\r\n    \r\n            if (!/^BUTTON$/i.test(targetElement.tagName)) {\r\n                return false;\r\n            }\r\n    \r\n            // Declare all variables\r\n            const tabName = targetElement.getAttribute('data-tab-link');\r\n            const contentClassName = 'sun-editor-id-tab-content';\r\n            let i, tabcontent, tablinks;\r\n    \r\n            // Get all elements with class=\"tabcontent\" and hide them\r\n            tabcontent = document.getElementsByClassName(contentClassName);\r\n            for (i = 0; i < tabcontent.length; i++) {\r\n                tabcontent[i].style.display = 'none';\r\n            }\r\n    \r\n            // Get all elements with class=\"tablinks\" and remove the class \"active\"\r\n            tablinks = document.getElementsByClassName('sun-editor-id-tab-link');\r\n            for (i = 0; i < tablinks.length; i++) {\r\n                this.util.removeClass(tablinks[i], 'active');\r\n            }\r\n    \r\n            // Show the current tab, and add an \"active\" class to the button that opened the tab\r\n            this.context.image.modal.getElementsByClassName(contentClassName + '-' + tabName)[0].style.display = 'block';\r\n            this.util.addClass(targetElement, 'active');\r\n    \r\n            // focus\r\n            if (tabName === 'image') {\r\n                this.context.image.imgUrlFile.focus();\r\n            } else if (tabName === 'url') {\r\n                this.context.image.imgLink.focus();\r\n            }\r\n    \r\n            return false;\r\n        },\r\n    \r\n        xmlHttp: null,\r\n    \r\n        onRender_imgInput: function () {\r\n            function inputAction(files) {\r\n                if (files.length > 0) {\r\n                    const imageUploadUrl = this.context.user.imageUploadUrl;\r\n                    const filesLen = this.context.dialog.updateModal ? 1 : files.length;\r\n    \r\n                    if (imageUploadUrl !== null && imageUploadUrl.length > 0) {\r\n                        const formData = new FormData();\r\n    \r\n                        for (let i = 0; i < filesLen; i++) {\r\n                            formData.append('file-' + i, files[i]);\r\n                        }\r\n    \r\n                        this.plugins.image.xmlHttp = this.util.getXMLHttpRequest();\r\n                        this.plugins.image.xmlHttp.onreadystatechange = this.plugins.image.callBack_imgUpload.bind(this, this.context.image._linkValue, this.context.image.imgLinkNewWindowCheck.checked, this.context.image.imageX.value + 'px', this.context.image._align, this.context.dialog.updateModal);\r\n                        this.plugins.image.xmlHttp.open('post', imageUploadUrl, true);\r\n                        this.plugins.image.xmlHttp.send(formData);\r\n                    } else {\r\n                        for (let i = 0; i < filesLen; i++) {\r\n                            this.plugins.image.setup_reader.call(this, files[i], this.context.image._linkValue, this.context.image.imgLinkNewWindowCheck.checked, this.context.dialog.updateModal);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n    \r\n            try {\r\n                inputAction.call(this, this.context.image.imgInputFile.files);\r\n            } catch (e) {\r\n                this.closeLoading();\r\n                throw Error('[SUNEDITOR.imageUpload.fail] cause : \"' + e.message + '\"');\r\n            }\r\n        },\r\n    \r\n        setup_reader: function (file, imgLinkValue, newWindowCheck, update) {\r\n            const reader = new FileReader();\r\n    \r\n            reader.onload = function (update) {\r\n                this.plugins.image.create_image.call(this, reader.result, imgLinkValue, newWindowCheck, this.context.image.imageX.value + 'px', this.context.image._align, update);\r\n            }.bind(this, update);\r\n    \r\n            reader.readAsDataURL(file);\r\n        },\r\n    \r\n        callBack_imgUpload: function (linkValue, linkNewWindow, width, align, update) {\r\n            const xmlHttp = this.plugins.image.xmlHttp;\r\n            if (xmlHttp.readyState === 4) {\r\n                if (xmlHttp.status === 200) {\r\n                    const result = eval(xmlHttp.responseText);\r\n    \r\n                    for (let i = 0, len = (update && result.length > 0 ? 1 : result.length); i < len; i++) {\r\n                        this.plugins.image.create_image.call(this, result[i].SUNEDITOR_IMAGE_SRC, linkValue, linkNewWindow, width, align, update);\r\n                    }\r\n                } else {\r\n                    window.open('', '_blank').document.writeln(xmlHttp.responseText);\r\n                }\r\n    \r\n                this.closeLoading();\r\n            }\r\n        },\r\n    \r\n        onRender_imgUrl: function () {\r\n            if (this.context.image.imgUrlFile.value.trim().length === 0) return false;\r\n    \r\n            try {\r\n                this.plugins.image.create_image.call(this, this.context.image.imgUrlFile.value, this.context.image._linkValue, this.context.image.imgLinkNewWindowCheck.checked, this.context.image.imageX.value + 'px', this.context.image._align);\r\n            } catch (e) {\r\n                this.closeLoading();\r\n                throw Error('[SUNEDITOR.inseretImageUrl.fail] cause : \"' + e.message + '\"');\r\n            }\r\n        },\r\n    \r\n        onRender_link: function (imgTag, imgLinkValue, newWindowCheck) {\r\n            if (imgLinkValue.trim().length > 0) {\r\n                const link = document.createElement('A');\r\n                link.href = /^https?:\\/\\//.test(imgLinkValue) ? imgLinkValue : 'http://' + imgLinkValue;\r\n                link.target = (newWindowCheck ? '_blank' : '');\r\n                link.setAttribute('data-image-link', 'image');\r\n                link.addEventListener('click', function (e) { e.preventDefault(); });\r\n    \r\n                imgTag.setAttribute('data-image-link', imgLinkValue);\r\n                imgTag.style.padding = '1px';\r\n                imgTag.style.margin = '1px';\r\n                imgTag.style.outline = '1px solid #f4b124';\r\n    \r\n                link.appendChild(imgTag);\r\n                return link;\r\n            }\r\n    \r\n            return imgTag;\r\n        },\r\n    \r\n        setInputSize: function (xy) {\r\n            if (!this.context.dialog.updateModal) return;\r\n    \r\n            if (this.context.image.proportion.checked) {\r\n                if (xy === 'x') {\r\n                    this.context.image.imageY.value = Math.round((this.context.image._element_h / this.context.image._element_w) * this.context.image.imageX.value);\r\n                } else {\r\n                    this.context.image.imageX.value = Math.round((this.context.image._element_w / this.context.image._element_h) * this.context.image.imageY.value);\r\n                }\r\n            }\r\n        },\r\n    \r\n        submit: function (e) {\r\n            this.showLoading();\r\n    \r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            this.context.image._linkValue = this.context.image.imgLink.value;\r\n            this.context.image._altText = this.context.image.altText.value;\r\n            this.context.image._align = this.context.image.modal.querySelector('input[name=\"suneditor_image_radio\"]:checked').value;\r\n            this.context.image._captionChecked = this.context.image.caption.checked;\r\n            this.context.image._proportionChecked = this.context.image.proportion.checked;\r\n    \r\n            try {\r\n                if (this.context.dialog.updateModal) {\r\n                    this.plugins.image.update_image.call(this);\r\n                } else {\r\n                    this.plugins.image.onRender_imgInput.call(this);\r\n                    this.plugins.image.onRender_imgUrl.call(this);\r\n                }\r\n            } finally {\r\n                this.plugins.dialog.closeDialog.call(this);\r\n                this.closeLoading();\r\n            }\r\n    \r\n            return false;\r\n        },\r\n    \r\n        create_caption: function () {\r\n            const caption = document.createElement('FIGCAPTION');\r\n            \r\n            caption.innerHTML = '<p>' + this.lang.dialogBox.imageBox.caption + '</p>';\r\n            caption.addEventListener('click', this.plugins.image.toggle_caption_contenteditable.bind(this, true));\r\n    \r\n            return caption;\r\n        },\r\n    \r\n        set_cover: function (imageElement) {\r\n            const cover = document.createElement('FIGURE');\r\n            cover.className = 'sun-editor-image-cover';\r\n            cover.appendChild(imageElement);\r\n    \r\n            return cover;\r\n        },\r\n    \r\n        set_container: function (cover) {\r\n            const container = document.createElement('DIV');\r\n            container.className = 'sun-editor-id-image-container';\r\n            container.setAttribute('contenteditable', false);\r\n            container.style.textAlign = 'center';\r\n            container.appendChild(cover);\r\n    \r\n            return container;\r\n        },\r\n    \r\n        create_image: function (src, linkValue, linkNewWindow, width, align, update) {\r\n            if (update) {\r\n                this.context.image._element.src = src;\r\n                return;\r\n            }\r\n    \r\n            let oImg = document.createElement('IMG');\r\n            oImg.src = src;\r\n            oImg.style.width = width;\r\n            oImg.setAttribute('data-align', align);\r\n            oImg.setAttribute('data-proportion', this.context.image._proportionChecked);\r\n            oImg.alt = this.context.image._altText;\r\n            oImg = this.plugins.image.onRender_link(oImg, linkValue, linkNewWindow);\r\n    \r\n            const cover = this.plugins.image.set_cover.call(this, oImg);\r\n            const container = this.plugins.image.set_container.call(this, cover);\r\n    \r\n            // caption\r\n            if (this.context.image._captionChecked) {\r\n                this.context.image._imageCaption = this.plugins.image.create_caption.call(this);\r\n                cover.appendChild(this.context.image._imageCaption);\r\n            }\r\n            \r\n            // align\r\n            if ('center' !== align) {\r\n                container.style.display = 'inline-block';\r\n                container.style.float = align;\r\n            }\r\n    \r\n            this.insertNode(container, this.util.getFormatElement(this.getSelectionNode()));\r\n            this.appendP(container);\r\n        },\r\n    \r\n        update_image: function () {\r\n            const contextImage = this.context.image;\r\n            const linkValue = contextImage._linkValue;\r\n            let cover = this.util.getParentElement(contextImage._element, '.sun-editor-image-cover');\r\n            let container = this.util.getParentElement(contextImage._element, '.sun-editor-id-image-container');\r\n            let isNewContainer = false;\r\n    \r\n            if (cover === null) {\r\n                isNewContainer = true;\r\n                cover = this.plugins.image.set_cover.call(this, contextImage._element.cloneNode(true));\r\n            }\r\n    \r\n            if (container === null) {\r\n                isNewContainer = true;\r\n                container = this.plugins.image.set_container.call(this, cover.cloneNode(true));\r\n            } else if (isNewContainer) {\r\n                container.innerHTML = '';\r\n                container.appendChild(cover);\r\n            }\r\n    \r\n            // input update\r\n            this.plugins.image.onRender_imgInput.call(this);\r\n    \r\n            // src, size\r\n            contextImage._element.src = contextImage.imgUrlFile.value;\r\n            contextImage._element.alt = contextImage._altText;\r\n            contextImage._element.setAttribute('data-proportion', contextImage._proportionChecked);;\r\n            contextImage._element.style.width = contextImage.imageX.value + 'px';\r\n            contextImage._element.style.height = contextImage.imageY.value + 'px';\r\n    \r\n            // caption\r\n            if (contextImage._captionChecked) {\r\n                if (contextImage._imageCaption === null) {\r\n                    contextImage._imageCaption = this.plugins.image.create_caption.call(this);\r\n                    cover.appendChild(contextImage._imageCaption);\r\n                }\r\n            } else {\r\n                if (contextImage._imageCaption) {\r\n                    this.util.removeItem(contextImage._imageCaption);\r\n                }\r\n            }\r\n    \r\n            // align\r\n            if ('center' !== contextImage._align) {\r\n                container.style.display = 'inline-block';\r\n                container.style.float = contextImage._align;\r\n            } else {\r\n                container.style.display = '';\r\n                container.style.float = 'none';\r\n            }\r\n    \r\n            contextImage._element.setAttribute('data-align', contextImage._align);\r\n    \r\n            // link\r\n            if (linkValue.trim().length > 0) {\r\n                if (contextImage._linkElement !== null) {\r\n                    contextImage._linkElement.href = linkValue;\r\n                    contextImage._linkElement.target = this.context.image.imgLinkNewWindowCheck.checked;\r\n                    contextImage._element.setAttribute('data-image-link', linkValue);\r\n                } else {\r\n                    let newEl = this.plugins.image.onRender_link(contextImage._element.cloneNode(true), linkValue, this.context.image.imgLinkNewWindowCheck.checked);\r\n                    cover.innerHTML = '';\r\n                    cover.appendChild(newEl);\r\n                }\r\n            }\r\n            else if (contextImage._linkElement !== null) {\r\n                const imageElement = contextImage._element;\r\n    \r\n                imageElement.setAttribute('data-image-link', '');\r\n                imageElement.style.padding = '';\r\n                imageElement.style.margin = '';\r\n                imageElement.style.outline = '';\r\n    \r\n                let newEl = imageElement.cloneNode(true);\r\n                cover.innerHTML = '';\r\n                cover.appendChild(newEl);\r\n            }\r\n    \r\n            if (isNewContainer) {\r\n                const existElement = this.util.getFormatElement(contextImage._element);\r\n                existElement.parentNode.insertBefore(container, existElement);\r\n                this.util.removeItem(existElement);\r\n            }\r\n        },\r\n    \r\n        toggle_caption_contenteditable: function (on, e) {\r\n            this.context.image._onCaption = on;\r\n            this.context.image._imageCaption.setAttribute('contenteditable', on);\r\n            this.context.image._imageCaption.focus();\r\n        },\r\n    \r\n        sizeRevert: function () {\r\n            const contextImage = this.context.image;\r\n            if (contextImage._origin_w) {\r\n                contextImage.imageX.value = contextImage._element_w = contextImage._origin_w;\r\n                contextImage.imageY.value = contextImage._element_h = contextImage._origin_h;\r\n            }\r\n        },\r\n    \r\n        onModifyMode: function (element, size) {\r\n            const contextImage = this.context.image;\r\n            contextImage._linkElement = /^A$/i.test(element.parentNode.nodeName) ? element.parentNode : null;\r\n            contextImage._element = contextImage._resize_element = element;\r\n            contextImage._imageCaption = element.nextSibling;\r\n    \r\n            contextImage._element_w = size.w;\r\n            contextImage._element_h = size.h;\r\n            contextImage._element_t = size.t;\r\n            contextImage._element_l = size.l;\r\n    \r\n            let origin = contextImage._element.getAttribute('data-origin');\r\n            if (origin) {\r\n                origin = origin.split(',');\r\n                contextImage._origin_w = origin[0] * 1;\r\n                contextImage._origin_h = origin[1] * 1;\r\n            } else {\r\n                contextImage._origin_w = size.w;\r\n                contextImage._origin_h = size.h;\r\n                contextImage._element.setAttribute('data-origin', size.w + ',' + size.h);\r\n            }\r\n        },\r\n    \r\n        openModify: function () {\r\n            const contextImage = this.context.image;\r\n            contextImage.imgUrlFile.value = contextImage._element.src;\r\n            contextImage.altText.value = contextImage._element.alt;\r\n            contextImage.imgLink.value = contextImage._linkElement === null ? '' : contextImage._linkElement.href;\r\n            contextImage.imgLinkNewWindowCheck.checked = !contextImage._linkElement || contextImage._linkElement.target === '_blank';\r\n            contextImage.modal.querySelector('#suneditor_image_radio_' + (contextImage._element.getAttribute('data-align') || 'none')).checked = true;\r\n            contextImage._captionChecked = contextImage.caption.checked = !!contextImage._imageCaption;\r\n            contextImage.proportion.checked = contextImage._proportionChecked = contextImage._element.getAttribute('data-proportion') === 'true';\r\n            contextImage.imageX.value = contextImage._element.offsetWidth;\r\n            contextImage.imageY.value = contextImage._element.offsetHeight;\r\n            contextImage.imageY.disabled = false;\r\n            contextImage.proportion.disabled = false;\r\n    \r\n            this.plugins.dialog.openDialog.call(this, 'image', null, true);\r\n        },\r\n    \r\n        setSize: function (x, y) {\r\n            this.context.image._resize_element.style.width = x;\r\n            this.context.image._resize_element.style.height = y;\r\n        },\r\n    \r\n        destroy: function () {\r\n            const imageContainer = this.util.getParentElement(this.context.image._element, '.sun-editor-id-image-container') || this.context.image._element;\r\n            this.util.removeItem(imageContainer);\r\n            this.plugins.image.init.call(this);\r\n        },\r\n    \r\n        init: function () {\r\n            this.context.image.imgInputFile.value = '';\r\n            this.context.image.imgUrlFile.value = '';\r\n            this.context.image.altText.value = '';\r\n            this.context.image.imgLink.value = '';\r\n            this.context.image.imgLinkNewWindowCheck.checked = false;\r\n            this.context.image.modal.querySelector('#suneditor_image_radio_none').checked = true;\r\n            this.context.image.caption.checked = false;\r\n            this.context.image.proportion.checked = false;\r\n            this.context.image.imageX.value = this.context.user.imageSize;\r\n            this.context.image.imageY.value = '';\r\n            this.context.image.imageY.disabled = true;\r\n            this.context.image.proportion.disabled = true;\r\n            this.context.image._element = null;\r\n            this.plugins.image.openTab.call(this, 'init');\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.image = image;\r\n    }\r\n\r\n    return image;\r\n}));\r\n\r\n\n\n//# sourceURL=webpack:///./src/plugins/dialog/image.js?")},"./src/plugins/dialog/link.js":
/*!************************************!*\
  !*** ./src/plugins/dialog/link.js ***!
  \************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function(w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const link = {\r\n        name: 'link',\r\n        add: function (_this) {\r\n            const context = _this.context;\r\n            context.link = {};\r\n    \r\n            /** link dialog */\r\n            let link_dialog = eval(this.setDialog(_this.lang));\r\n            context.link.modal = link_dialog;\r\n            context.link.focusElement = link_dialog.getElementsByClassName('sun-editor-id-link-url')[0];\r\n            context.link.linkAnchorText = link_dialog.getElementsByClassName('sun-editor-id-link-text')[0];\r\n            context.link.linkNewWindowCheck = link_dialog.getElementsByClassName('sun-editor-id-link-check')[0];\r\n    \r\n            /** link button */\r\n            let link_button = eval(this.setController_LinkBtn(_this.lang));\r\n            context.link.linkBtn = link_button;\r\n            context.link._linkAnchor = null;\r\n    \r\n            /** add event listeners */\r\n            link_dialog.getElementsByClassName('btn-primary')[0].addEventListener('click', this.submit.bind(_this));\r\n            link_button.addEventListener('click', this.onClick_linkBtn.bind(_this));\r\n    \r\n            /** append html */\r\n            context.dialog.modal.appendChild(link_dialog);\r\n            context.element.relative.appendChild(link_button);\r\n    \r\n            /** empty memory */\r\n            link_dialog = null, link_button = null;\r\n        },\r\n    \r\n        /** dialog */\r\n        setDialog: function (lang) {\r\n            const dialog = document.createElement('DIV');\r\n    \r\n            dialog.className = 'modal-content sun-editor-id-dialog-link';\r\n            dialog.style.display = 'none';\r\n            dialog.innerHTML = '' +\r\n                '<form class=\"editor_link\">' +\r\n                '   <div class=\"modal-header\">' +\r\n                '       <button type=\"button\" data-command=\"close\" class=\"close\" aria-label=\"Close\">' +\r\n                '           <div aria-hidden=\"true\" data-command=\"close\" class=\"icon-cancel\"></div>' +\r\n                '       </button>' +\r\n                '       <h5 class=\"modal-title\">' + lang.dialogBox.linkBox.title + '</h5>' +\r\n                '   </div>' +\r\n                '   <div class=\"modal-body\">' +\r\n                '       <div class=\"form-group\">' +\r\n                '           <label>' + lang.dialogBox.linkBox.url + '</label>' +\r\n                '           <input class=\"form-control sun-editor-id-link-url\" type=\"text\" />' +\r\n                '       </div>' +\r\n                '       <div class=\"form-group\">' +\r\n                '           <label>' + lang.dialogBox.linkBox.text + '</label><input class=\"form-control sun-editor-id-link-text\" type=\"text\" />' +\r\n                '       </div>' +\r\n                '       <label class=\"label-check\"><input type=\"checkbox\" class=\"sun-editor-id-link-check\" />&nbsp;' + lang.dialogBox.linkBox.newWindowCheck + '</label>' +\r\n                '   </div>' +\r\n                '   <div class=\"modal-footer\">' +\r\n                '       <button type=\"submit\" class=\"btn btn-primary sun-editor-id-submit-link\"><span>' + lang.dialogBox.submitButton + '</span></button>' +\r\n                '   </div>' +\r\n                '</form>';\r\n    \r\n            return dialog;\r\n        },\r\n    \r\n        /** modify controller button */\r\n        setController_LinkBtn: function (lang) {\r\n            const link_btn = document.createElement('DIV');\r\n    \r\n            link_btn.className = 'sun-editor-id-link-btn';\r\n            link_btn.style.display = 'none';\r\n            link_btn.innerHTML = '' +\r\n                '<div class=\"arrow\"></div>' +\r\n                '<div class=\"link-content\"><span><a target=\"_blank\" href=\"\"></a>&nbsp;</span>' +\r\n                '   <div class=\"btn-group\">' +\r\n                '     <button type=\"button\" data-command=\"update\" tabindex=\"-1\" title=\"' + lang.editLink.edit + '\"><div class=\"icon-link\"></div></button>' +\r\n                '     <button type=\"button\" data-command=\"delete\" tabindex=\"-1\" title=\"' + lang.editLink.remove + '\"><div class=\"icon-cancel\"></div></button>' +\r\n                '   </div>' +\r\n                '</div>';\r\n    \r\n            return link_btn;\r\n        },\r\n    \r\n        submit: function (e) {\r\n            this.showLoading();\r\n    \r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            function submitAction() {\r\n                if (this.context.link.focusElement.value.trim().length === 0) return false;\r\n    \r\n                const url = /^https?:\\/\\//.test(this.context.link.focusElement.value) ? this.context.link.focusElement.value : \"http://\" + this.context.link.focusElement.value;\r\n                const anchor = this.context.link.linkAnchorText || this.context.dialog.document.getElementById(\"linkAnchorText\");\r\n                const anchorText = anchor.value.length === 0 ? url : anchor.value;\r\n    \r\n                if (!this.context.dialog.updateModal) {\r\n                    const oA = document.createElement('A');\r\n                    oA.href = url;\r\n                    oA.textContent = anchorText;\r\n                    oA.target = (this.context.link.linkNewWindowCheck.checked ? '_blank' : '');\r\n    \r\n                    this.insertNode(oA);\r\n                    this.setRange(oA.childNodes[0], 0, oA.childNodes[0], oA.textContent.length);\r\n                } else {\r\n                    this.context.link._linkAnchor.href = url;\r\n                    this.context.link._linkAnchor.textContent = anchorText;\r\n                    this.context.link._linkAnchor.target = (this.context.link.linkNewWindowCheck.checked ? '_blank' : '');\r\n                    this.setRange(this.context.link._linkAnchor.childNodes[0], 0, this.context.link._linkAnchor.childNodes[0], this.context.link._linkAnchor.textContent.length);\r\n                }\r\n    \r\n                this.context.link.focusElement.value = '';\r\n                this.context.link.linkAnchorText.value = '';\r\n            }\r\n    \r\n            try {\r\n                submitAction.call(this);\r\n            } finally {\r\n                this.plugins.dialog.closeDialog.call(this);\r\n                this.closeLoading();\r\n                this.focus();\r\n            }\r\n    \r\n            return false;\r\n        },\r\n    \r\n        call_controller_linkButton: function (selectionATag) {\r\n            this.editLink = this.context.link._linkAnchor = selectionATag;\r\n            const linkBtn = this.context.link.linkBtn;\r\n    \r\n            linkBtn.getElementsByTagName('A')[0].href = selectionATag.href;\r\n            linkBtn.getElementsByTagName('A')[0].textContent = selectionATag.textContent;\r\n    \r\n            linkBtn.style.left = selectionATag.offsetLeft + 'px';\r\n            linkBtn.style.top = (selectionATag.offsetTop + selectionATag.offsetHeight + this.context.tool.bar.offsetHeight + 10 - this.context.element.wysiwygWindow.pageYOffset) + \"px\";\r\n            linkBtn.style.display = 'block';\r\n    \r\n            this.controllerArray = [linkBtn];\r\n        },\r\n    \r\n        onClick_linkBtn: function (e) {\r\n            e.stopPropagation();\r\n    \r\n            const command = e.target.getAttribute('data-command') || e.target.parentNode.getAttribute('data-command');\r\n            if (!command) return;\r\n    \r\n            e.preventDefault();\r\n    \r\n            if (/update/.test(command)) {\r\n                this.context.link.focusElement.value = this.context.link._linkAnchor.href;\r\n                this.context.link.linkAnchorText.value = this.context.link._linkAnchor.textContent;\r\n                this.context.link.linkNewWindowCheck.checked = (/_blank/i.test(this.context.link._linkAnchor.target) ? true : false);\r\n                this.plugins.dialog.openDialog.call(this, 'link', null, true);\r\n            }\r\n            else {\r\n                /** delete */\r\n                this.util.removeItem(this.context.link._linkAnchor);\r\n                this.context.link._linkAnchor = null;\r\n                this.focus();\r\n            }\r\n    \r\n            this.context.link.linkBtn.style.display = 'none';\r\n        },\r\n    \r\n        init: function () {\r\n            this.context.link.linkBtn.style.display = 'none';\r\n            this.context.link._linkAnchor = null;\r\n            this.context.link.focusElement.value = '';\r\n            this.context.link.linkAnchorText.value = '';\r\n            this.context.link.linkNewWindowCheck.checked = false;\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.link = link;\r\n    }\r\n\r\n    return link;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/dialog/link.js?")},"./src/plugins/dialog/video.js":
/*!*************************************!*\
  !*** ./src/plugins/dialog/video.js ***!
  \*************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function(w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const video = {\r\n        name: 'video',\r\n        add: function (_this) {\r\n            const context = _this.context;\r\n            context.video = {\r\n                _coverElement: null,\r\n                _coverElementInner: document.createElement('SPAN'),\r\n                _element: null,\r\n                _resize_element: null,\r\n                _element_w: 1,\r\n                _element_h: 1,\r\n                _element_l: 0,\r\n                _element_t: 0,\r\n                _origin_w: context.user.videoX,\r\n                _origin_h: context.user.videoY,\r\n                _proportionChecked: false\r\n            };\r\n    \r\n            /** Inner node needed to edit video iframe event */\r\n            context.video._coverElementInner.className = 'sun-editor-iframe-inner-cover';\r\n            context.video._coverElementInner.addEventListener('click', function (e) {\r\n                const pNode = e.target.parentNode;\r\n                const size = _this.plugins.dialog.call_controller_resize.call(_this, pNode, 'video');\r\n                _this.plugins.video.onModifyMode.call(_this, pNode.children[0], size);\r\n            });\r\n    \r\n            /** video dialog */\r\n            let video_dialog = eval(this.setDialog(_this.lang));\r\n            context.video.modal = video_dialog;\r\n            context.video.focusElement = video_dialog.getElementsByClassName('sun-editor-id-video-url')[0];\r\n            context.video.videoX = video_dialog.getElementsByClassName('sun-editor-id-video-x')[0];\r\n            context.video.videoY = video_dialog.getElementsByClassName('sun-editor-id-video-y')[0];\r\n            context.video.proportion = video_dialog.querySelector('#suneditor_video_check_proportion');\r\n    \r\n            /** set user option value */\r\n            video_dialog.getElementsByClassName('sun-editor-id-video-x')[0].value = context.user.videoX;\r\n            video_dialog.getElementsByClassName('sun-editor-id-video-y')[0].value = context.user.videoY;\r\n    \r\n            /** add event listeners */\r\n            video_dialog.getElementsByClassName('btn-primary')[0].addEventListener('click', this.submit.bind(_this));\r\n            context.video.videoX.addEventListener('change', this.setInputSize.bind(_this, 'x'));\r\n            context.video.videoY.addEventListener('change', this.setInputSize.bind(_this, 'y'));\r\n            video_dialog.getElementsByClassName('sun-editor-id-video-revert-button')[0].addEventListener('click', this.sizeRevert.bind(_this));\r\n    \r\n            /** append html */\r\n            context.dialog.modal.appendChild(video_dialog);\r\n    \r\n            /** empty memory */\r\n            video_dialog = null;\r\n        },\r\n    \r\n        /** dialog */\r\n        setDialog: function (lang) {\r\n            const dialog = document.createElement('DIV');\r\n    \r\n            dialog.className = 'modal-content sun-editor-id-dialog-video';\r\n            dialog.style.display = 'none';\r\n            dialog.innerHTML = '' +\r\n                '<form class=\"editor_video\">' +\r\n                '   <div class=\"modal-header\">' +\r\n                '       <button type=\"button\" data-command=\"close\" class=\"close\" aria-label=\"Close\">' +\r\n                '           <div aria-hidden=\"true\" data-command=\"close\" class=\"icon-cancel\"></div>' +\r\n                '       </button>' +\r\n                '       <h5 class=\"modal-title\">' + lang.dialogBox.videoBox.title + '</h5>' +\r\n                '   </div>' +\r\n                '   <div class=\"modal-body\">' +\r\n                '       <div class=\"form-group\">' +\r\n                '           <label>' + lang.dialogBox.videoBox.url + '</label>' +\r\n                '           <input class=\"form-control sun-editor-id-video-url\" type=\"text\" />' +\r\n                '       </div>' +\r\n                '       <div class=\"form-group\">' +\r\n                '           <div class=\"size-text\"><label class=\"size-w\">' + lang.dialogBox.width + '</label><label class=\"size-x\">&nbsp;</label><label class=\"size-h\">' + lang.dialogBox.height + '</label></div>' +\r\n                '           <input type=\"number\" class=\"form-size-control sun-editor-id-video-x\" /><label class=\"size-x\">x</label><input type=\"number\" class=\"form-size-control sun-editor-id-video-y\" />' +\r\n                '           <input type=\"checkbox\" id=\"suneditor_video_check_proportion\" style=\"margin-left: 20px;\" disabled/><label for=\"suneditor_video_check_proportion\">&nbsp;' + lang.dialogBox.proportion + '</label>' +\r\n                '           <button type=\"button\" title=\"' + lang.dialogBox.revertButton + '\" class=\"btn_editor sun-editor-id-video-revert-button\" style=\"float: right;\"><div class=\"icon-revert\"></div></button>' +\r\n                '       </div>' +\r\n                '   </div>' +\r\n                '   <div class=\"modal-footer\">' +\r\n                '       <button type=\"submit\" class=\"btn btn-primary sun-editor-id-submit-video\"><span>' + lang.dialogBox.submitButton + '</span></button>' +\r\n                '   </div>' +\r\n                '</form>';\r\n    \r\n            return dialog;\r\n        },\r\n    \r\n        setInputSize: function (xy) {\r\n            if (this.context.video.proportion.checked) {\r\n                if (xy === 'x') {\r\n                    this.context.video.videoY.value = Math.round((this.context.video._element_h / this.context.video._element_w) * this.context.video.videoX.value);\r\n                } else {\r\n                    this.context.video.videoX.value = Math.round((this.context.video._element_w / this.context.video._element_h) * this.context.video.videoY.value);\r\n                }\r\n            }\r\n        },\r\n    \r\n        submit: function (e) {\r\n            this.showLoading();\r\n    \r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            function submitAction() {\r\n                if (this.context.video.focusElement.value.trim().length === 0) return false;\r\n    \r\n                const w = (/^\\d+$/.test(this.context.video.videoX.value) ? this.context.video.videoX.value : this.context.user.videoX);\r\n                const h = (/^\\d+$/.test(this.context.video.videoY.value) ? this.context.video.videoY.value : this.context.user.videoY);\r\n                let oIframe = null;\r\n                let url = this.context.video.focusElement.value.trim();\r\n    \r\n                /** iframe source */\r\n                if (/^\\<iframe.*iframe\\>$/.test(url)) {\r\n                    oIframe = (new DOMParser()).parseFromString(url, 'text/html').getElementsByTagName('iframe')[0]\r\n                }\r\n                /** url */\r\n                else {\r\n                    oIframe = document.createElement('IFRAME');\r\n                    /** youtube */\r\n                    if (/youtu\\.?be/.test(url)) {\r\n                        url = url.replace('watch?v=', '');\r\n                        if (!/^\\/\\/.+\\/embed\\//.test(url)) {\r\n                            url = url.replace(url.match(/\\/\\/.+\\//)[0], '//www.youtube.com/embed/');\r\n                        }\r\n                    }\r\n                    oIframe.src = url;\r\n                }\r\n    \r\n                /** update */\r\n                if (this.context.dialog.updateModal) {\r\n                    this.context.video._element.src = oIframe.src;\r\n                    this.context.video._element.setAttribute('data-proportion', this.context.video._proportionChecked);\r\n                    this.context.video._coverElement.style.width = w + 'px';\r\n                    this.context.video._coverElement.style.height = h + 'px';\r\n                    return;\r\n                }\r\n    \r\n                /** create */\r\n                const coverSpan = document.createElement('SPAN');\r\n                coverSpan.className = 'sun-editor-iframe-cover';\r\n                coverSpan.style.width = w + 'px';\r\n                coverSpan.style.height = h + 'px';\r\n                coverSpan.setAttribute('contentEditable', false);\r\n    \r\n                /** cover event */\r\n                coverSpan.addEventListener('mouseenter', this.plugins.video.onMouseEnter_cover.bind(this));\r\n                coverSpan.addEventListener('mouseleave', this.plugins.video.onMouseLeave_cover.bind(this).bind(this));\r\n    \r\n                oIframe.width = '100%';\r\n                oIframe.height = '100%';\r\n                oIframe.frameBorder = '0';\r\n                oIframe.allowFullscreen = true;\r\n                oIframe.setAttribute('data-proportion', this.context.video._proportionChecked);\r\n                oIframe.contentDocument;\r\n    \r\n                this.context.video._coverElement = coverSpan;\r\n                coverSpan.appendChild(oIframe);\r\n    \r\n                this.insertNode(coverSpan);\r\n                this.appendP(coverSpan);\r\n            }\r\n    \r\n            try {\r\n                this.context.video._proportionChecked = this.context.video.proportion.checked;\r\n                submitAction.call(this);\r\n            } finally {\r\n                this.plugins.dialog.closeDialog.call(this);\r\n                this.closeLoading();\r\n            }\r\n    \r\n            return false;\r\n        },\r\n    \r\n        onMouseEnter_cover: function (e) {\r\n            const target = e.target;\r\n            if (target === this.context.video._coverElementInner.parentNode) return;\r\n    \r\n            target.appendChild(this.context.video._coverElementInner);\r\n        },\r\n    \r\n        onMouseLeave_cover: function (e) {\r\n            const target = e.target;\r\n            if (target === this.context.video._coverElementInner.parentNode) target.removeChild(this.context.video._coverElementInner);\r\n        },\r\n    \r\n        sizeRevert: function () {\r\n            const contextVideo = this.context.video;\r\n            if (contextVideo._origin_w) {\r\n                contextVideo.videoX.value = contextVideo._element_w = contextVideo._origin_w;\r\n                contextVideo.videoY.value = contextVideo._element_h = contextVideo._origin_h;\r\n            }\r\n        },\r\n    \r\n        onModifyMode: function (element, size) {\r\n            const videoContext = this.context.video;\r\n            const pSpan = videoContext._resize_element = videoContext._coverElement;\r\n            videoContext._element = element;\r\n    \r\n            if (pSpan === videoContext._coverElementInner.parentNode) pSpan.removeChild(videoContext._coverElementInner);\r\n    \r\n            videoContext._element_w = size.w;\r\n            videoContext._element_h = size.h;\r\n            videoContext._element_t = size.t;\r\n            videoContext._element_l = size.l;\r\n    \r\n            let origin = videoContext._element.getAttribute('data-origin');\r\n            if (origin) {\r\n                origin = origin.split(',');\r\n                videoContext._origin_w = origin[0] * 1;\r\n                videoContext._origin_h = origin[1] * 1;\r\n            } else {\r\n                videoContext._origin_w = size.w;\r\n                videoContext._origin_h = size.h;\r\n                videoContext._element.setAttribute('data-origin', size.w + ',' + size.h);\r\n            }\r\n        },\r\n    \r\n        openModify: function () {\r\n            const contextVideo = this.context.video;\r\n            const pSpan = contextVideo._coverElement;\r\n            const frame = pSpan.children[0];\r\n    \r\n            contextVideo.focusElement.value = frame.src;\r\n            contextVideo.videoX.value = pSpan.style.width.match(/\\d+/)[0];\r\n            contextVideo.videoY.value = pSpan.style.height.match(/\\d+/)[0];\r\n            contextVideo.proportion.checked = contextVideo._proportionChecked = contextVideo._element.getAttribute('data-proportion') === 'true';\r\n            contextVideo.proportion.disabled = false;\r\n    \r\n            this.plugins.dialog.openDialog.call(this, 'video', null, true);\r\n        },\r\n    \r\n        setSize: function (x, y) {\r\n            this.context.video._resize_element.style.width = x;\r\n            this.context.video._resize_element.style.height = y;\r\n        },\r\n    \r\n        destroy: function () {\r\n            this.util.removeItem(this.context.video._coverElement);\r\n            this.plugins.video.init.call(this);\r\n        },\r\n    \r\n        init: function () {\r\n            this.context.video.focusElement.value = '';\r\n            this.context.video.videoX.value = this.context.user.videoX;\r\n            this.context.video.videoY.value = this.context.user.videoY;\r\n            this.context.video.proportion.checked = false;\r\n            this.context.video.proportion.disabled = true;\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.video = video;\r\n    }\r\n\r\n    return video;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/dialog/video.js?")},"./src/plugins/modules/dialog.js":
/*!***************************************!*\
  !*** ./src/plugins/modules/dialog.js ***!
  \***************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function(w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const dialog = {\r\n        name: 'dialog',\r\n        add: function (_this) {\r\n            const context = _this.context;\r\n            context.dialog = {\r\n                _resizeClientX: 0,\r\n                _resizeClientY: 0,\r\n                _resize_plugin: '',\r\n                _resize_w: 0,\r\n                _resize_h: 0,\r\n                _resize_direction: ''\r\n            };\r\n    \r\n            /** dialog */\r\n            let dialog_div = document.createElement('DIV');\r\n            dialog_div.className = 'sun-editor-id-dialogBox';\r\n    \r\n            let dialog_back = document.createElement('DIV');\r\n            dialog_back.className = 'modal-dialog-background sun-editor-id-dialog-back';\r\n            dialog_back.style.display = 'none';\r\n    \r\n            let dialog_area = document.createElement('DIV');\r\n            dialog_area.className = 'modal-dialog sun-editor-id-dialog-modal';\r\n            dialog_area.style.display = 'none';\r\n    \r\n            dialog_div.appendChild(dialog_back);\r\n            dialog_div.appendChild(dialog_area);\r\n    \r\n            context.dialog.modalArea = dialog_div;\r\n            context.dialog.back = dialog_back;\r\n            context.dialog.modal = dialog_area;\r\n    \r\n            /** resize controller, button */\r\n            let resize_div_container = eval(this.setController_resize());\r\n            context.dialog.resizeContainer = resize_div_container;\r\n    \r\n            context.dialog.resizeDiv = resize_div_container.getElementsByClassName('modal-resize')[0];\r\n            context.dialog.resizeDot = resize_div_container.getElementsByClassName('resize-dot')[0];\r\n            context.dialog.resizeDisplay = resize_div_container.getElementsByClassName('resize-display')[0];\r\n    \r\n            let resize_button = eval(this.setController_button(_this.lang));;\r\n            context.dialog.resizeButton = resize_button;\r\n    \r\n            let resize_handles = resize_div_container.getElementsByClassName('sun-editor-name-resize-handle');\r\n    \r\n            /** add event listeners */\r\n            context.dialog.modal.addEventListener('click', this.onClick_dialog.bind(_this));\r\n            context.element.topArea.getElementsByClassName('sun-editor-container')[0].appendChild(dialog_div);\r\n            resize_handles[0].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[1].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[2].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[3].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[4].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[5].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[6].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_handles[7].addEventListener('mousedown', this.onMouseDown_resize_handle.bind(_this));\r\n            resize_button.addEventListener('click', this.onClick_resizeButton.bind(_this));\r\n    \r\n            /** append html */\r\n            context.element.relative.appendChild(resize_div_container);\r\n            context.element.relative.appendChild(resize_button);\r\n    \r\n            /** empty memory */\r\n            dialog_div = null, dialog_back = null, dialog_area = null, resize_div_container = null, resize_button = null, resize_handles = null;\r\n        },\r\n    \r\n        onClick_dialog: function (e) {\r\n            e.stopPropagation();\r\n    \r\n            if (/modal-dialog/.test(e.target.className) || /close/.test(e.target.getAttribute('data-command'))) {\r\n                this.plugins.dialog.closeDialog.call(this);\r\n            }\r\n        },\r\n    \r\n        openDialog: function (kind, option, update)  {\r\n            if (this.modalForm) return false;\r\n    \r\n            this.context.dialog.updateModal = update;\r\n    \r\n            if (option === 'full') {\r\n                this.context.dialog.modalArea.style.position = 'fixed';\r\n            } else {\r\n                this.context.dialog.modalArea.style.position = 'absolute';\r\n            }\r\n    \r\n            this.context.dialog.kind = kind;\r\n            this.modalForm = this.context[kind].modal;\r\n            const focusElement = this.context[kind].focusElement;\r\n    \r\n            this.context.dialog.modalArea.style.display = 'block';\r\n            this.context.dialog.back.style.display = 'block';\r\n            this.context.dialog.modal.style.display = 'block';\r\n            this.modalForm.style.display = 'block';\r\n    \r\n            if (focusElement) focusElement.focus();\r\n        },\r\n    \r\n        closeDialog: function () {\r\n            this.modalForm.style.display = 'none';\r\n            this.context.dialog.back.style.display = 'none';\r\n            this.context.dialog.modalArea.style.display = 'none';\r\n            this.modalForm = null;\r\n            this.context.dialog.updateModal = false;\r\n            this.plugins[this.context.dialog.kind].init.call(this);\r\n        },\r\n    \r\n        /** resize controller, button (image, iframe) */\r\n        setController_resize: function () {\r\n            const resize_container = document.createElement('DIV');\r\n            resize_container.className = 'modal-resize-container';\r\n            resize_container.style.display = 'none';\r\n            resize_container.innerHTML = '' +\r\n                '<div class=\"modal-resize\">' +\r\n                '   <div class=\"resize-display\"></div>' +\r\n                '</div>' +\r\n                '<div class=\"resize-dot\">' +\r\n                '   <div class=\"tl sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"tr sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"bl sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"br sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"lw sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"th sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"rw sun-editor-name-resize-handle\"></div>' +\r\n                '   <div class=\"bh sun-editor-name-resize-handle\"></div>' +\r\n                '</div>';\r\n    \r\n            return resize_container;\r\n        },\r\n    \r\n        setController_button: function (lang) {\r\n            const resize_button = document.createElement(\"DIV\");\r\n            resize_button.className = \"image-resize-btn\";\r\n            resize_button.style.display = \"none\";\r\n            resize_button.innerHTML = '' +\r\n                '<div class=\"btn-group\">' +\r\n                '   <button type=\"button\" data-command=\"100\" title=\"' + lang.dialogBox.resize100 + '\"><span class=\"note-fontsize-10\">100%</span></button>' +\r\n                '   <button type=\"button\" data-command=\"75\" title=\"' + lang.dialogBox.resize75 + '\"><span class=\"note-fontsize-10\">75%</span></button>' +\r\n                '   <button type=\"button\" data-command=\"50\" title=\"' + lang.dialogBox.resize50 + '\"><span class=\"note-fontsize-10\">50%</span></button>' +\r\n                '   <button type=\"button\" data-command=\"25\" title=\"' + lang.dialogBox.resize25 + '\"><span class=\"note-fontsize-10\">25%</span></button>' +\r\n                '   <button type=\"button\" data-command=\"update\" title=\"' + lang.toolbar.image + '\"><div class=\"icon-modify\"></div></button>' +\r\n                '</div>' +\r\n                '<div class=\"btn-group remove\">' +\r\n                '   <button type=\"button\" data-command=\"delete\" title=\"' + lang.dialogBox.remove + '\"><div aria-hidden=\"true\" class=\"icon-cancel\"></div></button>' +\r\n                '</div>';\r\n    \r\n            return resize_button;\r\n        },\r\n    \r\n        call_controller_resize: function (targetElement, plugin) {\r\n            this.context.dialog._resize_plugin = plugin;\r\n            targetElement.setAttribute('unselectable', 'on');\r\n            targetElement.contentEditable = false;\r\n    \r\n            const resizeContainer = this.context.dialog.resizeContainer;\r\n            const resizeDiv = this.context.dialog.resizeDiv;\r\n            const w = targetElement.offsetWidth;\r\n            const h = targetElement.offsetHeight;\r\n    \r\n            let parentElement = targetElement.offsetParent;\r\n            let parentT = 0;\r\n            let parentL = 0;\r\n            while (parentElement) {\r\n                parentT += (parentElement.offsetTop + parentElement.clientTop);\r\n                parentL += (parentElement.offsetLeft + +parentElement.clientLeft);\r\n                parentElement = parentElement.offsetParent;\r\n            }\r\n    \r\n            const t = (targetElement.offsetTop + this.context.tool.bar.offsetHeight + parentT - this.context.element.wysiwygWindow.document.body.scrollTop);\r\n            const l = (targetElement.offsetLeft + parentL);\r\n    \r\n            resizeContainer.style.top = t + 'px';\r\n            resizeContainer.style.left = l + 'px';\r\n            resizeContainer.style.width = w + 'px';\r\n            resizeContainer.style.height = h + 'px';\r\n    \r\n            resizeDiv.style.top = '0px';\r\n            resizeDiv.style.left = '0px';\r\n            resizeDiv.style.width =  w + 'px';\r\n            resizeDiv.style.height =  h + 'px';\r\n    \r\n            this.context.dialog.resizeButton.style.top = (h + t) + 'px';\r\n            this.context.dialog.resizeButton.style.left = l + 'px';\r\n    \r\n            this.util.changeTxt(this.context.dialog.resizeDisplay, w + ' x ' + h);\r\n    \r\n            this.context.dialog.resizeContainer.style.display = 'block';\r\n            this.context.dialog.resizeButton.style.display = 'block';\r\n            this.context.dialog.resizeDot.style.display = 'block';\r\n    \r\n            this.context.dialog._resize_w = w;\r\n            this.context.dialog._resize_h = h;\r\n    \r\n            this.controllerArray = [this.context.dialog.resizeContainer, this.context.dialog.resizeButton];\r\n    \r\n            return {\r\n                w: w,\r\n                h: h,\r\n                t: t,\r\n                l: l\r\n            };\r\n        },\r\n    \r\n        cancel_controller_resize: function () {\r\n            this.context[this.context.dialog._resize_plugin]._resize_element.style.width = this.context.dialog._resize_w + 'px';\r\n            this.context[this.context.dialog._resize_plugin]._resize_element.style.height =this.context.dialog._resize_h + 'px';\r\n    \r\n            this.context.element.resizeBackground.style.display = 'none';\r\n            this.context.dialog.resizeContainer.style.display = 'none';\r\n            this.context.dialog.resizeButton.style.display = 'none';\r\n            this.plugins[this.context.dialog._resize_plugin].init.call(this);\r\n        },\r\n    \r\n        onClick_resizeButton: function (e) {\r\n            e.stopPropagation();\r\n    \r\n            const command = e.target.getAttribute('data-command') || e.target.parentNode.getAttribute('data-command');\r\n            if (!command) return;\r\n    \r\n            e.preventDefault();\r\n    \r\n            if (/^\\d+$/.test(command)) {\r\n                this.plugins[this.context.dialog._resize_plugin].setSize.call(this, command + '%', '');\r\n            }\r\n            else if (/update/.test(command)) {\r\n                this.plugins[this.context.dialog._resize_plugin].openModify.call(this);\r\n            }\r\n            else if (/delete/.test(command)) {\r\n                this.plugins[this.context.dialog._resize_plugin].destroy.call(this);\r\n            }\r\n    \r\n            this.submenuOff();\r\n            this.focus();\r\n        },\r\n    \r\n        onMouseDown_resize_handle: function (e) {\r\n            const direction = this.context.dialog._resize_direction = e.target.classList[0];\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n    \r\n            this.context.dialog.resizeDot.style.display = 'none';\r\n            this.context.dialog._resizeClientX = e.clientX;\r\n            this.context.dialog._resizeClientY = e.clientY;\r\n            this.context.element.resizeBackground.style.display = 'block';\r\n            this.context.dialog.resizeButton.style.display = 'none';\r\n            this.context.dialog.resizeDiv.style.float = /l/.test(direction) ? 'right' : /r/.test(direction) ? 'left' : 'none';\r\n    \r\n            function closureFunc() {\r\n                this.plugins.dialog.cancel_controller_resize.call(this);\r\n                document.removeEventListener('mousemove', resizing_element_bind);\r\n                document.removeEventListener('mouseup', closureFunc_bind);\r\n            }\r\n    \r\n            const resizing_element_bind = this.plugins.dialog.resizing_element.bind(this);\r\n            const closureFunc_bind = closureFunc.bind(this);\r\n    \r\n            document.addEventListener('mousemove', resizing_element_bind);\r\n            document.addEventListener('mouseup', closureFunc_bind);\r\n        },\r\n    \r\n        resizing_element: function (e) {\r\n            const direction = this.context.dialog._resize_direction;\r\n            const clientX = e.clientX;\r\n            const clientY = e.clientY;\r\n            const plugin = this.context[this.context.dialog._resize_plugin];\r\n    \r\n            let resultW = plugin._element_w;\r\n            let resultH = plugin._element_h;\r\n    \r\n            const w = plugin._element_w + (/r/.test(direction) ? clientX - this.context.dialog._resizeClientX : this.context.dialog._resizeClientX - clientX);\r\n            const h = plugin._element_h + (/b/.test(direction) ? clientY - this.context.dialog._resizeClientY : this.context.dialog._resizeClientY - clientY);\r\n            const wh = ((plugin._element_h / plugin._element_w) * w);\r\n    \r\n            if (/t/.test(direction)) this.context.dialog.resizeDiv.style.top = (plugin._element_h - (/h/.test(direction) ? h : wh)) + 'px';\r\n            if (/l/.test(direction)) this.context.dialog.resizeDiv.style.left = (plugin._element_w - w) + 'px';\r\n    \r\n            if (/r|l/.test(direction)) {\r\n                this.context.dialog.resizeDiv.style.width = w + 'px';\r\n                resultW =w;\r\n            }\r\n    \r\n            if (/^(?:t|b)[^h]$/.test(direction)) {\r\n                this.context.dialog.resizeDiv.style.height = wh + 'px';\r\n                resultH = wh;\r\n            }\r\n            else if (/^(?:t|b)h$/.test(direction)) {\r\n                this.context.dialog.resizeDiv.style.height = h + 'px';\r\n                resultH = h;\r\n            }\r\n    \r\n            this.context.dialog._resize_w = resultW;\r\n            this.context.dialog._resize_h = resultH;\r\n            this.util.changeTxt(this.context.dialog.resizeDisplay, Math.round(resultW) + ' x ' + Math.round(resultH));\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.dialog = dialog;\r\n    }\r\n\r\n    return dialog;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/modules/dialog.js?")},"./src/plugins/plugins_init.js":
/*!*************************************!*\
  !*** ./src/plugins/plugins_init.js ***!
  \*************************************/
/*! exports provided: align, font, fontSize, fontColor, hiliteColor, horizontalRule, list, table, formatBlock, link, image, video, dialog */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _submenu_align__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./submenu/align */ "./src/plugins/submenu/align.js");\n/* harmony import */ var _submenu_align__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_submenu_align__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "align", function() { return _submenu_align__WEBPACK_IMPORTED_MODULE_0___default.a; });\n/* harmony import */ var _submenu_font__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./submenu/font */ "./src/plugins/submenu/font.js");\n/* harmony import */ var _submenu_font__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_submenu_font__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "font", function() { return _submenu_font__WEBPACK_IMPORTED_MODULE_1___default.a; });\n/* harmony import */ var _submenu_fontSize__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./submenu/fontSize */ "./src/plugins/submenu/fontSize.js");\n/* harmony import */ var _submenu_fontSize__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_submenu_fontSize__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "fontSize", function() { return _submenu_fontSize__WEBPACK_IMPORTED_MODULE_2___default.a; });\n/* harmony import */ var _submenu_fontColor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./submenu/fontColor */ "./src/plugins/submenu/fontColor.js");\n/* harmony import */ var _submenu_fontColor__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_submenu_fontColor__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "fontColor", function() { return _submenu_fontColor__WEBPACK_IMPORTED_MODULE_3___default.a; });\n/* harmony import */ var _submenu_hiliteColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./submenu/hiliteColor */ "./src/plugins/submenu/hiliteColor.js");\n/* harmony import */ var _submenu_hiliteColor__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_submenu_hiliteColor__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "hiliteColor", function() { return _submenu_hiliteColor__WEBPACK_IMPORTED_MODULE_4___default.a; });\n/* harmony import */ var _submenu_horizontalRule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./submenu/horizontalRule */ "./src/plugins/submenu/horizontalRule.js");\n/* harmony import */ var _submenu_horizontalRule__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_submenu_horizontalRule__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "horizontalRule", function() { return _submenu_horizontalRule__WEBPACK_IMPORTED_MODULE_5___default.a; });\n/* harmony import */ var _submenu_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./submenu/list */ "./src/plugins/submenu/list.js");\n/* harmony import */ var _submenu_list__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_submenu_list__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "list", function() { return _submenu_list__WEBPACK_IMPORTED_MODULE_6___default.a; });\n/* harmony import */ var _submenu_table__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./submenu/table */ "./src/plugins/submenu/table.js");\n/* harmony import */ var _submenu_table__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_submenu_table__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "table", function() { return _submenu_table__WEBPACK_IMPORTED_MODULE_7___default.a; });\n/* harmony import */ var _submenu_formatBlock__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./submenu/formatBlock */ "./src/plugins/submenu/formatBlock.js");\n/* harmony import */ var _submenu_formatBlock__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_submenu_formatBlock__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "formatBlock", function() { return _submenu_formatBlock__WEBPACK_IMPORTED_MODULE_8___default.a; });\n/* harmony import */ var _dialog_link__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dialog/link */ "./src/plugins/dialog/link.js");\n/* harmony import */ var _dialog_link__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_dialog_link__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "link", function() { return _dialog_link__WEBPACK_IMPORTED_MODULE_9___default.a; });\n/* harmony import */ var _dialog_image__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dialog/image */ "./src/plugins/dialog/image.js");\n/* harmony import */ var _dialog_image__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_dialog_image__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "image", function() { return _dialog_image__WEBPACK_IMPORTED_MODULE_10___default.a; });\n/* harmony import */ var _dialog_video__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dialog/video */ "./src/plugins/dialog/video.js");\n/* harmony import */ var _dialog_video__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_dialog_video__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "video", function() { return _dialog_video__WEBPACK_IMPORTED_MODULE_11___default.a; });\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/dialog */ "./src/plugins/modules/dialog.js");\n/* harmony import */ var _modules_dialog__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(_modules_dialog__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "dialog", function() { return _modules_dialog__WEBPACK_IMPORTED_MODULE_12___default.a; });\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack:///./src/plugins/plugins_init.js?')},"./src/plugins/submenu/align.js":
/*!**************************************!*\
  !*** ./src/plugins/submenu/align.js ***!
  \**************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const align = {\r\n        name: 'align',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu(_this.lang));\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName('UL')[0].addEventListener('click', this.pickup.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function (lang) {\r\n            const listDiv = document.createElement('DIV');\r\n    \r\n            listDiv.className = 'layer_editor layer_align';\r\n            listDiv.style.display = 'none';\r\n            listDiv.innerHTML = '' +\r\n                '<div class=\"inner_layer\">' +\r\n                '   <ul class=\"list_editor\">' +\r\n                '       <li><button type=\"button\" class=\"btn_edit btn_align\" data-command=\"justifyleft\" title=\"' + lang.toolbar.alignLeft + '\"><span class=\"img_editor icon-align-left\"></span>' + lang.toolbar.alignLeft + '</button></li>' +\r\n                '       <li><button type=\"button\" class=\"btn_edit btn_align\" data-command=\"justifycenter\" title=\"' + lang.toolbar.alignCenter + '\"><span class=\"img_editor icon-align-center\"></span>' + lang.toolbar.alignCenter + '</button></li>' +\r\n                '       <li><button type=\"button\" class=\"btn_edit btn_align\" data-command=\"justifyright\" title=\"' + lang.toolbar.alignRight + '\"><span class=\"img_editor icon-align-right\"></span>' + lang.toolbar.alignRight + '</button></li>' +\r\n                '       <li><button type=\"button\" class=\"btn_edit btn_align\" data-command=\"justifyfull\" title=\"' + lang.toolbar.justifyFull + '\"><span class=\"img_editor icon-align-just\"></span>' + lang.toolbar.justifyFull + '</button></li>' +\r\n                '   </ul>' +\r\n                '</div>';\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        pickup: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            let target = e.target;\r\n            let command = null;\r\n            \r\n            while (!command && !/UL/i.test(target.tagName)) {\r\n                command = target.getAttribute('data-command');\r\n                target = target.parentNode;\r\n            }\r\n    \r\n            this.focus();\r\n            this.execCommand(command, false);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.align = align;\r\n    }\r\n\r\n    return align;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/align.js?")},"./src/plugins/submenu/font.js":
/*!*************************************!*\
  !*** ./src/plugins/submenu/font.js ***!
  \*************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function(w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const font = {\r\n        name: 'font',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu(_this.context.user));\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByClassName('list_family')[0].addEventListener('click', this.pickup.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function (user) {\r\n            const listDiv = document.createElement('DIV');\r\n            listDiv.className = 'layer_editor';\r\n            listDiv.style.display = 'none';\r\n    \r\n            let font, text, i, len;\r\n            let fontList = !user.font ?\r\n                [\r\n                    'Arial',\r\n                    'Comic Sans MS',\r\n                    'Courier New,Courier',\r\n                    'Georgia',\r\n                    'tahoma',\r\n                    'Trebuchet MS,Helvetica',\r\n                    'Verdana'\r\n                ] : user.font;\r\n    \r\n            let list = '<div class=\"inner_layer list_family\">' +\r\n                '   <ul class=\"list_editor sun-editor-list-font-family\">';\r\n            for (i = 0, len = fontList.length; i < len; i++) {\r\n                font = fontList[i];\r\n                text = font.split(',')[0];\r\n                list += '<li><button type=\"button\" class=\"btn_edit\" data-value=\"' + font + '\" data-txt=\"' + text + '\" style=\"font-family:' + font + ';\">' + text + '</button></li>';\r\n            }\r\n            list += '   </ul>';\r\n            list += '</div>';\r\n            listDiv.innerHTML = list;\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        pickup: function (e) {\r\n            if (!/^BUTTON$/i.test(e.target.tagName)) {\r\n                return false;\r\n            }\r\n    \r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            const target = e.target;\r\n    \r\n            this.focus();\r\n    \r\n            this.util.changeTxt(this.context.tool.font, target.getAttribute('data-txt'));\r\n            const newNode = document.createElement('SPAN'); newNode.style.fontFamily = target.getAttribute('data-value');\r\n            this.wrapRangeToTag(newNode, ['font-family']);\r\n            this.submenuOff();\r\n        }\r\n    }\r\n\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.font = font;\r\n    }\r\n\r\n    return font;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/font.js?")},"./src/plugins/submenu/fontColor.js":
/*!******************************************!*\
  !*** ./src/plugins/submenu/fontColor.js ***!
  \******************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const fontColor = {\r\n        name: 'fontColor',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu());\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName('UL')[0].addEventListener('click', this.pickUp.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function () {\r\n            const listDiv = document.createElement('DIV');\r\n            listDiv.className = 'layer_editor layer_color';\r\n            listDiv.style.display = 'none';\r\n    \r\n            const colorList = ['#ff0000', '#ff5e00', '#ffe400', '#abf200', '#00d8ff', '#0055ff', '#6600ff', '#ff00dd', '#000000', '#ffd8d8', '#fae0d4', '#faf4c0', '#e4f7ba', '#d4f4fa', '#d9e5ff', '#e8d9ff', '#ffd9fa',\r\n                '#ffffff', '#ffa7a7', '#ffc19e', '#faed7d', '#cef279', '#b2ebf4', '#b2ccff', '#d1b2ff', '#ffb2f5', '#bdbdbd', '#f15f5f', '#f29661', '#e5d85c', '#bce55c', '#5cd1e5', '#6699ff', '#a366ff', '#f261df', '#8c8c8c',\r\n                '#980000', '#993800', '#998a00', '#6b9900', '#008299', '#003399', '#3d0099', '#990085', '#353535', '#670000', '#662500', '#665c00', '#476600', '#005766', '#002266', '#290066', '#660058', '#222222'];\r\n    \r\n            let list = '<div class=\"inner_layer\">' +\r\n                '   <div class=\"pallet_bgcolor\">' +\r\n                '       <ul class=\"list_color list_bgcolor\">';\r\n            for (let i = 0, len = colorList.length; i < len; i++) {\r\n                const color = colorList[i];\r\n                list += '<li>' +\r\n                    '   <button type=\"button\" class=\"' + (/ffffff/.test(color) ? ' color_white' : '') + '\" data-value=\"' + color + '\" style=\"background-color:' + color + ';\">' + color + '' +\r\n                    '       <span class=\"bg_check\"></span>' +\r\n                    '       <span class=\"bg_btnframe\"></span>' +\r\n                    '   </button>' +\r\n                    '</li>';\r\n            }\r\n            list += '       </ul>' +\r\n                '   </div>' +\r\n                '</div>';\r\n    \r\n            listDiv.innerHTML = list;\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        pickUp: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            if (!/^BUTTON$/i.test(e.target.tagName)) {\r\n                return false;\r\n            }\r\n    \r\n            this.focus();\r\n    \r\n            const newNode = document.createElement('SPAN'); newNode.style.color = e.target.getAttribute('data-value');\r\n            this.wrapRangeToTag(newNode, ['color']);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.fontColor = fontColor;\r\n    }\r\n\r\n    return fontColor;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/fontColor.js?")},"./src/plugins/submenu/fontSize.js":
/*!*****************************************!*\
  !*** ./src/plugins/submenu/fontSize.js ***!
  \*****************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const fontSize = {\r\n        name: 'fontSize',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu(_this.context.user));\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName('UL')[0].addEventListener('click', this.pickup.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function (user) {\r\n            const listDiv = document.createElement('DIV');\r\n            listDiv.className = 'layer_editor layer_size';\r\n            listDiv.style.display = 'none';\r\n    \r\n            const sizeList = !user.fontSize ? [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72] : user.fontSize;\r\n    \r\n            let list = '<div class=\"inner_layer\">' +\r\n                '   <ul class=\"list_editor font_size_list\">';\r\n            for (let i = 0, len = sizeList.length; i < len; i++) {\r\n                const size = sizeList[i];\r\n                list += '<li><button type=\"button\" class=\"btn_edit\" data-value=\"' + size + '\" style=\"font-size:' + size + 'px;\">' + size + '</button></li>';\r\n            }\r\n            list += '   </ul>' +\r\n                '</div>';\r\n    \r\n            listDiv.innerHTML = list;\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        pickup: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            if (!/^BUTTON$/i.test(e.target.tagName)) {\r\n                return false;\r\n            }\r\n    \r\n            this.focus();\r\n    \r\n            this.util.changeTxt(this.context.tool.fontSize, e.target.getAttribute('data-value'));\r\n            const newNode = document.createElement('SPAN'); newNode.style.fontSize = e.target.getAttribute('data-value') + 'px';\r\n            this.wrapRangeToTag(newNode, ['font-size']);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.fontSize = fontSize;\r\n    }\r\n\r\n    return fontSize;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/fontSize.js?")},"./src/plugins/submenu/formatBlock.js":
/*!********************************************!*\
  !*** ./src/plugins/submenu/formatBlock.js ***!
  \********************************************/
/*! no static exports found */function(module,exports){eval('/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === \'object\' && typeof module.exports === \'object\') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error(\'SUNEDITOR requires a window with a document\');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== \'undefined\' ? window : this, function (window, noGlobal) {\r\n    \'use strict\';\r\n\r\n    const formatBlock = {\r\n        name: \'formatBlock\',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu(_this.lang));\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName(\'UL\')[0].addEventListener(\'click\', this.pickUp.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function (lang) {\r\n            const listDiv = document.createElement(\'DIV\');\r\n    \r\n            listDiv.className = \'layer_editor layer_size\';\r\n            listDiv.style.display = \'none\';\r\n            listDiv.innerHTML = \'\' +\r\n                \'<div class="inner_layer">\' +\r\n                \'   <ul class="list_editor format_list">\' +\r\n                \'       <li style="border-bottom:1px solid #dedede;"><button type="button" class="btn_edit" data-value="P" style="height:24px;"><span style="font-size:13px;">\' + lang.toolbar.tag_p + \'</span></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="DIV" style="height:24px; border-bottom:1px solid #dedede;"><span style="font-size:13px;">\' + lang.toolbar.tag_div + \'</span></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="H1" style="height:45px;"><h1>\' + lang.toolbar.tag_h + \' 1</h1></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="H2" style="height:34px;"><h2>\' + lang.toolbar.tag_h + \' 2</h2></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="H3" style="height:26px;"><h3>\' + lang.toolbar.tag_h + \' 3</h3></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="H4" style="height:23px;"><h4>\' + lang.toolbar.tag_h + \' 4</h4></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="H5" style="height:19px;"><h5>\' + lang.toolbar.tag_h + \' 5</h5></button></li>\' +\r\n                \'       <li><button type="button" class="btn_edit" data-value="H6" style="height:15px;"><h6>\' + lang.toolbar.tag_h + \' 6</h6></button></li>\' +\r\n                \'   </ul>\' +\r\n                \'</div>\';\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        pickUp: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            let target = e.target;\r\n            let value = null;\r\n            \r\n            while (!value && !/UL/i.test(target.tagName)) {\r\n                value = target.getAttribute(\'data-value\');\r\n                target = target.parentNode;\r\n            }\r\n    \r\n            this.focus();\r\n            this.util.changeTxt(this.commandMap[\'FORMAT\'], value);\r\n            this.execCommand(\'formatBlock\', false, value);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.formatBlock = formatBlock;\r\n    }\r\n\r\n    return formatBlock;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/formatBlock.js?')},"./src/plugins/submenu/hiliteColor.js":
/*!********************************************!*\
  !*** ./src/plugins/submenu/hiliteColor.js ***!
  \********************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const hiliteColor = {\r\n        name: 'hiliteColor',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu());\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName('UL')[0].addEventListener('click', this.colorPick.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function () {\r\n            const listDiv = document.createElement('DIV');\r\n            listDiv.className = 'layer_editor layer_color';\r\n            listDiv.style.display = 'none';\r\n    \r\n            const colorList = ['#1e9af9', '#00b8c6', '#6cce02', '#ff9702', '#ff0000', '#ff00dd', '#6600ff', '#cce9ff', '#fcfd4c', '#ffffff', '#dfdede', '#8c8c8c', '#000000', '#222222'];\r\n    \r\n            let list = '<div class=\"inner_layer\">' +\r\n                '   <div class=\"pallet_bgcolor pallet_text\">' +\r\n                '       <ul class=\"list_color list_bgcolor\">';\r\n            for (let i = 0, len = colorList.length; i < len; i++) {\r\n                const color = colorList[i];\r\n                list += '<li>' +\r\n                    '   <button type=\"button\" class=\"' + (/ffffff/.test(color) ? ' color_white' : '') + '\" data-value=\"' + color + '\" style=\"background-color:' + color + ';\">' + color + '' +\r\n                    '       <span class=\"bg_check\"></span>' +\r\n                    '       <span class=\"bg_btnframe\"></span>' +\r\n                    '   </button>' +\r\n                    '</li>';\r\n            }\r\n            list += '   </ul>' +\r\n                '   </div>' +\r\n                '</div>';\r\n    \r\n            listDiv.innerHTML = list;\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        colorPick: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            if (!/^BUTTON$/i.test(e.target.tagName)) {\r\n                return false;\r\n            }\r\n    \r\n            this.focus();\r\n    \r\n            const newNode = document.createElement('SPAN'); newNode.style.backgroundColor = e.target.getAttribute('data-value');\r\n            this.wrapRangeToTag(newNode, ['background-color']);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.hiliteColor = hiliteColor;\r\n    }\r\n\r\n    return hiliteColor;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/hiliteColor.js?")},"./src/plugins/submenu/horizontalRule.js":
/*!***********************************************!*\
  !*** ./src/plugins/submenu/horizontalRule.js ***!
  \***********************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const horizontalRule = {\r\n        name: 'horizontalRule',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu());\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName('UL')[0].addEventListener('click', this.horizontalRulePick.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function () {\r\n            const listDiv = document.createElement('DIV');\r\n    \r\n            listDiv.className = 'layer_editor layer_line';\r\n            listDiv.style.display = 'none';\r\n            listDiv.innerHTML = '' +\r\n                '<div class=\"inner_layer\">' +\r\n                '   <ul class=\"list_editor\">' +\r\n                '       <li>' +\r\n                '           <button type=\"button\" class=\"btn_edit btn_line\" data-command=\"horizontalRule\" data-value=\"solid\">' +\r\n                '               <hr style=\"border-width: 1px 0 0; border-style: solid none none; border-color: black; border-image: initial; height: 1px;\" />' +\r\n                '           </button>' +\r\n                '       </li>' +\r\n                '       <li>' +\r\n                '           <button type=\"button\" class=\"btn_edit btn_line\" data-command=\"horizontalRule\" data-value=\"dotted\">' +\r\n                '               <hr style=\"border-width: 1px 0 0; border-style: dotted none none; border-color: black; border-image: initial; height: 1px;\" />' +\r\n                '           </button>' +\r\n                '       </li>' +\r\n                '       <li>' +\r\n                '           <button type=\"button\" class=\"btn_edit btn_line\" data-command=\"horizontalRule\" data-value=\"dashed\">' +\r\n                '               <hr style=\"border-width: 1px 0 0; border-style: dashed none none; border-color: black; border-image: initial; height: 1px;\" />' +\r\n                '           </button>' +\r\n                '       </li>' +\r\n                '   </ul>' +\r\n                '</div>';\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        appendHr: function (className) {\r\n            const oHr = document.createElement('HR');\r\n            oHr.className = className;\r\n    \r\n            this.focus();\r\n            this.insertNode(oHr, this.util.getFormatElement(this.getSelectionNode()));\r\n    \r\n            const oP = this.appendP(oHr);\r\n            this.setRange(oP, 0, oP, 0);\r\n        },\r\n    \r\n        horizontalRulePick: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            let target = e.target;\r\n            let value = null;\r\n            \r\n            while (!value && !/UL/i.test(target.tagName)) {\r\n                value = target.getAttribute('data-value');\r\n                target = target.parentNode;\r\n            }\r\n    \r\n            this.focus();\r\n            this.plugins.horizontalRule.appendHr.call(this,value);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.horizontalRule = horizontalRule;\r\n    }\r\n\r\n    return horizontalRule;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/horizontalRule.js?")},"./src/plugins/submenu/list.js":
/*!*************************************!*\
  !*** ./src/plugins/submenu/list.js ***!
  \*************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const list = {\r\n        name: 'list',\r\n        add: function (_this, targetElement) {\r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu(_this.lang));\r\n    \r\n            /** add event listeners */\r\n            listDiv.getElementsByTagName('UL')[0].addEventListener('click', this.pickup.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null;\r\n        },\r\n    \r\n        setSubmenu: function (lang) {\r\n            const listDiv = document.createElement('DIV');\r\n    \r\n            listDiv.className = 'layer_editor layer_list';\r\n            listDiv.style.display = 'none';\r\n            listDiv.innerHTML = '' +\r\n                '<div class=\"inner_layer\">' +\r\n                '   <ul class=\"list_editor\">' +\r\n                '       <li><button type=\"button\" class=\"btn_edit\" data-command=\"insertOrderedList\" data-value=\"DECIMAL\" title=\"' + lang.toolbar.orderList + '\"><div class=\"icon-list-number\"></div></button></li>' +\r\n                '       <li><button type=\"button\" class=\"btn_edit\" data-command=\"insertUnorderedList\" data-value=\"DISC\" title=\"' + lang.toolbar.unorderList + '\"><div class=\"icon-list-bullets\"></div></button></li>' +\r\n                '   </ul>' +\r\n                '</div>';\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        pickup: function (e) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n    \r\n            let target = e.target;\r\n            let command = null;\r\n            let value = null;\r\n    \r\n            while (!value && !/UL/i.test(target.tagName)) {\r\n                command = target.getAttribute('data-command');\r\n                value = target.getAttribute('data-value');\r\n                target = target.parentNode;\r\n            }\r\n    \r\n            this.focus();\r\n            this.execCommand(command, false, value);\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.list = list;\r\n    }\r\n\r\n    return list;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/list.js?")},"./src/plugins/submenu/table.js":
/*!**************************************!*\
  !*** ./src/plugins/submenu/table.js ***!
  \**************************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function (w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const table = {\r\n        name: 'table',\r\n        add: function (_this, targetElement) {\r\n            const context = _this.context;\r\n    \r\n            /** set submenu */\r\n            let listDiv = eval(this.setSubmenu());\r\n            let tablePicker = listDiv.getElementsByClassName('sun-editor-id-table-picker')[0];\r\n\r\n            context.submenu.tableHighlight = listDiv.getElementsByClassName('sun-editor-id-table-highlighted')[0];\r\n            context.submenu.tableUnHighlight = listDiv.getElementsByClassName('sun-editor-id-table-unhighlighted')[0];\r\n            context.submenu.tableDisplay = listDiv.getElementsByClassName('sun-editor-table-display')[0];\r\n            context.submenu._tableXY = [];\r\n    \r\n            /** add event listeners */\r\n            tablePicker.addEventListener('mousemove', this.onMouseMove_tablePicker.bind(_this));\r\n            tablePicker.addEventListener('click', this.appendTable.bind(_this));\r\n    \r\n            /** append html */\r\n            targetElement.parentNode.appendChild(listDiv);\r\n    \r\n            /** empty memory */\r\n            listDiv = null, tablePicker = null;\r\n        },\r\n    \r\n        setSubmenu: function () {\r\n            const listDiv = document.createElement('DIV');\r\n            listDiv.className = 'table-content';\r\n            listDiv.style.display = 'none';\r\n    \r\n            listDiv.innerHTML = '' +\r\n                '<div class=\"table-data-form\">' +\r\n                '   <div class=\"table-picker sun-editor-id-table-picker\"></div>' +\r\n                '   <div class=\"table-highlighted sun-editor-id-table-highlighted\"></div>' +\r\n                '   <div class=\"table-unhighlighted sun-editor-id-table-unhighlighted\"></div>' +\r\n                '</div>' +\r\n                '<div class=\"table-display sun-editor-table-display\">1 x 1</div>';\r\n    \r\n            return listDiv;\r\n        },\r\n    \r\n        appendTable: function () {\r\n            const oTable = document.createElement('TABLE');\r\n    \r\n            let x = this.context.submenu._tableXY[0];\r\n            let y = this.context.submenu._tableXY[1];\r\n            let tableHTML = '<tbody>';\r\n    \r\n            while (y > 0) {\r\n                tableHTML += '<tr>';\r\n                let tdCnt = x;\r\n                while (tdCnt > 0) {\r\n                    tableHTML += '<td><p>&#65279</p></td>';\r\n                    --tdCnt;\r\n                }\r\n                tableHTML += '</tr>';\r\n                --y;\r\n            }\r\n            tableHTML += '</tbody>';\r\n    \r\n            oTable.innerHTML = tableHTML;\r\n    \r\n            this.insertNode(oTable, this.util.getFormatElement(this.getSelectionNode()));\r\n            this.appendP(oTable);\r\n\r\n            this.plugins.table.reset_table_picker.call(this);\r\n        },\r\n    \r\n        onMouseMove_tablePicker: function (e) {\r\n            e.stopPropagation();\r\n    \r\n            let x = Math.ceil(e.offsetX / 18);\r\n            let y = Math.ceil(e.offsetY / 18);\r\n            x = x < 1 ? 1 : x;\r\n            y = y < 1 ? 1 : y;\r\n            this.context.submenu.tableHighlight.style.width = x + 'em';\r\n            this.context.submenu.tableHighlight.style.height = y + 'em';\r\n    \r\n            let x_u = x < 5 ? 5 : (x > 9 ? 10 : x + 1);\r\n            let y_u = y < 5 ? 5 : (y > 9 ? 10 : y + 1);\r\n            this.context.submenu.tableUnHighlight.style.width = x_u + 'em';\r\n            this.context.submenu.tableUnHighlight.style.height = y_u + 'em';\r\n    \r\n            this.util.changeTxt(this.context.submenu.tableDisplay, x + ' x ' + y);\r\n            this.context.submenu._tableXY = [x, y];\r\n        },\r\n    \r\n        reset_table_picker: function () {\r\n            if (!this.context.submenu.tableHighlight) return;\r\n    \r\n            const highlight = this.context.submenu.tableHighlight.style;\r\n            const unHighlight = this.context.submenu.tableUnHighlight.style;\r\n    \r\n            highlight.width = '1em';\r\n            highlight.height = '1em';\r\n            unHighlight.width = '5em';\r\n            unHighlight.height = '5em';\r\n    \r\n            this.util.changeTxt(this.context.submenu.tableDisplay, '1 x 1');\r\n            this.submenuOff();\r\n        }\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR.plugins.table = table;\r\n    }\r\n\r\n    return table;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/plugins/submenu/table.js?")},"./src/suneditor.js":
/*!**************************!*\
  !*** ./src/suneditor.js ***!
  \**************************/
/*! no static exports found */function(module,exports){eval("/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\r\n(function (global, factory) {\r\n    if (typeof module === 'object' && typeof module.exports === 'object') {\r\n        module.exports = global.document ?\r\n            factory(global, true) :\r\n            function(w) {\r\n                if (!w.document) {\r\n                    throw new Error('SUNEDITOR requires a window with a document');\r\n                }\r\n                return factory(w);\r\n            };\r\n    } else {\r\n        factory(global);\r\n    }\r\n}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {\r\n    'use strict';\r\n\r\n    const SUNEDITOR = {};\r\n    SUNEDITOR.plugins = {};\r\n\r\n    /**\r\n     * @description default language (english)\r\n     */\r\n    SUNEDITOR.defaultLang = {\r\n        toolbar: {\r\n            font: 'Font',\r\n            formats: 'Formats',\r\n            fontSize: 'Size',\r\n            bold: 'Bold',\r\n            underline: 'Underline',\r\n            italic: 'Italic',\r\n            strike: 'Strike',\r\n            subscript: 'Subscript',\r\n            superscript: 'Superscript',\r\n            removeFormat: 'Remove Format',\r\n            fontColor: 'Font Color',\r\n            hiliteColor: 'Hilite Color',\r\n            indent: 'Indent',\r\n            outdent: 'Outdent',\r\n            align: 'Align',\r\n            alignLeft: 'Align left',\r\n            alignRight: 'Align right',\r\n            alignCenter: 'Align center',\r\n            justifyFull: 'Justify full',\r\n            list: 'list',\r\n            orderList: 'Ordered list',\r\n            unorderList: 'Unordered list',\r\n            horizontalRule: 'horizontal line',\r\n            table: 'Table',\r\n            link: 'Link',\r\n            image: 'Image',\r\n            video: 'Video',\r\n            fullScreen: 'Full screen',\r\n            showBlocks: 'Show blocks',\r\n            codeView: 'Code view',\r\n            undo: 'Undo',\r\n            redo: 'Redo',\r\n            preview: 'Preview',\r\n            print: 'print',\r\n            tag_p: 'Paragraph',\r\n            tag_div: 'Normal (DIV)',\r\n            tag_h: 'Header'\r\n        },\r\n        dialogBox: {\r\n            linkBox: {\r\n                title: 'Insert Link',\r\n                url: 'URL to link',\r\n                text: 'Text to display',\r\n                newWindowCheck: 'Open in new window'\r\n            },\r\n            imageBox: {\r\n                title: 'Insert image',\r\n                file: 'Select from files',\r\n                url: 'Image URL',\r\n                caption: 'Insert image description',\r\n                altText: 'Alternative text'\r\n            },\r\n            videoBox: {\r\n                title: 'Insert Video',\r\n                url: 'Media embed URL, YouTube'\r\n            },\r\n            resize100: 'resize 100%',\r\n            resize75: 'resize 75%',\r\n            resize50: 'resize 50%',\r\n            resize25: 'resize 25%',\r\n            remove: 'remove',\r\n            submitButton: 'Submit',\r\n            revertButton: 'Revert',\r\n            proportion: 'constrain proportions',\r\n            width: 'Width',\r\n            height: 'Height',\r\n            basic: 'Basic',\r\n            left: 'Left',\r\n            right: 'Right',\r\n            center: 'Center'\r\n        },\r\n        editLink: {\r\n            edit: 'Edit',\r\n            remove: 'Remove'\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @description utility function\r\n     */\r\n    SUNEDITOR.util = {\r\n        /**\r\n         * @description Gets XMLHttpRequest object\r\n         * @returns {Object}\r\n         */\r\n        getXMLHttpRequest: function () {\r\n            /** IE */\r\n            if (window.ActiveXObject) {\r\n                try {\r\n                    return new ActiveXObject('Msxml2.XMLHTTP');\r\n                } catch (e) {\r\n                    try {\r\n                        return new ActiveXObject('Microsoft.XMLHTTP');\r\n                    } catch (e1) {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n            /** netscape */\r\n            else if (window.XMLHttpRequest) {\r\n                return new XMLHttpRequest();\r\n            }\r\n            /** fail */\r\n            else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @description Copies object\r\n         * @param {Object} obj - Object to be copy\r\n         * @returns {Object}\r\n         */\r\n        copyObj: function (obj) {\r\n            const copy = {};\r\n\r\n            for (let attr in obj) {\r\n                copy[attr] = obj[attr];\r\n            }\r\n\r\n            return copy;\r\n        },\r\n\r\n        /**\r\n         * @description Get suneditor's default path\r\n         */\r\n        getBasePath: (function () {\r\n            let path = SUNEDITOR.SUNEDITOR_BASEPATH || '';\r\n            if (!path) {\r\n                for (let c = document.getElementsByTagName('script'), i = 0; i < c.length; i++) {\r\n                    let editorTag = c[i].src.match(/(^|.*[\\\\\\/])suneditor(\\.min)?\\.js(?:\\?.*|;.*)?$/i);\r\n                    if (editorTag) {\r\n                        path = editorTag[1];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            -1 === path.indexOf(':/') && '//' !== path.slice(0, 2) && (path = 0 === path.indexOf('/') ? location.href.match(/^.*?:\\/\\/[^\\/]*/)[0] + path : location.href.match(/^[^\\?]*\\/(?:)/)[0] + path);\r\n\r\n            if (!path) throw '[SUNEDITOR.util.getBasePath.fail] The SUNEDITOR installation path could not be automatically detected. Please set the global variable \"SUNEDITOR.SUNEDITOR_BASEPATH\" before creating editor instances.';\r\n\r\n            return path;\r\n        })(),\r\n\r\n        /**\r\n         * @description Add script File\r\n         * @param {string} fileType - File type (\"text/javascript\")\r\n         * @param {string} fullUrl - The full url of the js file to call\r\n         * @param {function} callBack - Function to be executed immediately after module call\r\n         */\r\n        includeFile: function (fileType, fullUrl, callBack) {\r\n            const scriptFile = document.createElement('script');\r\n            scriptFile.type = fileType;\r\n            scriptFile.src = fullUrl;\r\n            scriptFile.onload = callBack;\r\n\r\n            document.getElementsByTagName('head')[0].appendChild(scriptFile);\r\n        },\r\n\r\n        /**\r\n         * @description Get the index of the argument value in the element array\r\n         * @param {array} array - element array\r\n         * @param {element} element - Element to find index\r\n         * @returns {Number}\r\n         */\r\n        getArrayIndex: function (array, element) {\r\n            let idx = -1;\r\n            for (let i = 0, len = array.length; i < len; i++) {\r\n                if (array[i] === element) {\r\n                    idx = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return idx;\r\n        },\r\n\r\n        /**\r\n         * @description Get the next index of the argument value in the element array\r\n         * @param {array} array - element array\r\n         * @param {element} item - Element to find index\r\n         * @returns {Number}\r\n         */\r\n        nextIdx: function (array, item) {\r\n            let idx = this.getArrayIndex(array, item);\r\n            if (idx === -1) return -1;\r\n            return idx + 1;\r\n        },\r\n\r\n        /**\r\n         * @description Get the previous index of the argument value in the element array\r\n         * @param {array} array - element array\r\n         * @param {element} item - Element to find index\r\n         * @returns {Number}\r\n         */\r\n        prevIdx: function (array, item) {\r\n            let idx = this.getArrayIndex(array, item);\r\n            if (idx === -1) return -1;\r\n            return idx - 1;\r\n        },\r\n\r\n        /**\r\n         * @description Gets whether the cell is a table\r\n         * @param {element} node - Nodes to scan\r\n         * @returns {Boolean}\r\n         */\r\n        isCell: function (node) {\r\n            return node && /^(?:TD|TH)$/i.test(node.nodeName);\r\n        },\r\n\r\n        /**\r\n         * @description Get all child nodes of the argument value element (Without text node)\r\n         * @param {element} element - element to get child node\r\n         * @param {(function|null)} validation - Conditional function\r\n         * @returns {Array}\r\n         */\r\n        getListChildren: function (element, validation) {\r\n            const children = [];\r\n            validation = validation || function () { return true; };\r\n\r\n            (function recursionFunc(current) {\r\n                if (element !== current && validation(current)) {\r\n                    children.push(current);\r\n                }\r\n\r\n                for (let i = 0, len = current.children.length; i < len; i++) {\r\n                    recursionFunc(current.children[i]);\r\n                }\r\n            })(element);\r\n\r\n            return children;\r\n        },\r\n\r\n        /**\r\n         * @description Get all child nodes of the argument value element (Include text nodes)\r\n         * @param {element} element - element to get child node\r\n         * @param {(function|null)} validation - Conditional function\r\n         * @returns {Array}\r\n         */\r\n        getListChildNodes: function (element, validation) {\r\n            const children = [];\r\n            validation = validation || function () { return true; };\r\n\r\n            (function recursionFunc(current) {\r\n                if (validation(current)) {\r\n                    children.push(current);\r\n                }\r\n\r\n                for (let i = 0, len = current.childNodes.length; i < len; i++) {\r\n                    recursionFunc(current.childNodes[i]);\r\n                }\r\n            })(element);\r\n\r\n            return children;\r\n        },\r\n\r\n        /**\r\n         * @description Get the parent element of the argument value.\r\n         * A tag that satisfies the query condition is imported.\r\n         * Returns null if not found.\r\n         * @param {Node} element - Reference element\r\n         * @param {string} query - Query String (tagName, .className, #ID, :name)\r\n         * Not use it like jquery.\r\n         * Only one condition can be entered at a time.\r\n         * @returns {Element|null}\r\n         */\r\n        getParentElement: function (element, query) {\r\n            let attr;\r\n\r\n            if (/\\./.test(query)) {\r\n                attr = 'className';\r\n                query = query.split('.')[1];\r\n            } else if (/#/.test(query)) {\r\n                attr = 'id';\r\n                query = '^' + query.split('#')[1] + '$';\r\n            } else if (/:/.test(query)) {\r\n                attr = 'name';\r\n                query = '^' + query.split(':')[1] + '$';\r\n            } else {\r\n                attr = 'tagName';\r\n                query = '^' + query + '$';\r\n            }\r\n\r\n            const check = new RegExp(query, 'i');\r\n            while (element && (element.nodeType === 3 || !check.test(element[attr]))) {\r\n                if (/^BODY$/i.test(element.tagName)) {\r\n                    return null;\r\n                }\r\n                element = element.parentNode;\r\n            }\r\n\r\n            return element;\r\n        },\r\n\r\n        /**\r\n         * @description Get format element of the argument value (P, DIV, Table, H1, H2, H3, H4, H5, H6...Tag whose parent is the \"BODY\")\r\n         * @param {element|null} element - Reference element if null or no value, it is relative to the current focus node.\r\n         * @returns {Element}\r\n         */\r\n        getFormatElement: function (element) {\r\n            if (!element) return null;\r\n\r\n            if (!element || /^(?:HTML|BODY)$/i.test(element.tagName)) {\r\n                element = context.element.wysiwygWindow.document.body.firstChild;\r\n            } else {\r\n                while (!/^BODY$/i.test(element.parentNode.tagName)) {\r\n                    element = element.parentNode;\r\n                }\r\n            }\r\n\r\n            return element;\r\n        },\r\n\r\n        /**\r\n         * @description Set the text content value of the argument value element\r\n         * @param {element} element - Element to replace text content\r\n         * @param {String} txt - Text to be applied\r\n         */\r\n        changeTxt: function (element, txt) {\r\n            if (!element || !txt) return;\r\n            element.textContent = txt;\r\n        },\r\n\r\n        /**\r\n         * @description Determine whether any of the matched elements are assigned the given class\r\n         * @param {element} element - Elements to search class name\r\n         * @param {string} className - Class name to search for\r\n         */\r\n        hasClass: function (element, className) {\r\n            if (!element) return;\r\n\r\n            return element.classList.contains(className.trim());\r\n        },\r\n\r\n        /**\r\n         * @description Append the className value of the argument value element\r\n         * @param {element} element - Elements to add class name\r\n         * @param {string} className - Class name to be add\r\n         */\r\n        addClass: function (element, className) {\r\n            if (!element) return;\r\n\r\n            const check = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n            if (check.test(element.className)) return;\r\n\r\n            element.className += ' ' + className;\r\n        },\r\n\r\n        /**\r\n         * @description Delete the className value of the argument value element\r\n         * @param {element} element - Elements to remove class name\r\n         * @param {string} className - Class name to be remove\r\n         */\r\n        removeClass: function (element, className) {\r\n            if (!element) return;\r\n\r\n            const check = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n            element.className = element.className.replace(check, ' ').trim();\r\n        },\r\n\r\n        /**\r\n         * @description Argument value If there is no class name, insert it and delete the class name if it exists\r\n         * @param {element} element - Elements to replace class name\r\n         * @param {string} className - Class name to be change\r\n         */\r\n        toggleClass: function (element, className) {\r\n            if (!element) return;\r\n\r\n            const check = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\r\n            if (check.test(element.className)) {\r\n                element.className = element.className.replace(check, ' ').trim();\r\n            }\r\n            else {\r\n                element.className += ' ' + className;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @description Delete argumenu value element\r\n         * @param {element} item - Element to be remove\r\n         */\r\n        removeItem: function (item) {\r\n            try {\r\n                item.remove();\r\n            } catch (e) {\r\n                item.parentNode.removeChild(item);\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * @description SunEditor core closure\r\n     * @param context\r\n     * @param dom\r\n     * @param util\r\n     * @returns {{save: save, getContent: getContent, setContent: setContent, appendContent: appendContent, disabled: disabled, enabled: enabled, show: show, hide: hide, destroy: destroy}}\r\n     */\r\n    const core = function (context, modules, plugins, lang) {\r\n        /**\r\n         * @description Practical editor function\r\n         * This function is 'this' used by other plugins\r\n         */\r\n        const editor = {\r\n            /**\r\n             * @description Elements and user options parameters of the suneditor\r\n             */\r\n            context: context,\r\n\r\n            /**\r\n             * @description loaded modules\r\n             */\r\n            modules: {},\r\n\r\n            /**\r\n             * @description loaded plugins\r\n             */\r\n            plugins: {},\r\n\r\n            /**\r\n             * @description language\r\n             */\r\n            lang: lang,\r\n\r\n            /**\r\n             * @description SUNEDITOR.util\r\n             */\r\n            util: SUNEDITOR.util,\r\n\r\n            /**\r\n             * @description dialog element\r\n             */\r\n            dialogForm: null,\r\n\r\n            /**\r\n             * @description submenu element\r\n             */\r\n            submenu: null,\r\n\r\n            /**\r\n             * @description active button element in submenu\r\n             */\r\n            submenuActiveButton: null,\r\n\r\n            /**\r\n             * @description controllers array (image resize area, link modified button)\r\n             */\r\n            controllerArray: [],\r\n\r\n            /**\r\n             * @description Elements that need to change text or className for each selection change\r\n             * @property {element} FONT - font family button\r\n             * @property {element} B - bold button\r\n             * @property {element} U - underline button\r\n             * @property {element} I - italic button\r\n             * @property {element} STRIKE - strike button\r\n             * @property {element} SUB - subscript button\r\n             * @property {element} SUP - superscript button\r\n             * @property {element} SIZE - font size button\r\n             */\r\n            commandMap: {\r\n                FORMAT: context.tool.format,\r\n                FONT: context.tool.font,\r\n                SIZE: context.tool.fontSize,\r\n                B: context.tool.bold,\r\n                U: context.tool.underline,\r\n                I: context.tool.italic,\r\n                STRIKE: context.tool.strike,\r\n                SUB: context.tool.subscript,\r\n                SUP: context.tool.superscript\r\n            },\r\n\r\n            /**\r\n             * @description Variables used internally in editor operation\r\n             * @property {(element|null)} selectionNode - Contains selection node\r\n             * @property {(element|null)} copySelection - The selection object is copied\r\n             * @property {boolean} wysiwygActive - The wysiwyg frame or code view state\r\n             * @property {boolean} isFullScreen - State of full screen\r\n             * @property {number} innerHeight_fullScreen - InnerHeight in editor when in full screen\r\n             * @property {number} resizeClientY - Remember the vertical size of the editor before resizing the editor (Used when calculating during resize operation)\r\n             * @property {number} tabSize - Indented size when tab button clicked (4)\r\n             * @property {element} originCssText - Remembered the CSS of the editor before full screen (Used when returning to original size again)\r\n             * @property {number} editorHeight - The height value entered by the user or the height value of the \"textarea\" when the suneditor is created\r\n             * @property {array} currentNodes -  An array of the current cursor's node structure\r\n             * @property {boolean} isTouchMove - Check if mobile has moved after touching (Allowing scrolling in the toolbar area)\r\n             * @private\r\n             */\r\n            _variable: {\r\n                selectionNode: null,\r\n                copySelection: null,\r\n                wysiwygActive: true,\r\n                isFullScreen: false,\r\n                innerHeight_fullScreen: 0,\r\n                resizeClientY: 0,\r\n                tabSize: 4,\r\n                originCssText: context.element.topArea.style.cssText,\r\n                editorHeight: context.user.height,\r\n                currentNodes: [],\r\n                isTouchMove: false\r\n            },\r\n\r\n            /**\r\n             * @description Regular expression to check whether it is format tag\r\n             */\r\n            _isformatTagName: new RegExp('^(?:P|DIV|H\\\\d)$', 'i'),\r\n\r\n            /**\r\n             * @description Call the module\r\n             * @param {string} directory - The directory(plugin/{directory}) of the js file to call\r\n             * @param {string} moduleName - The name of the js file to call\r\n             * @param {element} targetElement - If this is element, the element is inserted into the sibling node (submenu)\r\n             * @param {function} callBackFunction - Function to be executed immediately after module call\r\n             */\r\n            callModule: function (directory, moduleName, targetElement, callBackFunction) {\r\n                const fullDirectory = this.util.getBasePath + 'plugins/' + directory;\r\n                const fileType = 'text/javascript';\r\n\r\n                /** Dialog first call */\r\n                if (directory === 'dialog') {\r\n                    if (!this.plugins['dialog']) {\r\n                        const dialogCallback = this._callBack_addModule.bind(this, 'dialog', 'dialog', targetElement, this.callModule.bind(this, directory, moduleName, targetElement, callBackFunction));\r\n\r\n                        if (!SUNEDITOR.plugins.dialog) {\r\n                            this.util.includeFile(fileType, (fullDirectory + '/dialog.js'), dialogCallback);\r\n                        } else {\r\n                            dialogCallback();\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                /** etc */\r\n                if (!this.plugins[moduleName]) {\r\n                    if (!SUNEDITOR.plugins[moduleName]) {\r\n                        this.util.includeFile(fileType, (fullDirectory + '/' + moduleName + '.js'), this._callBack_addModule.bind(this, directory, moduleName, targetElement, callBackFunction));\r\n                    } else {\r\n                        this._callBack_addModule(directory, moduleName, targetElement, callBackFunction);\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof callBackFunction === 'function') callBackFunction();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @callback\r\n             * @description After the module is added, call the main function and the callback function\r\n             * @param {string} directory - The directory(plugin/{directory}) of the js file to call\r\n             * @param {string} moduleName - The name of the js file to call\r\n             * @param {element} targetElement - If this is element, the element is inserted into the sibling node (submenu)\r\n             * @param {function} callBackFunction - Function to be executed immediately after module call\r\n             * @private\r\n             */\r\n            _callBack_addModule: function (directory, moduleName, targetElement, callBackFunction) {\r\n                this.plugins[moduleName] = SUNEDITOR.plugins[moduleName];\r\n                this.plugins[moduleName].add(this, targetElement);\r\n\r\n                if (typeof callBackFunction === 'function') callBackFunction();\r\n            },\r\n\r\n            /**\r\n             * @description Enabled submenu\r\n             * @param {element} element - Submenu element to call\r\n             */\r\n            submenuOn: function (element) {\r\n                this.submenu = element.nextElementSibling;\r\n                this.submenu.style.display = 'block';\r\n                this.util.addClass(element, 'on');\r\n                this.submenuActiveButton = element;\r\n            },\r\n\r\n            /**\r\n             * @description Disable submenu\r\n             */\r\n            submenuOff: function () {\r\n                if (this.submenu) {\r\n                    this.submenu.style.display = 'none';\r\n                    this.submenu = null;\r\n                    this.util.removeClass(this.submenuActiveButton, 'on');\r\n                    this.submenuActiveButton = null;\r\n                }\r\n\r\n                if (context.image && context.image._onCaption === true) {\r\n                    this.plugins.image.toggle_caption_contenteditable.call(editor, false);\r\n                }\r\n\r\n                this.controllersOff();\r\n            },\r\n\r\n            /**\r\n             * @description Disable controller in editor area (link button, image resize button)\r\n             */\r\n            controllersOff: function () {\r\n                const len = this.controllerArray.length;\r\n\r\n                if (len > 0) {\r\n                    for (let i = 0; i < len; i++) {\r\n                        this.controllerArray[i].style.display = 'none';\r\n                    }\r\n                    this.controllerArray = [];\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description javascript execCommand\r\n             * @param {string} command - javascript execCommand function property\r\n             * @param {boolean} showDefaultUI - javascript execCommand function property\r\n             * @param {string} value - javascript execCommand function property\r\n             */\r\n            execCommand: function (command, showDefaultUI, value) {\r\n                context.element.wysiwygWindow.document.execCommand(command, showDefaultUI, value);\r\n            },\r\n\r\n            /**\r\n             * @description Focus to wysiwyg area\r\n             */\r\n            focus: function () {\r\n                const caption = this.util.getParentElement(this._variable.selectionNode, 'figcaption');\r\n                if (caption) {\r\n                    caption.focus();\r\n                } else {\r\n                    context.element.wysiwygWindow.document.body.focus();\r\n                }\r\n            },\r\n\r\n            _setSelectionNode: function () {\r\n                // IE\r\n                this._variable.copySelection = this.util.copyObj(this.getSelection());\r\n\r\n                const range = this.getRange();\r\n                if (range.startContainer !== range.endContainer) {\r\n                    this._variable.selectionNode = range.startContainer;\r\n                } else {\r\n                    this._variable.selectionNode = this.getSelectionNode();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description Determine if this offset is the edge offset of container\r\n             * @param {object} container - The container property of the selection object.\r\n             * @param {number} offset - The offset property of the selection object.\r\n             * @returns {boolean}\r\n             */\r\n            isEdgePoint: function (container, offset) {\r\n                return (offset === 0) || (offset === container.nodeValue.length);\r\n            },\r\n\r\n            /**\r\n             * @description Create range object\r\n             * @returns {Range}\r\n             */\r\n            createRange: function () {\r\n                return context.element.wysiwygWindow.document.createRange();\r\n            },\r\n\r\n            /**\r\n             * @description Get current selection object\r\n             * @returns {Selection}\r\n             */\r\n            getSelection: function () {\r\n                return context.element.wysiwygWindow.getSelection();\r\n            },\r\n\r\n            /**\r\n             * @description Get current select node\r\n             * @returns {Node}\r\n             */\r\n            getSelectionNode: function () {\r\n                return this.getSelection().extentNode || this.getSelection().anchorNode;\r\n            },\r\n\r\n            /**\r\n             * @description Get current range object\r\n             * @returns {Range}\r\n             */\r\n            getRange: function () {\r\n                let selection = this.getSelection();\r\n                let nativeRng = null;\r\n\r\n                if (selection.rangeCount > 0) {\r\n                    nativeRng = selection.getRangeAt(0);\r\n                }\r\n                // IE\r\n                else {\r\n                    nativeRng = this.createRange();\r\n                    selection = this._variable.copySelection;\r\n\r\n                    if (!selection) {\r\n                        selection = context.element.wysiwygWindow.document.body.firstChild;\r\n                        nativeRng.setStart(selection, 0);\r\n                        nativeRng.setEnd(selection, 0);\r\n                    } else {\r\n                        nativeRng.setStart(selection.anchorNode, selection.anchorOffset);\r\n                        nativeRng.setEnd(selection.focusNode, selection.focusOffset);\r\n                    }\r\n                }\r\n\r\n                return nativeRng;\r\n            },\r\n\r\n            /**\r\n             * @description Set range object\r\n             * @param {element} startCon - The startContainer property of the selection object.\r\n             * @param {number} startOff - The startOffset property of the selection object.\r\n             * @param {element} endCon - The endContainer property of the selection object.\r\n             * @param {number} endOff - The endOffset property of the selection object.\r\n             */\r\n            setRange: function (startCon, startOff, endCon, endOff) {\r\n                const range = this.createRange();\r\n                range.setStart(startCon, startOff);\r\n                range.setEnd(endCon, endOff);\r\n\r\n                const selection = this.getSelection();\r\n\r\n                if (selection.rangeCount > 0) {\r\n                    selection.removeAllRanges();\r\n                }\r\n\r\n                selection.addRange(range);\r\n            },\r\n\r\n            /**\r\n             * @description Show loading box\r\n             */\r\n            showLoading: function () {\r\n                context.element.loading.style.display = 'block';\r\n            },\r\n\r\n            /**\r\n             * @description Close loading box\r\n             */\r\n            closeLoading: function () {\r\n                context.element.loading.style.display = 'none';\r\n            },\r\n\r\n            /**\r\n             * @description Append P tag to current line next\r\n             * @param {element} element - Insert as siblings of that element\r\n             * @returns {element}\r\n             */\r\n            appendP: function (element) {\r\n                const oP = document.createElement('P');\r\n                oP.innerHTML = '&#65279';\r\n\r\n                element = this.util.getFormatElement(element);\r\n                element.parentNode.insertBefore(oP, element.nextElementSibling);\r\n\r\n                return oP;\r\n            },\r\n\r\n            /**\r\n             * @description Delete selected node and insert argument value node\r\n             * @param {element} oNode - Node to be inserted\r\n             * @param {(element|null)} rightNode - If the node exists, it is inserted after the node\r\n             */\r\n            insertNode: function (oNode, rightNode) {\r\n                let parentNode = null;\r\n\r\n                if (!rightNode) {\r\n                    const selection = this.getSelection();\r\n                    const nativeRng = this.getRange();\r\n\r\n                    const startCon = nativeRng.startContainer;\r\n                    const startOff = nativeRng.startOffset;\r\n                    const endCon = nativeRng.endContainer;\r\n                    const endOff = nativeRng.endOffset;\r\n\r\n                    parentNode = startCon;\r\n                    if (startCon.nodeType === 3) {\r\n                        parentNode = startCon.parentNode;\r\n                    }\r\n\r\n                    /** Select within the same node */\r\n                    if (startCon === endCon && startOff === endOff) {\r\n                        if (selection.focusNode && selection.focusNode.nodeType === 3) {\r\n                            rightNode = selection.focusNode.splitText(endOff);\r\n                        }\r\n                        else {\r\n                            if (parentNode.lastChild !== null && /^BR$/i.test(parentNode.lastChild.nodeName)) {\r\n                                parentNode.removeChild(parentNode.lastChild);\r\n                            }\r\n                            rightNode = null;\r\n                        }\r\n                    }\r\n                    /** Select multiple nodes */\r\n                    else {\r\n                        const isSameContainer = startCon === endCon;\r\n\r\n                        if (isSameContainer) {\r\n                            let removeNode = startCon;\r\n                            if (!this.isEdgePoint(endCon, endOff)) rightNode = endCon.splitText(endOff);\r\n                            if (!this.isEdgePoint(startCon, startOff)) removeNode = startCon.splitText(startOff);\r\n\r\n                            parentNode.removeChild(removeNode);\r\n                        }\r\n                        else {\r\n                            if (selection.deleteFromDocument) selection.deleteFromDocument();\r\n                            else this.removeNode();\r\n\r\n                            rightNode = endCon;\r\n\r\n                            while (rightNode.nodeType !== 1) {\r\n                                rightNode = rightNode.parentNode;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    parentNode = rightNode.parentNode;\r\n                    rightNode = rightNode.nextSibling;\r\n                }\r\n\r\n                try {\r\n                    parentNode.insertBefore(oNode, rightNode);\r\n                } catch (e) {\r\n                    parentNode.appendChild(oNode);\r\n                }\r\n\r\n                // this.setRange(oNode, 0, oNode, 0);\r\n            },\r\n\r\n            /**\r\n             * @description Delete the currently selected node\r\n             */\r\n            removeNode: function () {\r\n                const nativeRng = this.getRange();\r\n\r\n                const startCon = nativeRng.startContainer;\r\n                const startOff = nativeRng.startOffset;\r\n                const endCon = nativeRng.endContainer;\r\n                const endOff = nativeRng.endOffset;\r\n                const commonCon = nativeRng.commonAncestorContainer;\r\n\r\n                let beforeNode = null;\r\n                let afterNode = null;\r\n\r\n                const childNodes = this.util.getListChildNodes(commonCon);\r\n                let startIndex = this.util.getArrayIndex(childNodes, startCon);\r\n                let endIndex = this.util.getArrayIndex(childNodes, endCon);\r\n\r\n                for (let i = startIndex + 1, startNode = startCon; i >= 0; i--) {\r\n                    if (childNodes[i] === startNode.parentNode && childNodes[i].firstChild === startNode && startOff === 0) {\r\n                        startIndex = i;\r\n                        startNode = startNode.parentNode;\r\n                    }\r\n                }\r\n\r\n                for (let i = endIndex - 1, endNode = endCon; i > startIndex; i--) {\r\n                    if (childNodes[i] === endNode.parentNode && childNodes[i].nodeType === 1) {\r\n                        childNodes.splice(i, 1);\r\n                        endNode = endNode.parentNode;\r\n                        --endIndex;\r\n                    }\r\n                }\r\n\r\n                for (let i = startIndex; i <= endIndex; i++) {\r\n                    const item = childNodes[i];\r\n\r\n                    if (item.length === 0 || (item.nodeType === 3 && item.data === undefined)) {\r\n                        this.util.removeItem(item);\r\n                        continue;\r\n                    }\r\n\r\n                    if (item === startCon) {\r\n                        if (startCon.nodeType === 1) {\r\n                            beforeNode = document.createTextNode(startCon.textContent);\r\n                        } else {\r\n                            beforeNode = document.createTextNode(startCon.substringData(0, startOff));\r\n                        }\r\n\r\n                        if (beforeNode.length > 0) {\r\n                            startCon.data = beforeNode.data;\r\n                        } else {\r\n                            this.util.removeItem(startCon);\r\n                        }\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    if (item === endCon) {\r\n                        if (endCon.nodeType === 1) {\r\n                            afterNode = document.createTextNode(endCon.textContent);\r\n                        } else {\r\n                            afterNode = document.createTextNode(endCon.substringData(endOff, (endCon.length - endOff)));\r\n                        }\r\n\r\n                        if (afterNode.length > 0) {\r\n                            endCon.data = afterNode.data;\r\n                        } else {\r\n                            this.util.removeItem(endCon);\r\n                        }\r\n\r\n                        continue;\r\n                    }\r\n\r\n                    this.util.removeItem(item);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description Copies the node of the argument value and wraps all selected text.\r\n             * 1. When there is the same node in the selection area, the tag is stripped.\r\n             * 2. If there is another css value other thanCss attribute values received as arguments on the same node, removed only Css attribute values received as arguments\r\n             * @param {element} appendNode - The dom that will wrap the selected text area\r\n             * @param {array} checkCSSPropertyArray - The css attribute name Array to check (['font-size'], ['font-family']...])\r\n             */\r\n            wrapRangeToTag: function (appendNode, checkCSSPropertyArray) {\r\n                const nativeRng = this.getRange();\r\n                const startCon = nativeRng.startContainer;\r\n                const startOff = nativeRng.startOffset;\r\n                const endCon = nativeRng.endContainer;\r\n                const endOff = nativeRng.endOffset;\r\n                const commonCon = nativeRng.commonAncestorContainer;\r\n\r\n                let start = {}, end = {};\r\n                let newNode, regExp;\r\n\r\n                if (checkCSSPropertyArray) {\r\n                    regExp = '(?:;|^|\\\\s)(?:' + checkCSSPropertyArray[0];\r\n                    for (let i = 1; i < checkCSSPropertyArray.length; i++) {\r\n                        regExp += '|' + checkCSSPropertyArray[i];\r\n                    }\r\n                    regExp += ')\\\\s*:[^;]*\\\\s*(?:;|$)';\r\n                    regExp = new RegExp(regExp, 'gi');\r\n                }\r\n\r\n                /** one node */\r\n                if (startCon === endCon) {\r\n                    newNode = appendNode.cloneNode(false);\r\n\r\n                    /** No node selected */\r\n                    if (startOff === endOff) {\r\n                        newNode.innerHTML = '&nbsp;';\r\n                        if (this._isformatTagName.test(startCon.nodeName)) {\r\n                            startCon.appendChild(newNode);\r\n                        } else {\r\n                            startCon.parentNode.insertBefore(newNode, startCon.nextSibling);\r\n                        }\r\n                    }\r\n                    /** Select within the same node */\r\n                    else {\r\n                        const isElement = startCon.nodeType === 1;\r\n                        if (isElement) {\r\n                            newNode.innerHTML = startCon.outerHTML;\r\n                            startCon.parentNode.appendChild(newNode);\r\n                            this.util.removeItem(startCon);\r\n                        } else {\r\n                            const beforeNode = document.createTextNode(startCon.substringData(0, startOff));\r\n                            const afterNode = document.createTextNode(startCon.substringData(endOff, (startCon.length - endOff)));\r\n    \r\n                            newNode.innerText = startCon.substringData(startOff, (endOff - startOff));\r\n                            startCon.parentNode.insertBefore(newNode, startCon.nextSibling);\r\n    \r\n                            if (beforeNode.data.length > 0) {\r\n                                startCon.data = beforeNode.data;\r\n                            } else {\r\n                                startCon.data = startCon.substringData(0, startOff);\r\n                            }\r\n    \r\n                            if (afterNode.data.length > 0) {\r\n                                startCon.parentNode.insertBefore(afterNode, newNode.nextSibling);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    start.container = newNode;\r\n                    start.offset = 0;\r\n                    end.container = newNode;\r\n                    end.offset = 1;\r\n                }\r\n                /** multiple nodes */\r\n                else {\r\n                    /** tag check function*/\r\n                    const checkFontSizeCss = function (vNode) {\r\n                        if (vNode.nodeType === 3) return true;\r\n\r\n                        let style = '';\r\n                        if (regExp && vNode.style.cssText.length > 0) {\r\n                            style = vNode.style.cssText.replace(regExp, '').trim();\r\n                        }\r\n\r\n                        if (vNode.nodeName !== appendNode.nodeName || style.length > 0) {\r\n                            if (vNode.style.cssText.length > 0) vNode.style.cssText = style;\r\n                            return true;\r\n                        }\r\n\r\n                        return false;\r\n                    };\r\n\r\n                    /** one line */\r\n                    if (!/BODY/i.test(commonCon.nodeName)) {\r\n                        newNode = appendNode.cloneNode(false);\r\n                        const range = this._wrapLineNodesPart(commonCon, newNode, checkFontSizeCss, startCon, startOff, endCon, endOff);\r\n\r\n                        start.container = range.startContainer;\r\n                        start.offset = range.startOffset;\r\n                        end.container = range.endContainer;\r\n                        end.offset = range.endOffset;\r\n                    }\r\n                    /** multi line */\r\n                    else {\r\n                        // get line nodes\r\n                        const lineNodes = this.util.getListChildren(commonCon, function (current) {\r\n                            return this._isformatTagName.test(current.nodeName);\r\n                        });\r\n\r\n                        let startLine = this.util.getParentElement(startCon, 'P');\r\n                        let endLine = this.util.getParentElement(endCon, 'P');\r\n\r\n                        for (let i = 0, len = lineNodes.length; i < len; i++) {\r\n                            if (startLine === lineNodes[i]) {\r\n                                startLine = i;\r\n                                continue;\r\n                            }\r\n                            if (endLine === lineNodes[i]) {\r\n                                endLine = i;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // startCon\r\n                        newNode = appendNode.cloneNode(false);\r\n                        start = this._wrapLineNodesStart(lineNodes[startLine], newNode, checkFontSizeCss, startCon, startOff);\r\n                        // mid\r\n                        for (let i = startLine + 1; i < endLine; i++) {\r\n                            newNode = appendNode.cloneNode(false);\r\n                            this._wrapLineNodes(lineNodes[i], newNode, checkFontSizeCss);\r\n                        }\r\n                        // endCon\r\n                        newNode = appendNode.cloneNode(false);\r\n                        end = this._wrapLineNodesEnd(lineNodes[endLine], newNode, checkFontSizeCss, endCon, endOff);\r\n                    }\r\n                }\r\n\r\n                // set range\r\n                this.setRange(start.container, start.offset, end.container, end.offset);\r\n            },\r\n\r\n            /**\r\n             * @description wraps text nodes of line selected text.\r\n             * @param {element} element - The node of the line that contains the selected text node.\r\n             * @param {element} newInnerNode - The dom that will wrap the selected text area\r\n             * @param {function} validation - Check if the node should be stripped.\r\n             * @param {element} startCon - The startContainer property of the selection object.\r\n             * @param {number} startOff - The startOffset property of the selection object.\r\n             * @param {element} endCon - The endContainer property of the selection object.\r\n             * @param {number} endOff - The endOffset property of the selection object.\r\n             * @returns {{startContainer: *, startOffset: *, endContainer: *, endOffset: *}}\r\n             * @private\r\n             */\r\n            _wrapLineNodesPart: function (element, newInnerNode, validation, startCon, startOff, endCon, endOff) {\r\n                const el = element;\r\n                const removeNodeList = [];\r\n\r\n                let startContainer = startCon;\r\n                let startOffset = startOff;\r\n                let endContainer = endCon;\r\n                let endOffset = endOff;\r\n\r\n                let startPass = false;\r\n                let endPass = false;\r\n                let pCurrent, newNode, appendNode;\r\n\r\n                (function recursionFunc(current, node) {\r\n                    const childNodes = current.childNodes;\r\n                    for (let i = 0, len = childNodes.length; i < len; i++) {\r\n                        if (endPass) break;\r\n                        let child = childNodes[i];\r\n\r\n                        if (startPass && child !== endContainer && child.nodeType === 3) {\r\n                            pCurrent = [];\r\n                            while (newNode !== el && newNode !== null) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            if (pCurrent.length > 0) {\r\n                                appendNode = newNode = pCurrent.pop();\r\n                                while (pCurrent.length > 0) {\r\n                                    newNode = pCurrent.pop();\r\n                                    appendNode.appendChild(newNode);\r\n                                }\r\n                                newInnerNode.appendChild(appendNode);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n\r\n                            node.appendChild(child.cloneNode(false));\r\n                            removeNodeList.push(child);\r\n                        }\r\n\r\n                        // startContainer\r\n                        if (child === startContainer) {\r\n                            const prevNode = document.createTextNode(startContainer.substringData(0, startOffset));\r\n                            const startNode = document.createTextNode(startContainer.substringData(startOffset, (startContainer.length - startOffset)));\r\n\r\n                            if (prevNode.length > 0) {\r\n                                startContainer.data = prevNode.data;\r\n                            } else {\r\n                                removeNodeList.push(startContainer);\r\n                            }\r\n\r\n                            newNode = child;\r\n                            pCurrent = [];\r\n                            while (newNode !== el && newNode !== null) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            appendNode = newNode = pCurrent.pop() || child;\r\n                            while (pCurrent.length > 0) {\r\n                                newNode = pCurrent.pop();\r\n                                appendNode.appendChild(newNode);\r\n                            }\r\n\r\n                            if (appendNode !== child) {\r\n                                newInnerNode.appendChild(appendNode);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n\r\n                            startContainer = startNode;\r\n                            startOffset = 0;\r\n                            node.appendChild(startContainer);\r\n\r\n                            startPass = true;\r\n                            continue;\r\n                        }\r\n\r\n                        // endContainer\r\n                        if (child === endContainer) {\r\n                            const afterNode = document.createTextNode(endContainer.substringData(endOffset, (endContainer.length - endOffset)));\r\n                            const endNode = document.createTextNode(endContainer.substringData(0, endOffset));\r\n                            let before = null;\r\n\r\n                            before = newNode = child;\r\n                            pCurrent = [];\r\n                            while (newNode !== el && newNode !== null) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                before = newNode;\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            appendNode = newNode = pCurrent.pop() || child;\r\n                            while (pCurrent.length > 0) {\r\n                                newNode = pCurrent.pop();\r\n                                appendNode.appendChild(newNode);\r\n                            }\r\n\r\n                            if (appendNode !== child) {\r\n                                newInnerNode.appendChild(appendNode);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n\r\n                            if (afterNode.length > 0) {\r\n                                endContainer.data = afterNode.data;\r\n                            } else {\r\n                                removeNodeList.push(endContainer);\r\n                            }\r\n\r\n                            endContainer = endNode;\r\n                            endOffset = endNode.length;\r\n                            node.appendChild(endContainer);\r\n                            el.insertBefore(newInnerNode, before);\r\n\r\n                            let pRemove;\r\n                            while (removeNodeList.length > 0) {\r\n                                pRemove = removeNodeList.pop();\r\n                                pRemove.data = '';\r\n                                while (pRemove.parentNode && pRemove.parentNode.innerText.length === 0) {\r\n                                    pRemove = pRemove.parentNode;\r\n                                }\r\n                                this.util.removeItem(pRemove);\r\n                            }\r\n\r\n                            endPass = true;\r\n                            break;\r\n                        }\r\n\r\n                        recursionFunc(child);\r\n                    }\r\n                })(element);\r\n\r\n                return {\r\n                    startContainer: startContainer,\r\n                    startOffset: startOffset,\r\n                    endContainer: endContainer,\r\n                    endOffset: endOffset\r\n                };\r\n            },\r\n\r\n            /**\r\n             * @description wraps mid lines selected text.\r\n             * @param {element} element - The node of the line that contains the selected text node.\r\n             * @param {element} newInnerNode - The dom that will wrap the selected text area\r\n             * @param {function} validation - Check if the node should be stripped.\r\n             * @private\r\n             */\r\n            _wrapLineNodes: function (element, newInnerNode, validation) {\r\n                (function recursionFunc(current, node) {\r\n                    const childNodes = current.childNodes;\r\n\r\n                    for (let i = 0, len = childNodes.length; i < len; i++) {\r\n                        let child = childNodes[i];\r\n                        let coverNode = node;\r\n                        if (validation(child)) {\r\n                            let cloneNode = child.cloneNode(false);\r\n                            node.appendChild(cloneNode);\r\n                            if (child.nodeType === 1) coverNode = cloneNode;\r\n                        }\r\n                        recursionFunc(child, coverNode);\r\n                    }\r\n                })(element, newInnerNode);\r\n\r\n                element.innerHTML = '';\r\n                element.appendChild(newInnerNode);\r\n            },\r\n\r\n            /**\r\n             * @description wraps first line selected text.\r\n             * @param {element} element - The node of the line that contains the selected text node.\r\n             * @param {element} newInnerNode - The dom that will wrap the selected text area\r\n             * @param {function} validation - Check if the node should be stripped.\r\n             * @param {element} startCon - The startContainer property of the selection object.\r\n             * @param {number} startOff - The startOffset property of the selection object.\r\n             * @returns {{container: *, offset: *}}\r\n             * @private\r\n             */\r\n            _wrapLineNodesStart: function (element, newInnerNode, validation, startCon, startOff) {\r\n                const el = element;\r\n                const pNode = document.createElement('P');\r\n\r\n                let container = startCon;\r\n                let offset = startOff;\r\n                let passNode = false;\r\n                let pCurrent, newNode, appendNode;\r\n\r\n                (function recursionFunc(current, node) {\r\n                    const childNodes = current.childNodes;\r\n                    for (let i = 0, len = childNodes.length; i < len; i++) {\r\n                        const child = childNodes[i];\r\n                        let coverNode = node;\r\n\r\n                        if (passNode) {\r\n                            if (child.nodeType === 1) {\r\n                                recursionFunc(child, child);\r\n                                continue;\r\n                            }\r\n\r\n                            newNode = child;\r\n                            pCurrent = [];\r\n                            while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            if (pCurrent.length > 0) {\r\n                                appendNode = newNode = pCurrent.pop();\r\n                                while (pCurrent.length > 0) {\r\n                                    newNode = pCurrent.pop();\r\n                                    appendNode.appendChild(newNode);\r\n                                }\r\n                                newInnerNode.appendChild(appendNode);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n                        }\r\n\r\n                        // startContainer\r\n                        if (!passNode && child === container) {\r\n                            const prevNode = document.createTextNode(container.substringData(0, offset));\r\n                            const textNode = document.createTextNode(container.substringData(offset, (container.length - offset)));\r\n\r\n                            if (prevNode.data.length > 0) {\r\n                                node.appendChild(prevNode);\r\n                            }\r\n\r\n                            newNode = node;\r\n                            pCurrent = [];\r\n                            while (newNode !== pNode && newNode !== null) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            appendNode = newNode = pCurrent.pop() || node;\r\n                            while (pCurrent.length > 0) {\r\n                                newNode = pCurrent.pop();\r\n                                appendNode.appendChild(newNode);\r\n                            }\r\n\r\n                            if (appendNode !== node) {\r\n                                newInnerNode.appendChild(appendNode);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n\r\n                            pNode.appendChild(newInnerNode);\r\n                            container = textNode;\r\n                            offset = 0;\r\n                            passNode = true;\r\n\r\n                            node.appendChild(container);\r\n                            continue;\r\n                        }\r\n\r\n                        if (!passNode || validation(child)) {\r\n                            const cloneNode = child.cloneNode(false);\r\n                            node.appendChild(cloneNode);\r\n                            if (child.nodeType === 1) coverNode = cloneNode;\r\n                        }\r\n\r\n                        recursionFunc(child, coverNode);\r\n                    }\r\n                })(element, pNode);\r\n\r\n                element.parentNode.insertBefore(pNode, element);\r\n                this.util.removeItem(element);\r\n\r\n                return {\r\n                    container: container,\r\n                    offset: offset\r\n                };\r\n            },\r\n\r\n            /**\r\n             * @description wraps last line selected text.\r\n             * @param {element} element - The node of the line that contains the selected text node.\r\n             * @param {element} newInnerNode - The dom that will wrap the selected text area\r\n             * @param {function} validation - Check if the node should be stripped.\r\n             * @param {element} endCon - The endContainer property of the selection object.\r\n             * @param {number} endOff - The endOffset property of the selection object.\r\n             * @returns {{container: *, offset: *}}\r\n             * @private\r\n             */\r\n            _wrapLineNodesEnd: function (element, newInnerNode, validation, endCon, endOff) {\r\n                const el = element;\r\n                const pNode = document.createElement('P');\r\n\r\n                let container = endCon;\r\n                let offset = endOff;\r\n                let passNode = false;\r\n                let pCurrent, newNode, appendNode;\r\n\r\n                (function recursionFunc(current, node) {\r\n                    const childNodes = current.childNodes;\r\n                    for (let i = childNodes.length -1; 0 <= i; i--) {\r\n                        const child = childNodes[i];\r\n                        let coverNode = node;\r\n\r\n                        if (passNode) {\r\n                            if (child.nodeType === 1) {\r\n                                recursionFunc(child, child);\r\n                                continue;\r\n                            }\r\n\r\n                            newNode = child;\r\n                            pCurrent = [];\r\n                            while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            if (pCurrent.length > 0) {\r\n                                appendNode = newNode = pCurrent.pop();\r\n                                while (pCurrent.length > 0) {\r\n                                    newNode = pCurrent.pop();\r\n                                    appendNode.insertBefore(newNode, appendNode.firstChild);\r\n                                }\r\n                                newInnerNode.insertBefore(appendNode, newInnerNode.firstChild);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n                        }\r\n\r\n                        // endContainer\r\n                        if (!passNode && child === container) {\r\n                            const afterNode = document.createTextNode(container.substringData(offset, (container.length - offset)));\r\n                            const textNode = document.createTextNode(container.substringData(0, offset));\r\n\r\n                            if (afterNode.data.length > 0) {\r\n                                node.insertBefore(afterNode, node.firstChild);\r\n                            }\r\n\r\n                            newNode = node;\r\n                            pCurrent = [];\r\n                            while (newNode !== pNode && newNode !== null) {\r\n                                if (validation(newNode) && newNode.nodeType === 1) {\r\n                                    pCurrent.push(newNode.cloneNode(false));\r\n                                }\r\n                                newNode = newNode.parentNode;\r\n                            }\r\n\r\n                            appendNode = newNode = pCurrent.pop() || node;\r\n                            while (pCurrent.length > 0) {\r\n                                newNode = pCurrent.pop();\r\n                                appendNode.insertBefore(newNode, appendNode.firstChild);\r\n                            }\r\n\r\n                            if (appendNode !== node) {\r\n                                newInnerNode.insertBefore(appendNode, newInnerNode.firstChild);\r\n                                node = newNode;\r\n                            } else {\r\n                                node = newInnerNode;\r\n                            }\r\n\r\n                            pNode.insertBefore(newInnerNode, pNode.firstChild);\r\n                            container = textNode;\r\n                            offset = textNode.data.length;\r\n                            passNode = true;\r\n\r\n                            node.insertBefore(container, node.firstChild);\r\n                            continue;\r\n                        }\r\n\r\n                        if (!passNode || validation(child)) {\r\n                            const cloneNode = child.cloneNode(false);\r\n                            node.insertBefore(cloneNode, node.firstChild);\r\n                            if (child.nodeType === 1) coverNode = cloneNode;\r\n                        }\r\n\r\n                        recursionFunc(child, coverNode);\r\n                    }\r\n                })(element, pNode);\r\n\r\n                element.parentNode.insertBefore(pNode, element);\r\n                this.util.removeItem(element);\r\n\r\n                return {\r\n                    container: container,\r\n                    offset: offset\r\n                };\r\n            },\r\n\r\n            /**\r\n             * @description This function implements indentation.\r\n             * Set \"margin-left\" to \"25px\" in the top \"P\" tag of the parameter node.\r\n             * @param node {Node} - The node to indent (editor._variable.selectionNode)\r\n             * @param command {String} - Separator (\"indent\" or \"outdent\")\r\n             */\r\n            indent: function (node, command) {\r\n                const p = this.util.getParentElement(node, 'P');\r\n                if (!p) return;\r\n\r\n                let margin = /\\d+/.test(p.style.marginLeft) ? p.style.marginLeft.match(/\\d+/)[0] * 1 : 0;\r\n\r\n                if ('indent' === command) {\r\n                    margin += 25;\r\n                } else {\r\n                    margin -= 25;\r\n                }\r\n\r\n                p.style.marginLeft = (margin < 0 ? 0 : margin) + 'px';\r\n            },\r\n\r\n            /**\r\n             * @description Add or remove the class name of \"body\" so that the code block is visible\r\n             */\r\n            toggleDisplayBlocks: function () {\r\n                this.util.toggleClass(context.element.wysiwygWindow.document.body, 'sun-editor-show-block');\r\n            },\r\n\r\n            /**\r\n             * @description Changes to code view or wysiwyg view\r\n             */\r\n            toggleCodeView: function () {\r\n                if (!this._variable.wysiwygActive) {\r\n                    const ec = {'&amp;': '&', '&nbsp;': '\\u00A0', /*\"&quot;\": \"\\\"\", */'&lt;': '<', '&gt;': '>'};\r\n                    const code_html = context.element.code.value.replace(/&[a-z]+;/g, function (m) {\r\n                        return (typeof ec[m] === 'string') ? ec[m] : m;\r\n                    });\r\n                    context.element.wysiwygWindow.document.body.innerHTML = code_html.trim().length > 0 ? code_html : '<p>&#65279</p>';\r\n                    context.element.wysiwygWindow.document.body.scrollTop = 0;\r\n                    context.element.code.style.display = 'none';\r\n                    context.element.wysiwygElement.style.display = 'block';\r\n                    this._variable.wysiwygActive = true;\r\n                }\r\n                else {\r\n                    context.element.code.value = context.element.wysiwygWindow.document.body.innerHTML.trim().replace(/<\\/p>(?=[^\\n])/gi, '<\\/p>\\n');\r\n                    context.element.wysiwygElement.style.display = 'none';\r\n                    context.element.code.style.display = 'block';\r\n                    this._variable.wysiwygActive = false;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description Changes to full screen or default screen\r\n             * @param {element} element - full screen button\r\n             */\r\n            toggleFullScreen: function (element) {\r\n                if (!this._variable.isFullScreen) {\r\n                    context.element.topArea.style.position = 'fixed';\r\n                    context.element.topArea.style.top = '0';\r\n                    context.element.topArea.style.left = '0';\r\n                    context.element.topArea.style.width = '100%';\r\n                    context.element.topArea.style.height = '100%';\r\n\r\n                    this._variable.innerHeight_fullScreen = (window.innerHeight - context.tool.bar.offsetHeight);\r\n                    context.element.editorArea.style.height = this._variable.innerHeight_fullScreen + 'px';\r\n\r\n                    this.util.removeClass(element.firstElementChild, 'icon-expansion');\r\n                    this.util.addClass(element.firstElementChild, 'icon-reduction');\r\n                }\r\n                else {\r\n                    context.element.topArea.style.cssText = this._variable.originCssText;\r\n                    context.element.editorArea.style.height = this._variable.editorHeight + 'px';\r\n\r\n                    this.util.removeClass(element.firstElementChild, 'icon-reduction');\r\n                    this.util.addClass(element.firstElementChild, 'icon-expansion');\r\n                }\r\n\r\n                this._variable.isFullScreen = !this._variable.isFullScreen;\r\n            },\r\n\r\n            /**\r\n             * @description Opens the preview window\r\n             */\r\n            openPreview: function () {\r\n                const WindowObject = window.open('', '_blank');\r\n                WindowObject.mimeType = 'text/html';\r\n                WindowObject.document.head.innerHTML = '' +\r\n                    '<meta charset=\"utf-8\" />' +\r\n                    '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">' +\r\n                    '<title>' + this.lang.toolbar.preview + '</title>' +\r\n                    '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + this.util.getBasePath + 'css/suneditor-contents.css\">';\r\n                WindowObject.document.body.className = 'sun-editor-editable';\r\n                WindowObject.document.body.innerHTML = context.element.wysiwygWindow.document.body.innerHTML;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @description event function\r\n         */\r\n        const event = {\r\n            _shortcutKeyCode: {\r\n                66: ['bold', 'B'],\r\n                83: ['strikethrough', 'STRIKE'],\r\n                85: ['underline', 'U'],\r\n                73: ['italic', 'I'],\r\n                89: ['redo'],\r\n                90: ['undo'],\r\n                219: ['outdent'],\r\n                221: ['indent']\r\n            },\r\n\r\n            _directionKeyKeyCode: new RegExp('^(?:8|13|32|46|33|34|35|36|37|38|39|40|98|100|102|104)$'),\r\n\r\n            _changeButtonClassTagCheck: new RegExp('^(?:B|U|I|STRIKE|SUB|SUP)$'),\r\n\r\n            _findButtonEffectTag: function () {\r\n                const commandMap = editor.commandMap;\r\n                const classOnCheck = this._changeButtonClassTagCheck;\r\n                const commandMapNodes = [];\r\n                const currentNodes = [];\r\n\r\n                let findFormat = true, findFont = true, findSize = true, findA = true;\r\n                let findB = true, findI = true, findU = true, findS = true;\r\n                let cssText = '', nodeName = '';\r\n\r\n                for (let selectionParent = editor._variable.selectionNode; !/^(?:BODY|HTML)$/i.test(selectionParent.nodeName); selectionParent = selectionParent.parentNode) {\r\n                    if (selectionParent.nodeType !== 1) continue;\r\n                    nodeName = selectionParent.nodeName.toUpperCase();\r\n                    currentNodes.push(nodeName);\r\n\r\n                    /** Format */\r\n                    if (findFormat && editor._isformatTagName.test(nodeName)) {\r\n                        commandMapNodes.push('FORMAT');\r\n                        editor.util.changeTxt(commandMap['FORMAT'], nodeName);\r\n                        findFormat = false;\r\n                        continue;\r\n                    }\r\n\r\n                    /** Font */\r\n                    if (findFont && (selectionParent.style.fontFamily.length > 0 || (selectionParent.face && selectionParent.face.length > 0))) {\r\n                        commandMapNodes.push('FONT');\r\n                        const selectFont = (selectionParent.style.fontFamily || selectionParent.face || editor.lang.toolbar.font).replace(/[\"']/g,'');\r\n                        editor.util.changeTxt(commandMap['FONT'], selectFont);\r\n                        findFont = false;\r\n                    }\r\n\r\n                    /** A */\r\n                    if (findA && /^A$/.test(nodeName) && selectionParent.getAttribute('data-image-link') === null) {\r\n                        if (!context.link || editor.controllerArray[0] !== context.link.linkBtn) {\r\n                            editor.callModule('dialog', 'link', null, function () {\r\n                                this.plugins.link.call_controller_linkButton.call(editor, selectionParent);\r\n                            });\r\n                        }\r\n                        findA = false;\r\n                    } else if (findA && context.link && editor.controllerArray[0] === context.link.linkBtn) {\r\n                        editor.controllersOff();\r\n                    }\r\n\r\n                    /** SPAN */\r\n                    if (findSize && /^SPAN$/.test(nodeName)) {\r\n                        /** font size */\r\n                        if (selectionParent.style.fontSize.length > 0) {\r\n                            commandMapNodes.push('SIZE');\r\n                            editor.util.changeTxt(commandMap['SIZE'], selectionParent.style.fontSize.match(/\\d+/)[0]);\r\n                            findSize = false;\r\n                        }\r\n                    }\r\n\r\n                    /** command map */\r\n                    cssText = selectionParent.style.cssText;\r\n                    if (findB && /font\\-weight\\s*:\\s*(?:\\d+|bold|bolder)(?:;|\\s|)/.test(cssText)) {\r\n                        commandMapNodes.push('B');\r\n                        findB = false;\r\n                    }\r\n                    if (findI && /font\\-style\\s*:\\s*(?:italic|oblique)(?:;|\\s)/.test(cssText)) {\r\n                        commandMapNodes.push('I');\r\n                        findI = false;\r\n                    }\r\n                    if (findU && /text\\-decoration(?:\\-line)?\\s*:\\s*underline(?:;|\\s|)/.test(cssText)) {\r\n                        commandMapNodes.push('U');\r\n                        findU = false;\r\n                    }\r\n                    if (findS && /text\\-decoration(?:\\-line)?\\s*:\\s*line-through(?:;|\\s|)/.test(cssText)) {\r\n                        commandMapNodes.push('STRIKE');\r\n                        findS = false;\r\n                    }\r\n\r\n                    commandMapNodes.push((/^STRONG$/.test(nodeName) ? 'B' : /^EM$/.test(nodeName) ? 'I' : nodeName));\r\n                }\r\n\r\n                /** A Tag edit controller off */\r\n                if (findA) editor.controllersOff();\r\n\r\n                /** toggle class on */\r\n                for (let i = 0; i < commandMapNodes.length; i++) {\r\n                    nodeName = commandMapNodes[i];\r\n                    if (classOnCheck.test(nodeName)) {\r\n                        editor.util.addClass(commandMap[nodeName], 'on');\r\n                    }\r\n                }\r\n\r\n                /** remove class, display text */\r\n                for (let key in commandMap) {\r\n                    if (commandMapNodes.indexOf(key) > -1) continue;\r\n                    if (/^FONT/i.test(key)) {\r\n                        editor.util.changeTxt(commandMap[key], editor.lang.toolbar.font);\r\n                    }\r\n                    else if (/^SIZE$/i.test(key)) {\r\n                        editor.util.changeTxt(commandMap[key], editor.lang.toolbar.fontSize);\r\n                    }\r\n                    else {\r\n                        editor.util.removeClass(commandMap[key], 'on');\r\n                    }\r\n                }\r\n\r\n                /** save current nodes */\r\n                editor._variable.currentNodes = currentNodes.reverse();\r\n\r\n                /**  Displays the current node structure to resizebar */\r\n                if (context.user.showPathLabel) context.element.navigation.textContent = editor._variable.currentNodes.join(' > ');\r\n            },\r\n\r\n            resize_window: function () {\r\n                if (editor._variable.isFullScreen) {\r\n                    editor._variable.innerHeight_fullScreen += (window.innerHeight - context.tool.bar.offsetHeight) - editor._variable.innerHeight_fullScreen;\r\n                    context.element.editorArea.style.height = editor._variable.innerHeight_fullScreen + 'px';\r\n                }\r\n            },\r\n\r\n            touchstart_toolbar: function () {\r\n                editor._variable.isTouchMove = false;\r\n            },\r\n\r\n            touchmove_toolbar: function () {\r\n                editor._variable.isTouchMove = true;\r\n            },\r\n\r\n            onClick_toolbar: function (e) {\r\n                if (editor._variable.isTouchMove) return true;\r\n\r\n                let target = e.target;\r\n                let display = target.getAttribute('data-display');\r\n                let command = target.getAttribute('data-command');\r\n                let className = target.className;\r\n\r\n                while (!command && !/editor_tool/.test(className) && !/sun-editor-id-toolbar/.test(className)) {\r\n                    target = target.parentNode;\r\n                    command = target.getAttribute('data-command');\r\n                    display = target.getAttribute('data-display');\r\n                    className = target.className;\r\n                }\r\n\r\n                if (!command && !display) return true;\r\n\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                editor.submenuOff();\r\n                editor.focus();\r\n\r\n                /** Dialog, Submenu */\r\n                if (display) {\r\n                    if (/submenu/.test(display) && (target.nextElementSibling === null || target.nextElementSibling !== editor.submenu)) {\r\n                        editor.callModule('submenu', command, target, function () {\r\n                            editor.submenuOn(target);\r\n                        });\r\n                    }\r\n                    else if (/dialog/.test(display)) {\r\n                        editor.callModule('dialog', command, null, function () {\r\n                            editor.plugins.dialog.openDialog.call(editor, command, target.getAttribute('data-option'), false);\r\n                        });\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                /** default command */\r\n                if (command) {\r\n                    switch (command) {\r\n                        case 'codeView':\r\n                            editor.toggleCodeView();\r\n                            editor.util.toggleClass(target, 'on');\r\n                            break;\r\n                        case 'fullScreen':\r\n                            editor.toggleFullScreen(target);\r\n                            editor.util.toggleClass(target, 'on');\r\n                            break;\r\n                        case 'indent':\r\n                        case 'outdent':\r\n                            editor.indent(editor._variable.selectionNode, command);\r\n                            break;\r\n                        case 'redo':\r\n                        case 'undo':\r\n                        case 'removeFormat':\r\n                            editor.execCommand(command, false, null);\r\n                            break;\r\n                        case 'preview':\r\n                            editor.openPreview();\r\n                            break;\r\n                        case 'print':\r\n                            context.element.wysiwygWindow.print();\r\n                            break;\r\n                        case 'showBlocks':\r\n                            editor.toggleDisplayBlocks();\r\n                            editor.util.toggleClass(target, 'on');\r\n                            break;\r\n                        case 'subscript':\r\n                            if (editor.util.hasClass(context.tool.superscript, 'on')) {\r\n                                editor.execCommand('superscript', false, null);\r\n                                editor.util.removeClass(context.tool.superscript, 'on');\r\n                            }\r\n                            editor.execCommand(command, false, null);\r\n                            editor.util.toggleClass(target, 'on');\r\n                            break;\r\n                        case 'superscript':\r\n                            if (editor.util.hasClass(context.tool.subscript, 'on')) {\r\n                                editor.execCommand('subscript', false, null);\r\n                                editor.util.removeClass(context.tool.subscript, 'on');\r\n                            }\r\n                            editor.execCommand(command, false, null);\r\n                            editor.util.toggleClass(target, 'on');\r\n                            break;\r\n                        default :\r\n                            editor.execCommand(command, false, target.getAttribute('data-value'));\r\n                            editor.util.toggleClass(target, 'on');\r\n                    }\r\n                }\r\n            },\r\n\r\n            onMouseUp_wysiwyg: function (e) {\r\n                e.stopPropagation();\r\n\r\n                const targetElement = e.target;\r\n                editor.submenuOff();\r\n\r\n                if (/^HTML$/i.test(targetElement.nodeName)) {\r\n                    e.preventDefault();\r\n                    editor.focus();\r\n                    return;\r\n                }\r\n\r\n                if (/^IMG$/i.test(targetElement.nodeName)) {\r\n                    e.preventDefault();\r\n                    editor.callModule('dialog', 'image', null, function () {\r\n                        const size = editor.plugins.dialog.call_controller_resize.call(editor, targetElement, 'image');\r\n                        editor.plugins.image.onModifyMode.call(editor, targetElement, size);\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                editor._setSelectionNode();\r\n                event._findButtonEffectTag();\r\n            },\r\n\r\n            onKeyDown_wysiwyg: function (e) {\r\n                editor._setSelectionNode();\r\n\r\n                const keyCode = e.keyCode;\r\n                const shift = e.shiftKey;\r\n                const ctrl = e.ctrlKey || e.metaKey;\r\n                const alt = e.altKey;\r\n                e.stopPropagation();\r\n\r\n                function shortcutCommand(keyCode) {\r\n                    const key = event._shortcutKeyCode[keyCode];\r\n                    if (!key) return false;\r\n\r\n                    editor.execCommand(key[0], false, null);\r\n                    editor.util.toggleClass(editor.commandMap[key[1]], 'on');\r\n\r\n                    return true;\r\n                }\r\n\r\n                /** Shortcuts */\r\n                if (ctrl && !/^(?:16|17|18)$/.test(keyCode)) {\r\n                    if (!(shift && keyCode !== 83) && shortcutCommand(keyCode)) {\r\n                        e.preventDefault();\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                /** default key action */\r\n                switch (keyCode) {\r\n                    case 8: /**backspace key*/\r\n                        if (editor._isformatTagName.test(editor._variable.selectionNode.tagName) && editor._variable.selectionNode.previousSibling === null) {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                            editor._variable.selectionNode.innerHTML = '&#65279';\r\n                            return false;\r\n                        }\r\n                        break;\r\n                    case 9:\r\n                        /**tab key*/\r\n                        e.preventDefault();\r\n                        if (ctrl || alt) break;\r\n\r\n                        let currentNode = editor._variable.selectionNode || editor.getSelection().anchorNode;\r\n                        while (!/^TD$/i.test(currentNode.tagName) && !/^BODY$/i.test(currentNode.tagName)) {\r\n                            currentNode = currentNode.parentNode;\r\n                        }\r\n\r\n                        if (currentNode && /^TD$/i.test(currentNode.tagName)) {\r\n                            const table = editor.util.getParentElement(currentNode, 'table');\r\n                            const cells = editor.util.getListChildren(table, editor.util.isCell);\r\n                            let idx = shift ? editor.util.prevIdx(cells, currentNode) : editor.util.nextIdx(cells, currentNode);\r\n\r\n                            if (idx === cells.length && !shift) idx = 0;\r\n                            if (idx === -1 && shift) idx = cells.length - 1;\r\n\r\n                            const moveCell = cells[idx];\r\n                            if (!moveCell) return false;\r\n\r\n                            const range = editor.createRange();\r\n                            range.setStart(moveCell, 0);\r\n                            range.setEnd(moveCell, 0);\r\n\r\n                            const selection = editor.getSelection();\r\n                            if (selection.rangeCount > 0) {\r\n                                selection.removeAllRanges();\r\n                            }\r\n                            selection.addRange(range);\r\n\r\n                            break;\r\n                        }\r\n\r\n                        /** if P Tag */\r\n                        if (shift) break;\r\n\r\n                        const tabText = context.element.wysiwygWindow.document.createTextNode(new Array(editor._variable.tabSize + 1).join('\\u00A0'));\r\n                        editor.insertNode(tabText, null);\r\n\r\n                        const selection = editor.getSelection();\r\n                        const rng = editor.createRange();\r\n\r\n                        rng.setStart(tabText, editor._variable.tabSize);\r\n                        rng.setEnd(tabText, editor._variable.tabSize);\r\n\r\n                        if (selection.rangeCount > 0) {\r\n                            selection.removeAllRanges();\r\n                        }\r\n\r\n                        selection.addRange(rng);\r\n\r\n                        break;\r\n                }\r\n            },\r\n\r\n            onKeyUp_wysiwyg: function (e) {\r\n                editor._setSelectionNode();\r\n\r\n                /** when format tag deleted */\r\n                if (e.keyCode === 8 && /^BODY$/i.test(editor._variable.selectionNode.tagName)) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n\r\n                    const oFormatTag = document.createElement(editor._variable.currentNodes[0]);\r\n                    oFormatTag.innerHTML = '&#65279';\r\n\r\n                    editor._variable.selectionNode.appendChild(oFormatTag);\r\n                    editor._variable.selectionNode = oFormatTag;\r\n                }\r\n\r\n                if (event._directionKeyKeyCode.test(e.keyCode)) {\r\n                    event._findButtonEffectTag();\r\n                }\r\n            },\r\n\r\n            onScroll_wysiwyg: function () {\r\n                editor.controllersOff();\r\n            },\r\n\r\n            onDrop_wysiwyg: function (e) {\r\n                const files = e.dataTransfer.files;\r\n\r\n                if (files.length === 0) return true;\r\n\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n\r\n                editor.focus();\r\n\r\n                editor.callModule('dialog', 'image', null, function () {\r\n                    editor.context.image.imgInputFile.files = files;\r\n                    editor.plugins.image.onRender_imgInput.call(editor);\r\n                    editor.context.image.imgInputFile.files = null;\r\n                });\r\n            },\r\n\r\n            onMouseDown_resizeBar: function (e) {\r\n                e.stopPropagation();\r\n\r\n                editor._variable.resizeClientY = e.clientY;\r\n                context.element.resizeBackground.style.display = 'block';\r\n\r\n                function closureFunc() {\r\n                    context.element.resizeBackground.style.display = 'none';\r\n                    document.removeEventListener('mousemove', event.resize_editor);\r\n                    document.removeEventListener('mouseup', closureFunc);\r\n                }\r\n\r\n                document.addEventListener('mousemove', event.resize_editor);\r\n                document.addEventListener('mouseup', closureFunc);\r\n            },\r\n\r\n            resize_editor: function (e) {\r\n                const resizeInterval = (e.clientY - editor._variable.resizeClientY);\r\n\r\n                context.element.editorArea.style.height = (context.element.editorArea.offsetHeight + resizeInterval) + 'px';\r\n                editor._variable.editorHeight = (context.element.editorArea.offsetHeight + resizeInterval);\r\n\r\n                editor._variable.resizeClientY = e.clientY;\r\n            }\r\n        };\r\n\r\n        /** add event listeners */\r\n        /** tool bar event */\r\n        context.tool.bar.addEventListener('touchstart', event.touchstart_toolbar);\r\n        context.tool.bar.addEventListener('touchmove', event.touchmove_toolbar);\r\n        context.tool.bar.addEventListener('touchend', event.onClick_toolbar);\r\n        context.tool.bar.addEventListener('click', event.onClick_toolbar);\r\n        /** editor area */\r\n        context.element.wysiwygWindow.addEventListener('mouseup', event.onMouseUp_wysiwyg);\r\n        context.element.wysiwygWindow.addEventListener('keydown', event.onKeyDown_wysiwyg);\r\n        context.element.wysiwygWindow.addEventListener('keyup', event.onKeyUp_wysiwyg);\r\n        context.element.wysiwygWindow.addEventListener('scroll', event.onScroll_wysiwyg);\r\n        context.element.wysiwygWindow.addEventListener('drop', event.onDrop_wysiwyg);\r\n        /** resize bar */\r\n        context.element.resizebar.addEventListener('mousedown', event.onMouseDown_resizeBar);\r\n        /** window resize event */\r\n        window.addEventListener('resize', event.resize_window);\r\n\r\n        /** add plugin and module to plugins object */\r\n        let plugin = null;\r\n\r\n        /** modules */\r\n        for (let i = 0, len = modules.length; i < len; i++) {\r\n            plugin = modules[i];\r\n            plugin.add(editor);\r\n            editor.plugins[plugin.name] = plugin;\r\n        }\r\n\r\n        /** plugins */\r\n        let pluginKeys = Object.keys(plugins);\r\n        for (let i = 0, len = pluginKeys.length; i < len; i++) {\r\n            plugin = plugins[pluginKeys[i]];\r\n            plugin.add(editor, plugin.buttonElement);\r\n            editor.plugins[pluginKeys[i]] = plugin;\r\n        }\r\n\r\n        pluginKeys = null, plugin = null;\r\n\r\n        /** User function */\r\n        return {\r\n            /**\r\n             * @description Copying the contents of the editor to the original textarea\r\n             */\r\n            save: function () {\r\n                if (editor._variable.wysiwygActive) {\r\n                    context.element.originElement.innerHTML = context.element.wysiwygWindow.document.body.innerHTML;\r\n                } else {\r\n                    context.element.originElement.innerHTML = context.element.code.value;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description Gets the suneditor's context object. Contains settings, plugins, and cached element objects\r\n             * @returns {Object}\r\n             */\r\n            getContext: function () {\r\n                return context;\r\n            },\r\n\r\n            /**\r\n             * @description Gets the contents of the suneditor\r\n             * @returns {String}\r\n             */\r\n            getContent: function () {\r\n                let content = '';\r\n\r\n                if (context.element.wysiwygWindow.document.body.innerText.trim().length === 0) return content;\r\n\r\n                if (editor._variable.wysiwygActive) {\r\n                    content = context.element.wysiwygWindow.document.body.innerHTML;\r\n                } else {\r\n                    content = context.element.code.value;\r\n                }\r\n                return content;\r\n            },\r\n\r\n            /**\r\n             * @description Change the contents of the suneditor\r\n             * @param {string} content - Content to Input\r\n             */\r\n            setContent: function (content) {\r\n                const innerHTML = _convertContentForEditor(content);\r\n\r\n                if (editor._variable.wysiwygActive) {\r\n                    context.element.wysiwygWindow.document.body.innerHTML = innerHTML;\r\n                } else {\r\n                    context.element.code.value = innerHTML;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description Add content to the suneditor\r\n             * @param {string} content - to Input\r\n             */\r\n            appendContent: function (content) {\r\n                if (editor._variable.wysiwygActive) {\r\n                    const oP = document.createElement('P');\r\n                    oP.innerHTML = content;\r\n                    context.element.wysiwygWindow.document.body.appendChild(oP);\r\n                } else {\r\n                    context.element.code.value += content;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @description Disable the suneditor\r\n             */\r\n            disabled: function () {\r\n                context.tool.cover.style.display = 'block';\r\n                context.element.wysiwygWindow.document.body.setAttribute('contenteditable', false);\r\n            },\r\n\r\n            /**\r\n             * @description Enabled the suneditor\r\n             */\r\n            enabled: function () {\r\n                context.tool.cover.style.display = 'none';\r\n                context.element.wysiwygWindow.document.body.setAttribute('contenteditable', true);\r\n            },\r\n\r\n            /**\r\n             * @description Show the suneditor\r\n             */\r\n            show: function () {\r\n                const topAreaStyle = context.element.topArea.style;\r\n                topAreaStyle.cssText = editor._variable.originCssText;\r\n                if (topAreaStyle.display === 'none') topAreaStyle.display = 'block';\r\n            },\r\n\r\n            /**\r\n             * @description Hide the suneditor\r\n             */\r\n            hide: function () {\r\n                context.element.topArea.style.display = 'none';\r\n            },\r\n\r\n            /**\r\n             * @description Destroy the suneditor\r\n             */\r\n            destroy: function () {\r\n                /** remove event listeners */\r\n                context.tool.bar.removeEventListener('touchstart', event.touchstart_toolbar);\r\n                context.tool.bar.removeEventListener('touchmove', event.touchmove_toolbar);\r\n                context.tool.bar.removeEventListener('touchend', event.onClick_toolbar);\r\n                context.tool.bar.removeEventListener('click', event.onClick_toolbar);\r\n                context.element.wysiwygWindow.removeEventListener('mouseup', event.onMouseUp_wysiwyg);\r\n                context.element.wysiwygWindow.removeEventListener('keydown', event.onKeyDown_wysiwyg);\r\n                context.element.wysiwygWindow.removeEventListener('keyup', event.onKeyUp_wysiwyg);\r\n                context.element.wysiwygWindow.removeEventListener('scroll', event.onScroll_wysiwyg);\r\n                context.element.wysiwygWindow.removeEventListener('drop', event.onDrop_wysiwyg);\r\n                context.element.resizebar.removeEventListener('mousedown', event.onMouseDown_resizeBar);\r\n                window.removeEventListener('resize', event.resize_window);\r\n                \r\n                /** remove element */\r\n                context.element.topArea.parentNode.removeChild(context.element.topArea);\r\n                context.element.originElement.style.display = 'block';\r\n\r\n                context = null;\r\n                dom = null;\r\n                util = null;\r\n\r\n                this.save = null;\r\n                this.getContext = null;\r\n                this.getContent = null;\r\n                this.setContent = null;\r\n                this.appendContent = null;\r\n                this.disabled = null;\r\n                this.enabled = null;\r\n                this.show = null;\r\n                this.hide = null;\r\n                this.destroy = null;\r\n            }\r\n        };\r\n    };\r\n\r\n    /*** ↓↓↓↓↓↓ Create Suneditor ↓↓↓↓↓↓ */\r\n    /**\r\n     * @description Converts content into a format that can be placed in an editor\r\n     * @param content - content\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    function _convertContentForEditor(content) {\r\n        let tag, baseHtml, innerHTML = '';\r\n        tag = document.createRange().createContextualFragment(content.trim()).childNodes;\r\n\r\n        for (let i = 0, len = tag.length; i < len; i++) {\r\n            baseHtml = tag[i].outerHTML || tag[i].textContent;\r\n            if (!/^(?:P|TABLE|H[1-6]|DIV)$/i.test(tag[i].tagName)) {\r\n                innerHTML += '<P>' + baseHtml + '</p>';\r\n            } else {\r\n                innerHTML += baseHtml;\r\n            }\r\n        }\r\n\r\n        if (innerHTML.length === 0) innerHTML = '<p>&#65279</p>';\r\n\r\n        return innerHTML;\r\n    }\r\n\r\n    /**\r\n     * @description Suneditor's Default button list\r\n     * @private\r\n     */\r\n    function _defaultButtons (lang) {\r\n        return {\r\n            font: ['btn_font', lang.toolbar.font, 'font', 'submenu', '',\r\n                '<span class=\"txt sun-editor-font-family\">' + lang.toolbar.font + '</span><span class=\"arrow-more-down\"></span>'\r\n            ],\r\n            formatBlock: ['btn_format', lang.toolbar.formats, 'formatBlock', 'submenu', '',\r\n                '<span class=\"txt sun-editor-font-format\">' + lang.toolbar.formats + '</span><span class=\"arrow-more-down\"></span>'\r\n            ],\r\n\r\n            fontSize: ['btn_size', lang.toolbar.fontSize, 'fontSize', 'submenu', '',\r\n                '<span class=\"txt sun-editor-font-size\">' + lang.toolbar.fontSize + '</span><span class=\"arrow-more-down\"></span>'\r\n            ],\r\n\r\n            bold: ['sun-editor-id-bold', lang.toolbar.bold + '(Ctrl+B)', 'bold', '', '',\r\n                '<div class=\"icon-bold\"></div>'\r\n            ],\r\n\r\n            underline: ['sun-editor-id-underline', lang.toolbar.underline + '(Ctrl+U)', 'underline', '', '',\r\n                '<div class=\"icon-underline\"></div>'\r\n            ],\r\n\r\n            italic: ['sun-editor-id-italic', lang.toolbar.italic + '(Ctrl+I)', 'italic', '', '',\r\n                '<div class=\"icon-italic\"></div>'\r\n            ],\r\n\r\n            strike: ['sun-editor-id-strike', lang.toolbar.strike + '(Ctrl+SHIFT+S)', 'strikethrough', '', '',\r\n                '<div class=\"icon-strokethrough\"></div>'\r\n            ],\r\n\r\n            subscript: ['sun-editor-id-subscript', lang.toolbar.subscript, 'subscript', '', '',\r\n                '<div class=\"icon-subscript\"></div>'\r\n            ],\r\n\r\n            superscript: ['sun-editor-id-superscript', lang.toolbar.superscript, 'superscript', '', '',\r\n                '<div class=\"icon-superscript\"></div>'\r\n            ],\r\n\r\n            removeFormat: ['', lang.toolbar.removeFormat, 'removeFormat', '', '',\r\n                '<div class=\"icon-erase\"></div>'\r\n            ],\r\n\r\n            fontColor: ['', lang.toolbar.fontColor, 'fontColor', 'submenu', '',\r\n                '<div class=\"icon-fontColor\"></div>'\r\n            ],\r\n\r\n            hiliteColor: ['', lang.toolbar.hiliteColor, 'hiliteColor', 'submenu', '',\r\n                '<div class=\"icon-hiliteColor\"></div>'\r\n            ],\r\n\r\n            indent: ['', lang.toolbar.indent + '(Ctrl + [)', 'indent', '', '',\r\n                '<div class=\"icon-indent-right\"></div>'\r\n            ],\r\n\r\n            outdent: ['', lang.toolbar.outdent + '(Ctrl + ])', 'outdent', '', '',\r\n                '<div class=\"icon-indent-left\"></div>'\r\n            ],\r\n\r\n            align: ['btn_align', lang.toolbar.align, 'align', 'submenu', '',\r\n                '<div class=\"icon-align-left\"></div>'\r\n            ],\r\n\r\n            list: ['', lang.toolbar.list, 'list', 'submenu', '',\r\n                '<div class=\"icon-list-number\"></div>'\r\n            ],\r\n\r\n            horizontalRule: ['btn_line', lang.toolbar.horizontalRule, 'horizontalRule', 'submenu', '',\r\n                '<hr style=\"border-width: 1px 0 0; border-style: solid none none; border-color: black; border-image: initial; height: 1px;\" />' +\r\n                '<hr style=\"border-width: 1px 0 0; border-style: dotted none none; border-color: black; border-image: initial; height: 1px;\" />' +\r\n                '<hr style=\"border-width: 1px 0 0; border-style: dashed none none; border-color: black; border-image: initial; height: 1px;\" />'\r\n            ],\r\n\r\n            table: ['', lang.toolbar.table, 'table', 'submenu', '',\r\n                '<div class=\"icon-grid\"></div>'\r\n            ],\r\n\r\n            link: ['', lang.toolbar.link, 'link', 'dialog', '',\r\n                '<div class=\"icon-link\"></div>'\r\n            ],\r\n\r\n            image: ['', lang.toolbar.image, 'image', 'dialog', '',\r\n                '<div class=\"icon-image\"></div>'\r\n            ],\r\n\r\n            video: ['', lang.toolbar.video, 'video', 'dialog', '',\r\n                '<div class=\"icon-video\"></div>'\r\n            ],\r\n\r\n            fullScreen: ['', lang.toolbar.fullScreen, 'fullScreen', '', '',\r\n                '<div class=\"icon-expansion\"></div>'\r\n            ],\r\n\r\n            showBlocks: ['', lang.toolbar.showBlocks, 'showBlocks', '', '',\r\n                '<div class=\"icon-showBlocks\"></div>'\r\n            ],\r\n\r\n            codeView: ['', lang.toolbar.codeView, 'codeView', '', '',\r\n                '<div class=\"icon-code-view\"></div>'\r\n            ],\r\n\r\n            undo: ['', lang.toolbar.undo + ' (Ctrl+Z)', 'undo', '', '',\r\n                '<div class=\"icon-undo\"></div>'\r\n            ],\r\n\r\n            redo: ['', lang.toolbar.redo + ' (Ctrl+Y)', 'redo', '', '',\r\n                '<div class=\"icon-redo\"></div>'\r\n            ],\r\n\r\n            preview: ['', lang.toolbar.preview, 'preview', '', '',\r\n                '<div class=\"icon-preview\"></div>'\r\n            ],\r\n\r\n            print: ['', lang.toolbar.print, 'print', '', '',\r\n                '<div class=\"icon-print\"></div>'\r\n            ]\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Create a group div containing each module\r\n     * @returns {Element}\r\n     * @private\r\n     */\r\n    function _createModuleGroup() {\r\n        const oDiv = document.createElement('DIV');\r\n        oDiv.className = 'tool_module';\r\n\r\n        const oUl = document.createElement('UL');\r\n        oUl.className = 'editor_tool';\r\n        oDiv.appendChild(oUl);\r\n\r\n        return {\r\n            'div': oDiv,\r\n            'ul': oUl\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Create a button element\r\n     * @param {string} buttonClass - className in button\r\n     * @param {string} title - Title in button\r\n     * @param {string} dataCommand - The data-command property of the button\r\n     * @param {string} dataDisplay - The data-display property of the button ('dialog', 'submenu')\r\n     * @param {string} displayOption - Options for whether the range of the dialog is inside the editor or for the entire screen ('', 'full')\r\n     * @param {string} innerHTML - Html in button\r\n     * @returns {Element}\r\n     * @private\r\n     */\r\n    function _createButton(buttonClass, title, dataCommand, dataDisplay, displayOption, innerHTML) {\r\n        const oLi = document.createElement('LI');\r\n        const oButton = document.createElement('BUTTON');\r\n\r\n        oButton.setAttribute('type', 'button');\r\n        oButton.setAttribute('class', 'btn_editor ' + buttonClass);\r\n        oButton.setAttribute('title', title);\r\n        oButton.setAttribute('data-command', dataCommand);\r\n        oButton.setAttribute('data-display', dataDisplay);\r\n        oButton.setAttribute('data-option', displayOption);\r\n        oButton.innerHTML = innerHTML;\r\n        oLi.appendChild(oButton);\r\n\r\n        return {\r\n            'li': oLi,\r\n            'button': oButton\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Create editor HTML\r\n     * @param {array} buttonList - option.buttonList\r\n     * @private\r\n     */\r\n    function _createToolBar(doc, buttonList, lang) {\r\n        const tool_bar = doc.createElement('DIV');\r\n        tool_bar.className = 'sun-editor-id-toolbar';\r\n\r\n        const tool_cover = doc.createElement('DIV');\r\n        tool_cover.className = 'sun-editor-id-toolbar-cover';\r\n\r\n        /** create button list */\r\n        const plugins = {};\r\n        const defaultButtonList = _defaultButtons(lang);\r\n\r\n        let module = null;\r\n        let button = null;\r\n        let moduleElement = null;\r\n        let buttonElement = null;\r\n\r\n        for (let i = 0; i < buttonList.length; i++) {\r\n\r\n            const buttonGroup = buttonList[i];\r\n            moduleElement = _createModuleGroup();\r\n\r\n            /** button object */\r\n            if (typeof buttonGroup === 'object') {\r\n                for (let j = 0; j < buttonGroup.length; j++) {\r\n\r\n                    button = buttonGroup[j];\r\n                    if (typeof button === 'object') {\r\n                        if (typeof button.add === 'function') {\r\n                            module = defaultButtonList[button.name];\r\n                            plugins[button.name] = button;\r\n                        } else {\r\n                            module = [button.className, button.title, button.dataCommand, button.dataDisplay, button.displayOption, button.innerHTML];\r\n                        }\r\n                    } else {\r\n                        module = defaultButtonList[button];\r\n                    }\r\n\r\n                    buttonElement = _createButton(module[0], module[1], module[2], module[3], module[4], module[5]);\r\n                    moduleElement.ul.appendChild(buttonElement.li);\r\n\r\n                    if (plugins[button.name]) {\r\n                        plugins[button.name].buttonElement = buttonElement.button;\r\n                    }\r\n                }\r\n\r\n                tool_bar.appendChild(moduleElement.div);\r\n            }\r\n            /** line break  */\r\n            else if (/^\\/$/.test(buttonGroup)) {\r\n                const enterDiv = doc.createElement('DIV');\r\n                enterDiv.className = 'tool_module_enter';\r\n                tool_bar.appendChild(enterDiv);\r\n            }\r\n        }\r\n\r\n        return {\r\n            'element': tool_bar,\r\n            'plugins': plugins\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description document create - call _createToolBar()\r\n     * @param {element} element - textarea\r\n     * @param {json} options - user options\r\n     * @returns {{constructed: {_top: HTMLElement, _relative: HTMLElement, _toolBar: HTMLElement, _editorArea: HTMLElement, _resizeBar: HTMLElement, _loading: HTMLElement, _resizeBack: HTMLElement}, options: *}}\r\n     * @private\r\n     */\r\n    function _Constructor(element, options) {\r\n        if (typeof options !== 'object') options = {};\r\n\r\n        /** language setting */\r\n        const lang = options.lang || SUNEDITOR.lang || SUNEDITOR.defaultLang;\r\n\r\n        /** user options */\r\n        options.videoX = options.videoX || 560;\r\n        options.videoY = options.videoY || 315;\r\n        options.imageFileInput = options.imageFileInput === undefined ? true : options.imageFileInput;\r\n        options.imageUrlInput = (options.imageUrlInput === undefined || !options.imageFileInput) ? true : options.imageUrlInput;\r\n        options.imageSize = options.imageSize || 350;\r\n        options.imageUploadUrl = options.imageUploadUrl || null;\r\n        options.font = options.font || null;\r\n        options.fontSize = options.fontSize || null;\r\n        options.height = /^\\d+/.test(options.height) ? (/^\\d+$/.test(options.height) ? options.height + 'px' : options.height) : element.clientHeight + 'px';\r\n        options.showPathLabel = typeof options.showPathLabel === 'boolean' ? options.showPathLabel : true;\r\n        options.buttonList = options.buttonList || [\r\n            ['undo', 'redo'],\r\n            ['font', 'fontSize', 'formatBlock'],\r\n            ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'],\r\n            ['removeFormat'],\r\n            '/',\r\n            ['fontColor', 'hiliteColor'],\r\n            ['indent', 'outdent'],\r\n            ['align', 'horizontalRule', 'list', 'table'],\r\n            ['link', 'image', 'video'],\r\n            ['fullScreen', 'showBlocks', 'codeView'],\r\n            ['preview', 'print']\r\n        ];\r\n\r\n        /** editor seting options */\r\n        options.width = /^\\d+/.test(options.width) ? (/^\\d+$/.test(options.width) ? options.width + 'px' : options.width) : (/%|auto/.test(element.style.width) ? element.style.width : element.clientWidth + 'px');\r\n        options.display = options.display || (element.style.display === 'none' || !element.style.display ? 'block' : element.style.display);\r\n\r\n        const doc = document;\r\n\r\n        /** suneditor div */\r\n        const top_div = doc.createElement('DIV');\r\n        top_div.className = 'sun-editor';\r\n        top_div.id = 'suneditor_' + element.id;\r\n        top_div.style.width = options.width;\r\n        top_div.style.display = options.display;\r\n\r\n        /** relative div */\r\n        const relative = doc.createElement('DIV');\r\n        relative.className = 'sun-editor-container';\r\n\r\n        /** tool bar */\r\n        const tool_bar = _createToolBar(doc, options.buttonList, lang);\r\n\r\n        /** inner editor div */\r\n        const editor_div = doc.createElement('DIV');\r\n        editor_div.className = 'sun-editor-id-editorArea';\r\n        editor_div.style.height = options.height;\r\n\r\n        /** iframe */\r\n        const iframe = doc.createElement('IFRAME');\r\n        iframe.allowFullscreen = true;\r\n        iframe.frameBorder = 0;\r\n        iframe.className = 'input_editor sun-editor-id-wysiwyg';\r\n        iframe.style.display = 'block';\r\n\r\n        /** textarea for code view */\r\n        const textarea = doc.createElement('TEXTAREA');\r\n        textarea.className = 'input_editor html sun-editor-id-code';\r\n        textarea.style.display = 'none';\r\n\r\n        iframe.addEventListener('load', function () {\r\n            this.setAttribute('scrolling', 'auto');\r\n            this.contentWindow.document.head.innerHTML = '' +\r\n                '<meta charset=\"utf-8\" />' +\r\n                '<title>SunEditor</title>' +\r\n                '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + SUNEDITOR.util.getBasePath + 'css/suneditor-contents.css\">';\r\n            this.contentWindow.document.body.className = 'sun-editor-editable';\r\n            this.contentWindow.document.body.setAttribute('contenteditable', true);\r\n\r\n            this.contentWindow.document.body.innerHTML = _convertContentForEditor(element.value);\r\n        });\r\n\r\n        /** resize bar */\r\n        const resize_bar = doc.createElement('DIV');\r\n        resize_bar.className = 'sun-editor-id-resizeBar';\r\n\r\n        /** navigation */\r\n        const navigation = doc.createElement('SPAN');\r\n        navigation.className = 'sun-editor-id-navigation';\r\n\r\n        /** loading box */\r\n        const loading_box = doc.createElement('DIV');\r\n        loading_box.className = 'sun-editor-id-loading';\r\n        loading_box.innerHTML = '<div class=\"loading-effect\"></div>';\r\n\r\n        /** resize operation background */\r\n        const resize_back = doc.createElement('DIV');\r\n        resize_back.className = 'sun-editor-id-resize-background';\r\n\r\n        /** append html */\r\n        editor_div.appendChild(iframe);\r\n        editor_div.appendChild(textarea);\r\n        resize_bar.appendChild(navigation);\r\n        relative.appendChild(tool_bar.element);\r\n        relative.appendChild(editor_div);\r\n        relative.appendChild(resize_bar);\r\n        relative.appendChild(resize_back);\r\n        relative.appendChild(loading_box);\r\n        top_div.appendChild(relative);\r\n\r\n        return {\r\n            constructed: {\r\n                _top: top_div,\r\n                _relative: relative,\r\n                _toolBar: tool_bar.element,\r\n                _editorArea: editor_div,\r\n                _resizeBar: resize_bar,\r\n                _navigation: navigation,\r\n                _loading: loading_box,\r\n                _resizeBack: resize_back\r\n            },\r\n            options: options,\r\n            plugins: tool_bar.plugins,\r\n            modules: options.modules || [],\r\n            lang: lang\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Elements and variables you should have\r\n     * @param {HTMLElement} element - textarea element\r\n     * @param {object} cons - Toolbar element you created\r\n     * @param {json} options - user options\r\n     * @returns Elements, variables of the editor\r\n     * @private\r\n     */\r\n    function _Context(element, cons, options) {\r\n        return {\r\n            element: {\r\n                originElement: element,\r\n                topArea: cons._top,\r\n                relative: cons._relative,\r\n                resizebar: cons._resizeBar,\r\n                navigation: cons._navigation,\r\n                editorArea: cons._editorArea,\r\n                wysiwygWindow: cons._editorArea.getElementsByClassName('sun-editor-id-wysiwyg')[0].contentWindow,\r\n                wysiwygElement: cons._editorArea.getElementsByClassName('sun-editor-id-wysiwyg')[0],\r\n                code: cons._editorArea.getElementsByClassName('sun-editor-id-code')[0],\r\n                loading: cons._loading,\r\n                resizeBackground: cons._resizeBack\r\n            },\r\n            tool: {\r\n                bar: cons._toolBar,\r\n                cover: cons._toolBar.getElementsByClassName('sun-editor-id-toolbar-cover')[0],\r\n                bold: cons._toolBar.getElementsByClassName('sun-editor-id-bold')[0],\r\n                underline: cons._toolBar.getElementsByClassName('sun-editor-id-underline')[0],\r\n                italic: cons._toolBar.getElementsByClassName('sun-editor-id-italic')[0],\r\n                strike: cons._toolBar.getElementsByClassName('sun-editor-id-strike')[0],\r\n                subscript: cons._toolBar.getElementsByClassName('sun-editor-id-subscript')[0],\r\n                superscript: cons._toolBar.getElementsByClassName('sun-editor-id-superscript')[0],\r\n                font: cons._toolBar.getElementsByClassName('sun-editor-font-family')[0],\r\n                format: cons._toolBar.getElementsByClassName('sun-editor-font-format')[0],\r\n                fontSize: cons._toolBar.getElementsByClassName('sun-editor-font-size')[0]\r\n            },\r\n            user: {\r\n                videoX: options.videoX,\r\n                videoY: options.videoY,\r\n                imageFileInput: options.imageFileInput,\r\n                imageUrlInput: options.imageUrlInput,\r\n                imageSize: options.imageSize,\r\n                imageUploadUrl: options.imageUploadUrl,\r\n                font: options.font,\r\n                fontSize: options.fontSize,\r\n                height: options.height.match(/\\d+/)[0],\r\n                showPathLabel: options.showPathLabel\r\n            },\r\n            dialog: {},\r\n            submenu: {}\r\n        };\r\n    }\r\n\r\n    /**\r\n     * @description Create the suneditor\r\n     * @param {string} elementId - textarea Id\r\n     * @param {json} options - user options\r\n     * @returns {{save: save, getContent: getContent, setContent: setContent, appendContent: appendContent, disabled: disabled, enabled: enabled, show: show, hide: hide, destroy: destroy}}\r\n     */\r\n    SUNEDITOR.create = function (idOrElement, options) {\r\n        const element = typeof idOrElement === 'string' ? document.getElementById(idOrElement) : idOrElement;\r\n\r\n        if (!element) {\r\n            if (typeof idOrElement === 'string') {\r\n                throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:\"' + idOrElement + '\")');\r\n            }\r\n\r\n            throw Error('[SUNEDITOR.create.fail] suneditor requires textarea\\'s element or id value');\r\n        }\r\n\r\n        const cons = _Constructor(element, options);\r\n\r\n        if (document.getElementById(cons.constructed._top.id)) {\r\n            throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:\"' + cons.constructed._top.id + '\")');\r\n        }\r\n\r\n        element.style.display = 'none';\r\n        cons.constructed._top.style.display = 'block';\r\n\r\n        /** Create to sibling node */\r\n        if (typeof element.nextElementSibling === 'object') {\r\n            element.parentNode.insertBefore(cons.constructed._top, element.nextElementSibling);\r\n        } else {\r\n            element.parentNode.appendChild(cons.constructed._top);\r\n        }\r\n\r\n        return core(_Context(element, cons.constructed, cons.options), cons.modules, cons.plugins, cons.lang);\r\n    };\r\n\r\n    if (typeof noGlobal === typeof undefined) {\r\n        window.SUNEDITOR = SUNEDITOR;\r\n    }\r\n\r\n    return SUNEDITOR;\r\n}));\r\n\n\n//# sourceURL=webpack:///./src/suneditor.js?")}});