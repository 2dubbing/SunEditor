/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./sample/customize_ex.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./sample/customize_ex.js":
/*!********************************!*\
  !*** ./sample/customize_ex.js ***!
  \********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_suneditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../src/suneditor */ \"./src/suneditor.js\");\n/* harmony import */ var _test_dev_custom_plugin_submenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../test/dev/custom_plugin_submenu */ \"./test/dev/custom_plugin_submenu.js\");\n// import '../src/assets/css/suneditor.css'\n// import '../src/assets/css/suneditor-contents.css'\n\n\n_src_suneditor__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create(document.getElementById('ex_submenu'), {\n  plugins: [_test_dev_custom_plugin_submenu__WEBPACK_IMPORTED_MODULE_1__[\"default\"]],\n  buttonList: [['undo', 'redo'], [{\n    // plugin's name attribute\n    name: 'custom_plugin_submenu',\n    // name of the plugin to be recognized by the toolbar.\n    // It must be the same as the name attribute of the plugin \n    dataCommand: 'custom_plugin_submenu',\n    // button's class (\"btn_editor\" class is registered, basic button click css is applied.)\n    buttonClass: 'btn_editor',\n    // HTML title attribute\n    title: 'Custom plugin of the submenu',\n    // 'submenu' or 'dialog' or '' (command button)\n    dataDisplay: 'submenu',\n    // 'full' or '' (Only applies to dialog plugin.)\n    displayOption: '',\n    // HTML to be append to button\n    innerHTML: '<div class=\"icon-map-pin\"></div>'\n  }]]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYW1wbGUvY3VzdG9taXplX2V4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc2FtcGxlL2N1c3RvbWl6ZV9leC5qcz9jZTNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAnLi4vc3JjL2Fzc2V0cy9jc3Mvc3VuZWRpdG9yLmNzcydcclxuLy8gaW1wb3J0ICcuLi9zcmMvYXNzZXRzL2Nzcy9zdW5lZGl0b3ItY29udGVudHMuY3NzJ1xyXG5cclxuaW1wb3J0IHN1bmVkaXRvciBmcm9tICcuLi9zcmMvc3VuZWRpdG9yJ1xyXG5pbXBvcnQgY3VzdG9tX3BsdWdpbl9zdWJtZW51IGZyb20gJy4uL3Rlc3QvZGV2L2N1c3RvbV9wbHVnaW5fc3VibWVudSdcclxuXHJcbnN1bmVkaXRvci5jcmVhdGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4X3N1Ym1lbnUnKSwge1xyXG4gICAgcGx1Z2luczogW1xyXG4gICAgICAgIGN1c3RvbV9wbHVnaW5fc3VibWVudVxyXG4gICAgXSxcclxuICAgIGJ1dHRvbkxpc3Q6IFtcclxuICAgICAgICBbJ3VuZG8nLCAncmVkbyddLFxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gcGx1Z2luJ3MgbmFtZSBhdHRyaWJ1dGVcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdjdXN0b21fcGx1Z2luX3N1Ym1lbnUnLCBcclxuICAgICAgICAgICAgICAgIC8vIG5hbWUgb2YgdGhlIHBsdWdpbiB0byBiZSByZWNvZ25pemVkIGJ5IHRoZSB0b29sYmFyLlxyXG4gICAgICAgICAgICAgICAgLy8gSXQgbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgbmFtZSBhdHRyaWJ1dGUgb2YgdGhlIHBsdWdpbiBcclxuICAgICAgICAgICAgICAgIGRhdGFDb21tYW5kOiAnY3VzdG9tX3BsdWdpbl9zdWJtZW51JyxcclxuICAgICAgICAgICAgICAgIC8vIGJ1dHRvbidzIGNsYXNzIChcImJ0bl9lZGl0b3JcIiBjbGFzcyBpcyByZWdpc3RlcmVkLCBiYXNpYyBidXR0b24gY2xpY2sgY3NzIGlzIGFwcGxpZWQuKVxyXG4gICAgICAgICAgICAgICAgYnV0dG9uQ2xhc3M6J2J0bl9lZGl0b3InLCBcclxuICAgICAgICAgICAgICAgIC8vIEhUTUwgdGl0bGUgYXR0cmlidXRlXHJcbiAgICAgICAgICAgICAgICB0aXRsZTonQ3VzdG9tIHBsdWdpbiBvZiB0aGUgc3VibWVudScsIFxyXG4gICAgICAgICAgICAgICAgLy8gJ3N1Ym1lbnUnIG9yICdkaWFsb2cnIG9yICcnIChjb21tYW5kIGJ1dHRvbilcclxuICAgICAgICAgICAgICAgIGRhdGFEaXNwbGF5OidzdWJtZW51JyxcclxuICAgICAgICAgICAgICAgIC8vICdmdWxsJyBvciAnJyAoT25seSBhcHBsaWVzIHRvIGRpYWxvZyBwbHVnaW4uKVxyXG4gICAgICAgICAgICAgICAgZGlzcGxheU9wdGlvbjonJyxcclxuICAgICAgICAgICAgICAgIC8vIEhUTUwgdG8gYmUgYXBwZW5kIHRvIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgaW5uZXJIVE1MOic8ZGl2IGNsYXNzPVwiaWNvbi1tYXAtcGluXCI+PC9kaXY+J1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXVxyXG4gICAgXVxyXG59KTsiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZkE7QUFQQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./sample/customize_ex.js\n");

/***/ }),

/***/ "./src/lang/en.js":
/*!************************!*\
  !*** ./src/lang/en.js ***!
  \************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  toolbar: {\n    font: 'Font',\n    formats: 'Formats',\n    fontSize: 'Size',\n    bold: 'Bold',\n    underline: 'Underline',\n    italic: 'Italic',\n    strike: 'Strike',\n    subscript: 'Subscript',\n    superscript: 'Superscript',\n    removeFormat: 'Remove Format',\n    fontColor: 'Font Color',\n    hiliteColor: 'Hilite Color',\n    indent: 'Indent',\n    outdent: 'Outdent',\n    align: 'Align',\n    alignLeft: 'Align left',\n    alignRight: 'Align right',\n    alignCenter: 'Align center',\n    justifyFull: 'Justify full',\n    list: 'list',\n    orderList: 'Ordered list',\n    unorderList: 'Unordered list',\n    horizontalRule: 'horizontal line',\n    hr_solid: 'solid',\n    hr_dotted: 'dotted',\n    hr_dashed: 'dashed',\n    table: 'Table',\n    link: 'Link',\n    image: 'Image',\n    video: 'Video',\n    fullScreen: 'Full screen',\n    showBlocks: 'Show blocks',\n    codeView: 'Code view',\n    undo: 'Undo',\n    redo: 'Redo',\n    preview: 'Preview',\n    print: 'print',\n    tag_p: 'Paragraph',\n    tag_div: 'Normal (DIV)',\n    tag_h: 'Header',\n    tag_quote: 'Quote',\n    pre: 'Code'\n  },\n  dialogBox: {\n    linkBox: {\n      title: 'Insert Link',\n      url: 'URL to link',\n      text: 'Text to display',\n      newWindowCheck: 'Open in new window'\n    },\n    imageBox: {\n      title: 'Insert image',\n      file: 'Select from files',\n      url: 'Image URL',\n      caption: 'Insert image description',\n      altText: 'Alternative text'\n    },\n    videoBox: {\n      title: 'Insert Video',\n      url: 'Media embed URL, YouTube'\n    },\n    resize100: 'Resize 100%',\n    resize75: 'Resize 75%',\n    resize50: 'Resize 50%',\n    resize25: 'Resize 25%',\n    close: 'Close',\n    remove: 'Remove',\n    submitButton: 'Submit',\n    revertButton: 'Revert',\n    proportion: 'constrain proportions',\n    width: 'Width',\n    height: 'Height',\n    basic: 'Basic',\n    left: 'Left',\n    right: 'Right',\n    center: 'Center'\n  },\n  controller: {\n    edit: 'Edit',\n    remove: 'Remove',\n    insertRowAbove: 'Insert row above',\n    insertRowBelow: 'Insert row below',\n    deleteRow: 'Delete row',\n    insertColumnBefore: 'Insert column before',\n    insertColumnAfter: 'Insert column after',\n    deleteColumn: 'Delete column'\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFuZy9lbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9sYW5nL2VuLmpzPzNmYWIiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogd3lzaXd5ZyB3ZWIgZWRpdG9yXHJcbiAqXHJcbiAqIHN1bmVkaXRvci5qc1xyXG4gKiBDb3B5cmlnaHQgMjAxNyBKaUhvbmcgTGVlLlxyXG4gKiBNSVQgbGljZW5zZS5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBmb250OiAnRm9udCcsXHJcbiAgICAgICAgZm9ybWF0czogJ0Zvcm1hdHMnLFxyXG4gICAgICAgIGZvbnRTaXplOiAnU2l6ZScsXHJcbiAgICAgICAgYm9sZDogJ0JvbGQnLFxyXG4gICAgICAgIHVuZGVybGluZTogJ1VuZGVybGluZScsXHJcbiAgICAgICAgaXRhbGljOiAnSXRhbGljJyxcclxuICAgICAgICBzdHJpa2U6ICdTdHJpa2UnLFxyXG4gICAgICAgIHN1YnNjcmlwdDogJ1N1YnNjcmlwdCcsXHJcbiAgICAgICAgc3VwZXJzY3JpcHQ6ICdTdXBlcnNjcmlwdCcsXHJcbiAgICAgICAgcmVtb3ZlRm9ybWF0OiAnUmVtb3ZlIEZvcm1hdCcsXHJcbiAgICAgICAgZm9udENvbG9yOiAnRm9udCBDb2xvcicsXHJcbiAgICAgICAgaGlsaXRlQ29sb3I6ICdIaWxpdGUgQ29sb3InLFxyXG4gICAgICAgIGluZGVudDogJ0luZGVudCcsXHJcbiAgICAgICAgb3V0ZGVudDogJ091dGRlbnQnLFxyXG4gICAgICAgIGFsaWduOiAnQWxpZ24nLFxyXG4gICAgICAgIGFsaWduTGVmdDogJ0FsaWduIGxlZnQnLFxyXG4gICAgICAgIGFsaWduUmlnaHQ6ICdBbGlnbiByaWdodCcsXHJcbiAgICAgICAgYWxpZ25DZW50ZXI6ICdBbGlnbiBjZW50ZXInLFxyXG4gICAgICAgIGp1c3RpZnlGdWxsOiAnSnVzdGlmeSBmdWxsJyxcclxuICAgICAgICBsaXN0OiAnbGlzdCcsXHJcbiAgICAgICAgb3JkZXJMaXN0OiAnT3JkZXJlZCBsaXN0JyxcclxuICAgICAgICB1bm9yZGVyTGlzdDogJ1Vub3JkZXJlZCBsaXN0JyxcclxuICAgICAgICBob3Jpem9udGFsUnVsZTogJ2hvcml6b250YWwgbGluZScsXHJcbiAgICAgICAgaHJfc29saWQ6ICdzb2xpZCcsXHJcbiAgICAgICAgaHJfZG90dGVkOiAnZG90dGVkJyxcclxuICAgICAgICBocl9kYXNoZWQ6ICdkYXNoZWQnLFxyXG4gICAgICAgIHRhYmxlOiAnVGFibGUnLFxyXG4gICAgICAgIGxpbms6ICdMaW5rJyxcclxuICAgICAgICBpbWFnZTogJ0ltYWdlJyxcclxuICAgICAgICB2aWRlbzogJ1ZpZGVvJyxcclxuICAgICAgICBmdWxsU2NyZWVuOiAnRnVsbCBzY3JlZW4nLFxyXG4gICAgICAgIHNob3dCbG9ja3M6ICdTaG93IGJsb2NrcycsXHJcbiAgICAgICAgY29kZVZpZXc6ICdDb2RlIHZpZXcnLFxyXG4gICAgICAgIHVuZG86ICdVbmRvJyxcclxuICAgICAgICByZWRvOiAnUmVkbycsXHJcbiAgICAgICAgcHJldmlldzogJ1ByZXZpZXcnLFxyXG4gICAgICAgIHByaW50OiAncHJpbnQnLFxyXG4gICAgICAgIHRhZ19wOiAnUGFyYWdyYXBoJyxcclxuICAgICAgICB0YWdfZGl2OiAnTm9ybWFsIChESVYpJyxcclxuICAgICAgICB0YWdfaDogJ0hlYWRlcicsXHJcbiAgICAgICAgdGFnX3F1b3RlOiAnUXVvdGUnLFxyXG4gICAgICAgIHByZTogJ0NvZGUnXHJcbiAgICB9LFxyXG4gICAgZGlhbG9nQm94OiB7XHJcbiAgICAgICAgbGlua0JveDoge1xyXG4gICAgICAgICAgICB0aXRsZTogJ0luc2VydCBMaW5rJyxcclxuICAgICAgICAgICAgdXJsOiAnVVJMIHRvIGxpbmsnLFxyXG4gICAgICAgICAgICB0ZXh0OiAnVGV4dCB0byBkaXNwbGF5JyxcclxuICAgICAgICAgICAgbmV3V2luZG93Q2hlY2s6ICdPcGVuIGluIG5ldyB3aW5kb3cnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbWFnZUJveDoge1xyXG4gICAgICAgICAgICB0aXRsZTogJ0luc2VydCBpbWFnZScsXHJcbiAgICAgICAgICAgIGZpbGU6ICdTZWxlY3QgZnJvbSBmaWxlcycsXHJcbiAgICAgICAgICAgIHVybDogJ0ltYWdlIFVSTCcsXHJcbiAgICAgICAgICAgIGNhcHRpb246ICdJbnNlcnQgaW1hZ2UgZGVzY3JpcHRpb24nLFxyXG4gICAgICAgICAgICBhbHRUZXh0OiAnQWx0ZXJuYXRpdmUgdGV4dCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZpZGVvQm94OiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnSW5zZXJ0IFZpZGVvJyxcclxuICAgICAgICAgICAgdXJsOiAnTWVkaWEgZW1iZWQgVVJMLCBZb3VUdWJlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzaXplMTAwOiAnUmVzaXplIDEwMCUnLFxyXG4gICAgICAgIHJlc2l6ZTc1OiAnUmVzaXplIDc1JScsXHJcbiAgICAgICAgcmVzaXplNTA6ICdSZXNpemUgNTAlJyxcclxuICAgICAgICByZXNpemUyNTogJ1Jlc2l6ZSAyNSUnLFxyXG4gICAgICAgIGNsb3NlOiAnQ2xvc2UnLFxyXG4gICAgICAgIHJlbW92ZTogJ1JlbW92ZScsXHJcbiAgICAgICAgc3VibWl0QnV0dG9uOiAnU3VibWl0JyxcclxuICAgICAgICByZXZlcnRCdXR0b246ICdSZXZlcnQnLFxyXG4gICAgICAgIHByb3BvcnRpb246ICdjb25zdHJhaW4gcHJvcG9ydGlvbnMnLFxyXG4gICAgICAgIHdpZHRoOiAnV2lkdGgnLFxyXG4gICAgICAgIGhlaWdodDogJ0hlaWdodCcsXHJcbiAgICAgICAgYmFzaWM6ICdCYXNpYycsXHJcbiAgICAgICAgbGVmdDogJ0xlZnQnLFxyXG4gICAgICAgIHJpZ2h0OiAnUmlnaHQnLFxyXG4gICAgICAgIGNlbnRlcjogJ0NlbnRlcidcclxuICAgIH0sXHJcbiAgICBjb250cm9sbGVyOiB7XHJcbiAgICAgICAgZWRpdDogJ0VkaXQnLFxyXG4gICAgICAgIHJlbW92ZTogJ1JlbW92ZScsXHJcbiAgICAgICAgaW5zZXJ0Um93QWJvdmU6ICdJbnNlcnQgcm93IGFib3ZlJyxcclxuICAgICAgICBpbnNlcnRSb3dCZWxvdzogJ0luc2VydCByb3cgYmVsb3cnLFxyXG4gICAgICAgIGRlbGV0ZVJvdzogJ0RlbGV0ZSByb3cnLFxyXG4gICAgICAgIGluc2VydENvbHVtbkJlZm9yZTogJ0luc2VydCBjb2x1bW4gYmVmb3JlJyxcclxuICAgICAgICBpbnNlcnRDb2x1bW5BZnRlcjogJ0luc2VydCBjb2x1bW4gYWZ0ZXInLFxyXG4gICAgICAgIGRlbGV0ZUNvbHVtbjogJ0RlbGV0ZSBjb2x1bW4nXHJcbiAgICB9XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUExQ0E7QUE0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBaENBO0FBa0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBL0VBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lang/en.js\n");

/***/ }),

/***/ "./src/lib/constructor.js":
/*!********************************!*\
  !*** ./src/lib/constructor.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\r\n * @description document create - call _createToolBar()\r\n * @param {element} element - textarea\r\n * @param {JSON} options - user options\r\n * @param {JSON} lang - user language\r\n * @param {JSON} _lang - plugins object\r\n * @param {JSON} util - util object\r\n * @returns {JSON}\r\n * @private\r\n */\n\nconst _Constructor = {\n  init: function (element, options, lang, _plugins, util) {\n    if (typeof options !== 'object') options = {};\n    /** user options */\n\n    options.lang = lang;\n    options.videoX = options.videoX || 560;\n    options.videoY = options.videoY || 315;\n    options.imageFileInput = options.imageFileInput === undefined ? true : options.imageFileInput;\n    options.imageUrlInput = options.imageUrlInput === undefined || !options.imageFileInput ? true : options.imageUrlInput;\n    options.imageSize = options.imageSize || 350;\n    options.imageUploadUrl = options.imageUploadUrl || null;\n    options.font = options.font || null;\n    options.fontSize = options.fontSize || null;\n    options.height = /^\\d+/.test(options.height) ? /^\\d+$/.test(options.height) ? options.height + 'px' : options.height : element.clientHeight + 'px';\n    options.showPathLabel = typeof options.showPathLabel === 'boolean' ? options.showPathLabel : true;\n    options.popupDisplay = options.popupDisplay || '';\n    options.buttonList = options.buttonList || [['undo', 'redo'], ['bold', 'underline', 'italic', 'strike', 'subscript', 'superscript'], ['removeFormat'], ['indent', 'outdent'], ['fullScreen', 'showBlocks', 'codeView'], ['preview', 'print']];\n    /** editor seting options */\n\n    options.width = /^\\d+/.test(options.width) ? /^\\d+$/.test(options.width) ? options.width + 'px' : options.width : /%|auto/.test(element.style.width) ? element.style.width : element.clientWidth + 'px';\n    options.display = options.display || (element.style.display === 'none' || !element.style.display ? 'block' : element.style.display);\n    const doc = document;\n    /** suneditor div */\n\n    const top_div = doc.createElement('DIV');\n    top_div.className = 'sun-editor';\n    top_div.id = 'suneditor_' + element.id;\n    top_div.style.width = options.width;\n    top_div.style.display = options.display;\n    /** relative div */\n\n    const relative = doc.createElement('DIV');\n    relative.className = 'sun-editor-container';\n    /** tool bar */\n\n    const tool_bar = this._createToolBar(doc, options.buttonList, _plugins, lang, options.popupDisplay);\n    /** inner editor div */\n\n\n    const editor_div = doc.createElement('DIV');\n    editor_div.className = 'sun-editor-id-editorArea';\n    editor_div.style.height = options.height;\n    /** wysiwyg div */\n\n    const wysiwyg_div = doc.createElement('DIV');\n    wysiwyg_div.setAttribute('contenteditable', true);\n    wysiwyg_div.setAttribute('scrolling', 'auto');\n    wysiwyg_div.className = 'input_editor sun-editor-id-wysiwyg sun-editor-editable';\n    wysiwyg_div.style.display = 'block';\n    wysiwyg_div.innerHTML = util.convertContentsForEditor(element.value);\n    /** textarea for code view */\n\n    const textarea = doc.createElement('TEXTAREA');\n    textarea.className = 'input_editor sun-editor-id-code';\n    textarea.style.display = 'none';\n    /** resize bar */\n\n    const resize_bar = doc.createElement('DIV');\n    resize_bar.className = 'sun-editor-id-resizeBar sun-editor-common';\n    /** navigation */\n\n    const navigation = doc.createElement('SPAN');\n    navigation.className = 'sun-editor-id-navigation sun-editor-common';\n    /** loading box */\n\n    const loading_box = doc.createElement('DIV');\n    loading_box.className = 'sun-editor-id-loading sun-editor-common';\n    loading_box.innerHTML = '<div class=\"loading-effect\"></div>';\n    /** resize operation background */\n\n    const resize_back = doc.createElement('DIV');\n    resize_back.className = 'sun-editor-id-resize-background';\n    /** append html */\n\n    editor_div.appendChild(wysiwyg_div);\n    editor_div.appendChild(textarea);\n    resize_bar.appendChild(navigation);\n    relative.appendChild(tool_bar.element);\n    relative.appendChild(editor_div);\n    relative.appendChild(resize_bar);\n    relative.appendChild(resize_back);\n    relative.appendChild(loading_box);\n    top_div.appendChild(relative);\n    return {\n      constructed: {\n        _top: top_div,\n        _relative: relative,\n        _toolBar: tool_bar.element,\n        _editorArea: editor_div,\n        _wysiwygArea: wysiwyg_div,\n        _codeArea: textarea,\n        _resizeBar: resize_bar,\n        _navigation: navigation,\n        _loading: loading_box,\n        _resizeBack: resize_back\n      },\n      options: options,\n      plugins: tool_bar.plugins\n    };\n  },\n\n  /**\r\n   * @description Suneditor's Default button list\r\n   * @private\r\n   */\n  _defaultButtons: function (lang, popupDisplay) {\n    return {\n      /** command */\n      bold: ['sun-editor-id-bold', lang.toolbar.bold + '(Ctrl+B)', 'bold', '', '', '<div class=\"icon-bold\"></div>'],\n      underline: ['sun-editor-id-underline', lang.toolbar.underline + '(Ctrl+U)', 'underline', '', '', '<div class=\"icon-underline\"></div>'],\n      italic: ['sun-editor-id-italic', lang.toolbar.italic + '(Ctrl+I)', 'italic', '', '', '<div class=\"icon-italic\"></div>'],\n      strike: ['sun-editor-id-strike', lang.toolbar.strike + '(Ctrl+SHIFT+S)', 'strikethrough', '', '', '<div class=\"icon-strokethrough\"></div>'],\n      subscript: ['sun-editor-id-subscript', lang.toolbar.subscript, 'subscript', '', '', '<div class=\"icon-subscript\"></div>'],\n      superscript: ['sun-editor-id-superscript', lang.toolbar.superscript, 'superscript', '', '', '<div class=\"icon-superscript\"></div>'],\n      removeFormat: ['', lang.toolbar.removeFormat, 'removeFormat', '', '', '<div class=\"icon-erase\"></div>'],\n      indent: ['', lang.toolbar.indent + '(Ctrl + [)', 'indent', '', '', '<div class=\"icon-indent-right\"></div>'],\n      outdent: ['', lang.toolbar.outdent + '(Ctrl + ])', 'outdent', '', '', '<div class=\"icon-indent-left\"></div>'],\n      fullScreen: ['code-view-enabled', lang.toolbar.fullScreen, 'fullScreen', '', '', '<div class=\"icon-expansion\"></div>'],\n      showBlocks: ['', lang.toolbar.showBlocks, 'showBlocks', '', '', '<div class=\"icon-showBlocks\"></div>'],\n      codeView: ['code-view-enabled', lang.toolbar.codeView, 'codeView', '', '', '<div class=\"icon-code-view\"></div>'],\n      undo: ['code-view-enabled', lang.toolbar.undo + ' (Ctrl+Z)', 'undo', '', '', '<div class=\"icon-undo\"></div>'],\n      redo: ['code-view-enabled', lang.toolbar.redo + ' (Ctrl+Y)', 'redo', '', '', '<div class=\"icon-redo\"></div>'],\n      preview: ['', lang.toolbar.preview, 'preview', '', '', '<div class=\"icon-preview\"></div>'],\n      print: ['', lang.toolbar.print, 'print', '', '', '<div class=\"icon-print\"></div>'],\n\n      /** plugins - submenu */\n      font: ['btn_font', lang.toolbar.font, 'font', 'submenu', '', '<span class=\"txt sun-editor-font-family\">' + lang.toolbar.font + '</span><span class=\"icon-arrow-down\"></span>'],\n      formatBlock: ['btn_format', lang.toolbar.formats, 'formatBlock', 'submenu', '', '<span class=\"txt sun-editor-font-format\">' + lang.toolbar.formats + '</span><span class=\"icon-arrow-down\"></span>'],\n      fontSize: ['btn_size', lang.toolbar.fontSize, 'fontSize', 'submenu', '', '<span class=\"txt sun-editor-font-size\">' + lang.toolbar.fontSize + '</span><span class=\"icon-arrow-down\"></span>'],\n      fontColor: ['', lang.toolbar.fontColor, 'fontColor', 'submenu', '', '<div class=\"icon-fontColor\"></div>'],\n      hiliteColor: ['', lang.toolbar.hiliteColor, 'hiliteColor', 'submenu', '', '<div class=\"icon-hiliteColor\"></div>'],\n      align: ['btn_align', lang.toolbar.align, 'align', 'submenu', '', '<div class=\"icon-align-left\"></div>'],\n      list: ['', lang.toolbar.list, 'list', 'submenu', '', '<div class=\"icon-list-number\"></div>'],\n      horizontalRule: ['btn_line', lang.toolbar.horizontalRule, 'horizontalRule', 'submenu', '', '<div class=\"icon-hr\"></div>'],\n      table: ['', lang.toolbar.table, 'table', 'submenu', '', '<div class=\"icon-grid\"></div>'],\n\n      /** plugins - dialog */\n      link: ['', lang.toolbar.link, 'link', 'dialog', popupDisplay, '<div class=\"icon-link\"></div>'],\n      image: ['', lang.toolbar.image, 'image', 'dialog', popupDisplay, '<div class=\"icon-image\"></div>'],\n      video: ['', lang.toolbar.video, 'video', 'dialog', popupDisplay, '<div class=\"icon-video\"></div>']\n    };\n  },\n\n  /**\r\n   * @description Create a group div containing each module\r\n   * @returns {Element}\r\n   * @private\r\n   */\n  _createModuleGroup: function () {\n    const oDiv = document.createElement('DIV');\n    oDiv.className = 'tool_module';\n    const oUl = document.createElement('UL');\n    oUl.className = 'editor_tool';\n    oDiv.appendChild(oUl);\n    return {\n      'div': oDiv,\n      'ul': oUl\n    };\n  },\n\n  /**\r\n   * @description Create a button element\r\n   * @param {string} buttonClass - className in button\r\n   * @param {string} title - Title in button\r\n   * @param {string} dataCommand - The data-command property of the button\r\n   * @param {string} dataDisplay - The data-display property of the button ('dialog', 'submenu')\r\n   * @param {string} displayOption - Options for whether the range of the dialog is inside the editor or for the entire screen ('', 'full')\r\n   * @param {string} innerHTML - Html in button\r\n   * @returns {Element}\r\n   * @private\r\n   */\n  _createButton: function (buttonClass, title, dataCommand, dataDisplay, displayOption, innerHTML) {\n    const oLi = document.createElement('LI');\n    const oButton = document.createElement('BUTTON');\n    oButton.setAttribute('type', 'button');\n    oButton.setAttribute('class', 'btn_editor ' + buttonClass);\n    oButton.setAttribute('title', title);\n    oButton.setAttribute('data-command', dataCommand);\n    oButton.setAttribute('data-display', dataDisplay);\n    oButton.setAttribute('data-option', displayOption);\n    oButton.innerHTML = innerHTML;\n    oLi.appendChild(oButton);\n    return {\n      'li': oLi,\n      'button': oButton\n    };\n  },\n\n  /**\r\n   * @description Create editor HTML\r\n   * @param {Array} doc - document object\r\n   * @param {Array} buttonList - option.buttonList\r\n   * @param {Array} lang - option.lang\r\n   * @param {Array} popupDisplay - option.popupDisplay\r\n   * @private\r\n   */\n  _createToolBar: function (doc, buttonList, _plugins, lang, popupDisplay) {\n    const tool_bar = doc.createElement('DIV');\n    tool_bar.className = 'sun-editor-id-toolbar sun-editor-common';\n    /** create button list */\n\n    const defaultButtonList = this._defaultButtons(lang, popupDisplay);\n\n    const plugins = {};\n\n    if (_plugins) {\n      const pluginsValues = _plugins.length ? _plugins : Object.keys(_plugins).map(function (e) {\n        return _plugins[e];\n      });\n\n      for (let i = 0, len = pluginsValues.length; i < len; i++) {\n        plugins[pluginsValues[i].name] = pluginsValues[i];\n      }\n    }\n\n    let module = null;\n    let button = null;\n    let moduleElement = null;\n    let buttonElement = null;\n    let pluginName = '';\n\n    for (let i = 0; i < buttonList.length; i++) {\n      const buttonGroup = buttonList[i];\n      moduleElement = this._createModuleGroup();\n      /** button object */\n\n      if (typeof buttonGroup === 'object') {\n        for (let j = 0; j < buttonGroup.length; j++) {\n          button = buttonGroup[j];\n\n          if (typeof button === 'object') {\n            if (typeof button.add === 'function') {\n              pluginName = button.name;\n              module = defaultButtonList[pluginName];\n              plugins[pluginName] = button;\n            } else {\n              pluginName = button.name;\n              module = [button.className, button.title, button.dataCommand, button.dataDisplay, button.displayOption, button.innerHTML];\n            }\n          } else {\n            module = defaultButtonList[button];\n            pluginName = button;\n          }\n\n          buttonElement = this._createButton(module[0], module[1], module[2], module[3], module[4], module[5]);\n          moduleElement.ul.appendChild(buttonElement.li);\n\n          if (plugins[pluginName]) {\n            plugins[pluginName].buttonElement = buttonElement.button;\n          }\n        }\n\n        tool_bar.appendChild(moduleElement.div);\n      }\n      /** line break  */\n      else if (/^\\/$/.test(buttonGroup)) {\n          const enterDiv = doc.createElement('DIV');\n          enterDiv.className = 'tool_module_enter';\n          tool_bar.appendChild(enterDiv);\n        }\n    }\n\n    const tool_cover = doc.createElement('DIV');\n    tool_cover.className = 'sun-editor-id-toolbar-cover';\n    tool_bar.appendChild(tool_cover);\n    return {\n      'element': tool_bar,\n      'plugins': plugins\n    };\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (_Constructor);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/constructor.js\n");

/***/ }),

/***/ "./src/lib/context.js":
/*!****************************!*\
  !*** ./src/lib/context.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\r\n * @description Elements and variables you should have\r\n * @param {HTMLElement} element - textarea element\r\n * @param {object} cons - Toolbar element you created\r\n * @param {json} options - user options\r\n * @returns Elements, variables of the editor\r\n * @private\r\n */\n\nconst _Context = function (element, cons, options) {\n  return {\n    element: {\n      originElement: element,\n      topArea: cons._top,\n      relative: cons._relative,\n      resizebar: cons._resizeBar,\n      navigation: cons._navigation,\n      editorArea: cons._editorArea,\n      wysiwyg: cons._wysiwygArea,\n      code: cons._codeArea,\n      loading: cons._loading,\n      resizeBackground: cons._resizeBack\n    },\n    tool: {\n      bar: cons._toolBar,\n      cover: cons._toolBar.getElementsByClassName('sun-editor-id-toolbar-cover')[0],\n      bold: cons._toolBar.getElementsByClassName('sun-editor-id-bold')[0],\n      underline: cons._toolBar.getElementsByClassName('sun-editor-id-underline')[0],\n      italic: cons._toolBar.getElementsByClassName('sun-editor-id-italic')[0],\n      strike: cons._toolBar.getElementsByClassName('sun-editor-id-strike')[0],\n      subscript: cons._toolBar.getElementsByClassName('sun-editor-id-subscript')[0],\n      superscript: cons._toolBar.getElementsByClassName('sun-editor-id-superscript')[0],\n      font: cons._toolBar.getElementsByClassName('sun-editor-font-family')[0],\n      format: cons._toolBar.getElementsByClassName('sun-editor-font-format')[0],\n      fontSize: cons._toolBar.getElementsByClassName('sun-editor-font-size')[0]\n    },\n    user: {\n      videoX: options.videoX,\n      videoY: options.videoY,\n      imageFileInput: options.imageFileInput,\n      imageUrlInput: options.imageUrlInput,\n      imageSize: options.imageSize,\n      imageUploadUrl: options.imageUploadUrl,\n      font: options.font,\n      fontSize: options.fontSize,\n      height: options.height.match(/\\d+/)[0],\n      showPathLabel: options.showPathLabel,\n      display: options.display\n    },\n    dialog: {},\n    submenu: {}\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (_Context);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGliL2NvbnRleHQuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2NvbnRleHQuanM/ZDgzOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogQGRlc2NyaXB0aW9uIEVsZW1lbnRzIGFuZCB2YXJpYWJsZXMgeW91IHNob3VsZCBoYXZlXHJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSB0ZXh0YXJlYSBlbGVtZW50XHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25zIC0gVG9vbGJhciBlbGVtZW50IHlvdSBjcmVhdGVkXHJcbiAqIEBwYXJhbSB7anNvbn0gb3B0aW9ucyAtIHVzZXIgb3B0aW9uc1xyXG4gKiBAcmV0dXJucyBFbGVtZW50cywgdmFyaWFibGVzIG9mIHRoZSBlZGl0b3JcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IF9Db250ZXh0ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnMsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBvcmlnaW5FbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICAgICAgICB0b3BBcmVhOiBjb25zLl90b3AsXHJcbiAgICAgICAgICAgIHJlbGF0aXZlOiBjb25zLl9yZWxhdGl2ZSxcclxuICAgICAgICAgICAgcmVzaXplYmFyOiBjb25zLl9yZXNpemVCYXIsXHJcbiAgICAgICAgICAgIG5hdmlnYXRpb246IGNvbnMuX25hdmlnYXRpb24sXHJcbiAgICAgICAgICAgIGVkaXRvckFyZWE6IGNvbnMuX2VkaXRvckFyZWEsXHJcbiAgICAgICAgICAgIHd5c2l3eWc6IGNvbnMuX3d5c2l3eWdBcmVhLFxyXG4gICAgICAgICAgICBjb2RlOiBjb25zLl9jb2RlQXJlYSxcclxuICAgICAgICAgICAgbG9hZGluZzogY29ucy5fbG9hZGluZyxcclxuICAgICAgICAgICAgcmVzaXplQmFja2dyb3VuZDogY29ucy5fcmVzaXplQmFja1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9vbDoge1xyXG4gICAgICAgICAgICBiYXI6IGNvbnMuX3Rvb2xCYXIsXHJcbiAgICAgICAgICAgIGNvdmVyOiBjb25zLl90b29sQmFyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N1bi1lZGl0b3ItaWQtdG9vbGJhci1jb3ZlcicpWzBdLFxyXG4gICAgICAgICAgICBib2xkOiBjb25zLl90b29sQmFyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N1bi1lZGl0b3ItaWQtYm9sZCcpWzBdLFxyXG4gICAgICAgICAgICB1bmRlcmxpbmU6IGNvbnMuX3Rvb2xCYXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3VuLWVkaXRvci1pZC11bmRlcmxpbmUnKVswXSxcclxuICAgICAgICAgICAgaXRhbGljOiBjb25zLl90b29sQmFyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N1bi1lZGl0b3ItaWQtaXRhbGljJylbMF0sXHJcbiAgICAgICAgICAgIHN0cmlrZTogY29ucy5fdG9vbEJhci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzdW4tZWRpdG9yLWlkLXN0cmlrZScpWzBdLFxyXG4gICAgICAgICAgICBzdWJzY3JpcHQ6IGNvbnMuX3Rvb2xCYXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3VuLWVkaXRvci1pZC1zdWJzY3JpcHQnKVswXSxcclxuICAgICAgICAgICAgc3VwZXJzY3JpcHQ6IGNvbnMuX3Rvb2xCYXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3VuLWVkaXRvci1pZC1zdXBlcnNjcmlwdCcpWzBdLFxyXG4gICAgICAgICAgICBmb250OiBjb25zLl90b29sQmFyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N1bi1lZGl0b3ItZm9udC1mYW1pbHknKVswXSxcclxuICAgICAgICAgICAgZm9ybWF0OiBjb25zLl90b29sQmFyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N1bi1lZGl0b3ItZm9udC1mb3JtYXQnKVswXSxcclxuICAgICAgICAgICAgZm9udFNpemU6IGNvbnMuX3Rvb2xCYXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3VuLWVkaXRvci1mb250LXNpemUnKVswXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXNlcjoge1xyXG4gICAgICAgICAgICB2aWRlb1g6IG9wdGlvbnMudmlkZW9YLFxyXG4gICAgICAgICAgICB2aWRlb1k6IG9wdGlvbnMudmlkZW9ZLFxyXG4gICAgICAgICAgICBpbWFnZUZpbGVJbnB1dDogb3B0aW9ucy5pbWFnZUZpbGVJbnB1dCxcclxuICAgICAgICAgICAgaW1hZ2VVcmxJbnB1dDogb3B0aW9ucy5pbWFnZVVybElucHV0LFxyXG4gICAgICAgICAgICBpbWFnZVNpemU6IG9wdGlvbnMuaW1hZ2VTaXplLFxyXG4gICAgICAgICAgICBpbWFnZVVwbG9hZFVybDogb3B0aW9ucy5pbWFnZVVwbG9hZFVybCxcclxuICAgICAgICAgICAgZm9udDogb3B0aW9ucy5mb250LFxyXG4gICAgICAgICAgICBmb250U2l6ZTogb3B0aW9ucy5mb250U2l6ZSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBvcHRpb25zLmhlaWdodC5tYXRjaCgvXFxkKy8pWzBdLFxyXG4gICAgICAgICAgICBzaG93UGF0aExhYmVsOiBvcHRpb25zLnNob3dQYXRoTGFiZWwsXHJcbiAgICAgICAgICAgIGRpc3BsYXk6IG9wdGlvbnMuZGlzcGxheVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlhbG9nOiB7fSxcclxuICAgICAgICBzdWJtZW51OiB7fVxyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IF9Db250ZXh0OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUVBOzs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQWFBO0FBQ0E7QUF4Q0E7QUEwQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lib/context.js\n");

/***/ }),

/***/ "./src/lib/core.js":
/*!*************************!*\
  !*** ./src/lib/core.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\r\n * @description SunEditor core closure\r\n * @param context\r\n * @param util\r\n * @param plugins\r\n * @param lang\r\n * @returns {{save: save, getContext: getContext, getContent: getContent, setContent: setContent, appendContent: appendContent, disabled: disabled, enabled: enabled, show: show, hide: hide, destroy: destroy}}\r\n */\n\nconst core = function (context, util, plugins, lang) {\n  /**\r\n   * @description editor core object\r\n   * should always bind this object when registering an event in the plug-in.\r\n   */\n  const editor = {\n    /**\r\n     * @description Elements and user options parameters of the suneditor\r\n     */\n    context: context,\n\n    /**\r\n     * @description loaded plugins\r\n     */\n    plugins: {},\n\n    /**\r\n     * @description Whether the plugin is initialized\r\n     */\n    initPlugins: {},\n\n    /**\r\n     * @description util function\r\n     */\n    util: util,\n\n    /**\r\n     * @description loaded language\r\n     */\n    lang: lang,\n\n    /**\r\n     * @description dialog element\r\n     */\n    dialogForm: null,\n\n    /**\r\n     * @description submenu element\r\n     */\n    submenu: null,\n\n    /**\r\n     * @description active button element in submenu\r\n     */\n    submenuActiveButton: null,\n\n    /**\r\n     * @description The elements array to be processed unvisible when the controllersOff function is executed (resizing, link modified button, table controller)\r\n     */\n    controllerArray: [],\n\n    /**\r\n     * @description The functions array to be executed when the controllersOff function is executed ex) init function of table plugin\r\n     */\n    controllerFunction: [],\n\n    /**\r\n     * @description An array of buttons whose class name is not \"code-view-enabled\"\r\n     */\n    codeViewDisabledButtons: document.querySelectorAll('.sun-editor-id-toolbar button:not([class~=\"code-view-enabled\"])'),\n\n    /**\r\n     * @description Elements that need to change text or className for each selection change\r\n     * @property {Element} FORMAT - format button\r\n     * @property {Element} FONT - font family button\r\n     * @property {Element} SIZE - font size button\r\n     * @property {Element} B - bold button\r\n     * @property {Element} U - underline button\r\n     * @property {Element} I - italic button\r\n     * @property {Element} STRIKE - strike button\r\n     * @property {Element} SUB - subscript button\r\n     * @property {Element} SUP - superscript button\r\n     */\n    commandMap: {\n      FORMAT: context.tool.format,\n      FONT: context.tool.font,\n      SIZE: context.tool.fontSize,\n      B: context.tool.bold,\n      U: context.tool.underline,\n      I: context.tool.italic,\n      STRIKE: context.tool.strike,\n      SUB: context.tool.subscript,\n      SUP: context.tool.superscript\n    },\n\n    /**\r\n     * @description Variables used internally in editor operation\r\n     * @property {(Element|null)} selectionNode - Contains selection node\r\n     * @property {(Object|null)} range - The current range object\r\n     * @property {Boolean} wysiwygActive - The wysiwyg frame or code view state\r\n     * @property {Boolean} isFullScreen - State of full screen\r\n     * @property {Number} innerHeight_fullScreen - InnerHeight in editor when in full screen\r\n     * @property {Number} resizeClientY - Remember the vertical size of the editor before resizing the editor (Used when calculating during resize operation)\r\n     * @property {Number} tabSize - Indented size when tab button clicked (4)\r\n     * @property {Element} originCssText - Remembered the CSS of the editor before full screen (Used when returning to original size again)\r\n     * @property {Number} editorHeight - The height value entered by the user or the height value of the \"textarea\" when the suneditor is created\r\n     * @property {Array} currentNodes -  An array of the current cursor's node structure\r\n     * @private\r\n     */\n    _variable: {\n      selectionNode: null,\n      range: null,\n      wysiwygActive: true,\n      isFullScreen: false,\n      innerHeight_fullScreen: 0,\n      resizeClientY: 0,\n      tabSize: 4,\n      originCssText: context.element.topArea.style.cssText,\n      editorHeight: context.user.height,\n      currentNodes: []\n    },\n\n    /**\r\n     * @description If the plugin is not added, add the plugin and call the 'add' function.\r\n     * If the plugin is added call callBack function.\r\n     * @param {String} pluginName - The name of the plugin to call\r\n     * @param {function} callBackFunction - Function to be executed immediately after module call\r\n     */\n    callPlugin: function (pluginName, callBackFunction) {\n      if (!this.plugins[pluginName]) {\n        throw Error('[SUNEDITOR.core.callPlugin.fail] The called plugin does not exist or is in an invalid format. (pluginName:\"' + pluginName + '\")');\n      } else if (!this.initPlugins[pluginName]) {\n        this.plugins[pluginName].add(this, this.plugins[pluginName].buttonElement);\n        this.initPlugins[pluginName] = true;\n      }\n\n      callBackFunction();\n    },\n\n    /**\r\n     * @description If the module is not added, add the module and call the 'add' function\r\n     * @param {Array} moduleArray - module object's Array [dialog, resizing]\r\n     */\n    addModule: function (moduleArray) {\n      let moduleName = '';\n\n      for (let i = 0, len = moduleArray.length; i < len; i++) {\n        moduleName = moduleArray[i].name;\n\n        if (!this.plugins[moduleName]) {\n          this.plugins[moduleName] = this.util.copyObj(moduleArray[i]);\n          this.plugins[moduleName].add(this);\n        }\n      }\n    },\n\n    /**\r\n     * @description Enabled submenu\r\n     * @param {Element} element - Submenu element to call\r\n     */\n    submenuOn: function (element) {\n      this.submenu = element.nextElementSibling;\n      this.submenu.style.display = 'block';\n      util.addClass(element, 'on');\n      this.submenuActiveButton = element;\n    },\n\n    /**\r\n     * @description Disable submenu\r\n     */\n    submenuOff: function () {\n      if (this.submenu) {\n        this.submenu.style.display = 'none';\n        this.submenu = null;\n        util.removeClass(this.submenuActiveButton, 'on');\n        this.submenuActiveButton = null;\n      }\n\n      if (context.image && context.image._onCaption === true) {\n        this.plugins.image.toggle_caption_contenteditable.call(editor, false);\n      }\n\n      this.controllersOff();\n    },\n\n    /**\r\n     * @description Disable controller in editor area (link button, image resize button)\r\n     */\n    controllersOff: function () {\n      const len = this.controllerArray.length;\n      const fLen = this.controllerFunction.length;\n\n      if (len > 0) {\n        for (let i = 0; i < len; i++) {\n          this.controllerArray[i].style.display = 'none';\n        }\n\n        this.controllerArray = [];\n      }\n\n      if (fLen > 0) {\n        for (let i = 0; i < fLen; i++) {\n          this.controllerFunction[i]();\n        }\n\n        this.controllerArray = [];\n      }\n    },\n\n    /**\r\n     * @description javascript execCommand\r\n     * @param {String} command - javascript execCommand function property\r\n     * @param {Boolean} showDefaultUI - javascript execCommand function property\r\n     * @param {String} value - javascript execCommand function property\r\n     */\n    execCommand: function (command, showDefaultUI, value) {\n      document.execCommand(command, showDefaultUI, value ? '<' + value + '>' : null);\n    },\n\n    /**\r\n     * @description Focus to wysiwyg area\r\n     */\n    focus: function () {\n      if (context.element.wysiwyg.style.display === 'none') return;\n      const caption = util.getParentElement(this.getSelectionNode(), 'figcaption');\n\n      if (caption) {\n        caption.focus();\n      } else {\n        context.element.wysiwyg.focus();\n      }\n\n      this._setEditorRange();\n\n      event._findButtonEffectTag();\n    },\n\n    /**\r\n     * @description Saving the range object and the currently selected node of editor\r\n     * @private\r\n     */\n    _setEditorRange: function () {\n      const selection = window.getSelection();\n      let range = null;\n\n      if (selection.rangeCount > 0) {\n        range = selection.getRangeAt(0);\n      } else {\n        range = this._createDefaultRange();\n      }\n\n      this._variable.range = range;\n\n      if (range.collapsed) {\n        this.setSelectionNode(range.commonAncestorContainer);\n      } else {\n        this.setSelectionNode(selection.extentNode || selection.anchorNode);\n      }\n    },\n\n    /**\r\n     * @description Return the range object of editor's first child node\r\n     * @returns {Object}\r\n     * @private\r\n     */\n    _createDefaultRange: function () {\n      const range = document.createRange();\n      range.setStart(context.element.wysiwyg.firstChild, 0);\n      range.setEnd(context.element.wysiwyg.firstChild, 0);\n      return range;\n    },\n\n    /**\r\n     * @description Set current editor's range object\r\n     * @param {Element} startCon - The startContainer property of the selection object.\r\n     * @param {Number} startOff - The startOffset property of the selection object.\r\n     * @param {Element} endCon - The endContainer property of the selection object.\r\n     * @param {Element} endOff - The endOffset property of the selection object.\r\n     */\n    setRange: function (startCon, startOff, endCon, endOff) {\n      const range = document.createRange();\n      range.setStart(startCon, startOff);\n      range.setEnd(endCon, endOff);\n      const selection = window.getSelection();\n\n      if (selection.rangeCount > 0) {\n        selection.removeAllRanges();\n      }\n\n      this._variable.range = range;\n      selection.addRange(range);\n    },\n\n    /**\r\n     * @description Get current editor's range object\r\n     * @returns {Object}\r\n     */\n    getRange: function () {\n      return this._variable.range || this._createDefaultRange();\n    },\n\n    /**\r\n     * @description Set the selected node. (Used by getSelectionNode function)\r\n     * @param {Node} node - node object\r\n     */\n    setSelectionNode: function (node) {\n      this._variable.selectionNode = node;\n    },\n\n    /**\r\n     * @description Get current select node\r\n     * @returns {Node}\r\n     */\n    getSelectionNode: function () {\n      if (this._variable.selectionNode) {\n        return this._variable.selectionNode;\n      }\n\n      return context.element.wysiwyg.firstChild;\n    },\n\n    /**\r\n     * @description Returns a \"formatElement\"(P, DIV, H[1-6], LI) array from the currently selected range.\r\n     * @returns {Array}\r\n     */\n    getSelectedFormatElements: function () {\n      const range = this.getRange();\n      const startCon = range.startContainer;\n      const endCon = range.endContainer;\n      const commonCon = range.commonAncestorContainer;\n      const rangeFormatElements = [];\n      if (!util.isWysiwygDiv(commonCon) && !util.isRangeFormatElement(commonCon)) return [util.getFormatElement(commonCon)]; // get line nodes\n\n      const lineNodes = util.getListChildren(commonCon, function (current) {\n        return util.isFormatElement(current);\n      });\n      if (startCon === endCon) return lineNodes[0];\n      let startLine = util.getFormatElement(startCon);\n      let endLine = util.getFormatElement(endCon);\n\n      for (let i = 0, len = lineNodes.length; i < len; i++) {\n        if (startLine === lineNodes[i]) {\n          startLine = i;\n          continue;\n        }\n\n        if (endLine === lineNodes[i]) {\n          endLine = i;\n          break;\n        }\n      }\n\n      for (let i = startLine; i <= endLine; i++) {\n        rangeFormatElements.push(lineNodes[i]);\n      }\n\n      return rangeFormatElements;\n    },\n\n    /**\r\n     * @description Returns a \"rangeFormatElement\"(blockquote, TABLE, TR, TD, OL, UL, PRE) array from the currently selected range.\r\n     * @returns {Array}\r\n     */\n    getSelectedRangeFormatElements: function () {\n      const range = this.getRange();\n      const startCon = range.startContainer;\n      const endCon = range.endContainer;\n      const commonCon = range.commonAncestorContainer;\n      const rangeFormatElements = [];\n      if (util.isRangeFormatElement(commonCon)) [commonCon];\n\n      if (!util.isWysiwygDiv(commonCon)) {\n        const el = util.getRangeFormatElement(commonCon);\n        return el ? [el] : [];\n      } // get range Elements\n\n\n      const rangeElements = util.getListChildren(commonCon, function (current) {\n        return util.isRangeFormatElement(current);\n      });\n      if (startCon === endCon) return rangeElements[0];\n      let startLine = util.getRangeFormatElement(startCon);\n      let endLine = util.getRangeFormatElement(endCon);\n\n      for (let i = 0, len = rangeElements.length; i < len; i++) {\n        if (startLine === rangeElements[i]) {\n          startLine = i;\n          continue;\n        }\n\n        if (endLine === rangeElements[i]) {\n          endLine = i;\n          break;\n        }\n      }\n\n      for (let i = startLine; i <= endLine; i++) {\n        if (rangeElements[i]) rangeFormatElements.push(rangeElements[i]);\n      }\n\n      return rangeFormatElements;\n    },\n\n    /**\r\n     * @description Determine if this offset is the edge offset of container\r\n     * @param {Object} container - The container property of the selection object.\r\n     * @param {Number} offset - The offset property of the selection object.\r\n     * @returns {Boolean}\r\n     */\n    isEdgePoint: function (container, offset) {\n      return offset === 0 || offset === container.nodeValue.length;\n    },\n\n    /**\r\n     * @description Show loading box\r\n     */\n    showLoading: function () {\n      context.element.loading.style.display = 'block';\n    },\n\n    /**\r\n     * @description Close loading box\r\n     */\n    closeLoading: function () {\n      context.element.loading.style.display = 'none';\n    },\n\n    /**\r\n     * @description Append P tag to current line next\r\n     * @param {Element} element - Insert as siblings of that element\r\n     * @returns {Element}\r\n     */\n    appendP: function (element) {\n      const oP = document.createElement('P');\n      oP.innerHTML = '&#65279';\n      element = util.getRangeFormatElement(element) || util.getFormatElement(element);\n      element.parentNode.insertBefore(oP, element.nextElementSibling);\n      return oP;\n    },\n\n    /**\r\n     * @description Delete selected node and insert argument value node\r\n     * @param {Element} oNode - Node to be inserted\r\n     * @param {(Element|null)} rightNode - If the node exists, it is inserted after the node\r\n     */\n    insertNode: function (oNode, rightNode) {\n      const range = this.getRange();\n      let parentNode = null;\n\n      if (!rightNode) {\n        const startCon = range.startContainer;\n        const startOff = range.startOffset;\n        const endCon = range.endContainer;\n        const endOff = range.endOffset;\n        const commonCon = range.commonAncestorContainer;\n        parentNode = startCon;\n\n        if (startCon.nodeType === 3) {\n          parentNode = startCon.parentNode;\n        }\n        /** No Select range node */\n\n\n        if (range.collapsed) {\n          if (commonCon.nodeType === 3) {\n            rightNode = commonCon.splitText(endOff);\n          } else {\n            if (parentNode.lastChild !== null && /^BR$/i.test(parentNode.lastChild.nodeName)) {\n              parentNode.removeChild(parentNode.lastChild);\n            }\n\n            rightNode = null;\n          }\n        }\n        /** Select range nodes */\n        else {\n            const isSameContainer = startCon === endCon;\n\n            if (isSameContainer) {\n              if (this.isEdgePoint(endCon, endOff)) rightNode = endCon.nextSibling;else rightNode = endCon.splitText(endOff);\n              let removeNode = startCon;\n              if (!this.isEdgePoint(startCon, startOff)) removeNode = startCon.splitText(startOff);\n              parentNode.removeChild(removeNode);\n            } else {\n              this.removeNode();\n              parentNode = commonCon;\n              rightNode = endCon;\n\n              while (rightNode.parentNode !== commonCon) {\n                rightNode = rightNode.parentNode;\n              }\n            }\n          }\n      } else {\n        parentNode = rightNode.parentNode;\n        rightNode = rightNode.nextSibling;\n      }\n\n      try {\n        parentNode.insertBefore(oNode, rightNode);\n      } catch (e) {\n        parentNode.appendChild(oNode);\n      }\n\n      try {\n        this.setRange(oNode, 0, oNode, oNode.textContent.length);\n      } catch (e) {}\n    },\n\n    /**\r\n     * @description Delete the currently selected node\r\n     */\n    removeNode: function () {\n      const range = this.getRange();\n\n      if (range.deleteContents) {\n        range.deleteContents();\n        return;\n      }\n\n      const startCon = range.startContainer;\n      const startOff = range.startOffset;\n      const endCon = range.endContainer;\n      const endOff = range.endOffset;\n      const commonCon = range.commonAncestorContainer;\n      let beforeNode = null;\n      let afterNode = null;\n      const childNodes = util.getListChildNodes(commonCon);\n      let startIndex = util.getArrayIndex(childNodes, startCon);\n      let endIndex = util.getArrayIndex(childNodes, endCon);\n\n      for (let i = startIndex + 1, startNode = startCon; i >= 0; i--) {\n        if (childNodes[i] === startNode.parentNode && childNodes[i].firstChild === startNode && startOff === 0) {\n          startIndex = i;\n          startNode = startNode.parentNode;\n        }\n      }\n\n      for (let i = endIndex - 1, endNode = endCon; i > startIndex; i--) {\n        if (childNodes[i] === endNode.parentNode && childNodes[i].nodeType === 1) {\n          childNodes.splice(i, 1);\n          endNode = endNode.parentNode;\n          --endIndex;\n        }\n      }\n\n      for (let i = startIndex; i <= endIndex; i++) {\n        const item = childNodes[i];\n\n        if (item.length === 0 || item.nodeType === 3 && item.data === undefined) {\n          util.removeItem(item);\n          continue;\n        }\n\n        if (item === startCon) {\n          if (startCon.nodeType === 1) {\n            beforeNode = document.createTextNode(startCon.textContent);\n          } else {\n            beforeNode = document.createTextNode(startCon.substringData(0, startOff));\n          }\n\n          if (beforeNode.length > 0) {\n            startCon.data = beforeNode.data;\n          } else {\n            util.removeItem(startCon);\n          }\n\n          continue;\n        }\n\n        if (item === endCon) {\n          if (endCon.nodeType === 1) {\n            afterNode = document.createTextNode(endCon.textContent);\n          } else {\n            afterNode = document.createTextNode(endCon.substringData(endOff, endCon.length - endOff));\n          }\n\n          if (afterNode.length > 0) {\n            endCon.data = afterNode.data;\n          } else {\n            util.removeItem(endCon);\n          }\n\n          continue;\n        }\n\n        util.removeItem(item);\n      }\n    },\n\n    /**\r\n     * @description appended all selected format Element to the argument element and insert\r\n     * @param {Element} wrapTag - Element of wrap the arguments\r\n     */\n    wrapToTags: function (wrapTag) {\n      const range = this.getRange();\n      const rangeLines = this.getSelectedFormatElements();\n      const last = rangeLines[rangeLines.length - 1];\n      let standTag, beforeTag, pElement;\n\n      if (util.isRangeFormatElement(last) || util.isFormatElement(last)) {\n        standTag = last;\n      } else {\n        standTag = util.getRangeFormatElement(last) || util.getFormatElement(last);\n      }\n\n      if (/^TD$/i.test(last.nodeName)) last = util.getFormatElement(last);\n      beforeTag = standTag.nextSibling;\n      pElement = standTag.parentNode;\n      let listParent = null;\n      let line = null;\n      let prevNodeName = '';\n\n      for (let i = 0, len = rangeLines.length; i < len; i++) {\n        line = rangeLines[i];\n\n        if (/^LI$/i.test(line.nodeName)) {\n          if (listParent === null || !/^LI$/i.test(prevNodeName)) {\n            listParent = document.createElement(line.parentNode.nodeName);\n          }\n\n          listParent.appendChild(line);\n          if (i === len - 1 || !/^LI$/i.test(rangeLines[i + 1].nodeName)) wrapTag.appendChild(listParent);\n        } else {\n          wrapTag.appendChild(line);\n        }\n\n        prevNodeName = line.nodeName;\n      }\n\n      pElement.insertBefore(wrapTag, beforeTag);\n      if (!range.collapsed && (util.isRangeFormatElement(range.startContainer) || util.isRangeFormatElement(range.endContainer))) util.removeEmptyNode(pElement);\n    },\n\n    /**\r\n     * @description Copies the node of the argument value and append all selected nodes and insert\r\n     * 1. When there is the same css value node in the selection area, the tag is stripped.\r\n     * 2. If there is another css value other thanCss attribute values received as arguments on the node, removed only Css attribute values received as arguments\r\n     * @param {Element} appendNode - The dom that will wrap the selected text area\r\n     * @param {Array} checkCSSPropertyArray - The css attribute name Array to check (['font-size'], ['font-family']...])\r\n     */\n    wrapRangeToTag: function (appendNode, checkCSSPropertyArray) {\n      const range = this.getRange();\n      const startCon = range.startContainer;\n      const startOff = range.startOffset;\n      const endCon = range.endContainer;\n      const endOff = range.endOffset;\n      const commonCon = range.commonAncestorContainer;\n      let start = {},\n          end = {};\n      let newNode, regExp;\n\n      if (checkCSSPropertyArray) {\n        regExp = '(?:;|^|\\\\s)(?:' + checkCSSPropertyArray[0];\n\n        for (let i = 1; i < checkCSSPropertyArray.length; i++) {\n          regExp += '|' + checkCSSPropertyArray[i];\n        }\n\n        regExp += ')\\\\s*:[^;]*\\\\s*(?:;|$)';\n        regExp = new RegExp(regExp, 'i');\n      } else {\n        regExp = new RegExp('', 'i');\n      }\n      /** tag check function*/\n\n\n      const checkCss = function (vNode) {\n        if (vNode.nodeType === 3) return true;\n        let style = '';\n\n        if (regExp && vNode.style.cssText.length > 0) {\n          style = vNode.style.cssText.replace(regExp, '').trim();\n        }\n\n        if (style.length > 0) {\n          if (vNode.style.cssText.length > 0) vNode.style.cssText = style;\n          return true;\n        }\n\n        return false;\n      };\n      /** one node */\n\n\n      if (startCon === endCon) {\n        newNode = appendNode.cloneNode(false);\n        /** No range node selected */\n\n        if (range.collapsed) {\n          newNode.innerHTML = '&#65279';\n\n          if (util.isFormatElement(startCon)) {\n            startCon.appendChild(newNode);\n          } else {\n            const parentNode = startCon.nodeType === 3 ? startCon.parentNode : startCon;\n            const rightNode = commonCon.nodeType === 3 ? commonCon.splitText(endOff) : null;\n            parentNode.insertBefore(newNode, rightNode);\n          }\n\n          start.container = newNode;\n          start.offset = 1;\n          end.container = newNode;\n          end.offset = 1;\n        }\n        /** Select range node */\n        else {\n            if (startCon.nodeType === 1) {\n              newNode.innerHTML = checkCss(startCon) ? startCon.outerHTML : startCon.innerHTML;\n              startCon.parentNode.appendChild(newNode);\n              util.removeItem(startCon);\n            } else {\n              const beforeNode = document.createTextNode(startCon.substringData(0, startOff));\n              const afterNode = document.createTextNode(startCon.substringData(endOff, startCon.length - endOff));\n              const startConParent = startCon.parentNode;\n              newNode.innerText = startCon.substringData(startOff, endOff - startOff);\n\n              if (beforeNode.data.length === 0 && afterNode.data.length === 0 && !checkCss(startConParent) && !util.isFormatElement(startConParent)) {\n                startConParent.parentNode.insertBefore(newNode, startConParent.nextSibling);\n                util.removeItem(startConParent);\n              } else {\n                startConParent.insertBefore(newNode, startCon.nextSibling);\n\n                if (beforeNode.data.length > 0) {\n                  startCon.data = beforeNode.data;\n                } else {\n                  startCon.data = startCon.substringData(0, startOff);\n                }\n\n                if (afterNode.data.length > 0) {\n                  startConParent.insertBefore(afterNode, newNode.nextSibling);\n                }\n              }\n            }\n\n            start.container = newNode;\n            start.offset = 0;\n            end.container = newNode;\n            end.offset = 1;\n          }\n      }\n      /** multiple nodes */\n      else {\n          /** one line */\n          if (!util.isWysiwygDiv(commonCon) && !util.isRangeFormatElement(commonCon)) {\n            newNode = appendNode.cloneNode(false);\n\n            const newRange = this._wrapLineNodesOneLine(util.getFormatElement(commonCon), newNode, checkCss, startCon, startOff, endCon, endOff);\n\n            start.container = newRange.startContainer;\n            start.offset = newRange.startOffset;\n            end.container = newRange.endContainer;\n            end.offset = newRange.endOffset;\n          }\n          /** multi line */\n          else {\n              // get line nodes\n              const lineNodes = this.getSelectedFormatElements();\n              const endLength = lineNodes.length - 1; // startCon\n\n              newNode = appendNode.cloneNode(false);\n              start = this._wrapLineNodesStart(lineNodes[0], newNode, checkCss, startCon, startOff); // mid\n\n              for (let i = 1; i < endLength; i++) {\n                newNode = appendNode.cloneNode(false);\n\n                this._wrapLineNodes(lineNodes[i], newNode, checkCss);\n              } // endCon\n\n\n              newNode = appendNode.cloneNode(false);\n              end = this._wrapLineNodesEnd(lineNodes[endLength], newNode, checkCss, endCon, endOff);\n            }\n        } // set range\n\n\n      this.setRange(start.container, start.offset, end.container, end.offset);\n    },\n\n    /**\r\n     * @description wraps text nodes of line selected text.\r\n     * @param {Element} element - The node of the line that contains the selected text node.\r\n     * @param {Element} newInnerNode - The dom that will wrap the selected text area\r\n     * @param {function} validation - Check if the node should be stripped.\r\n     * @param {Element} startCon - The startContainer property of the selection object.\r\n     * @param {Number} startOff - The startOffset property of the selection object.\r\n     * @param {Element} endCon - The endContainer property of the selection object.\r\n     * @param {Number} endOff - The endOffset property of the selection object.\r\n     * @returns {{startContainer: *, startOffset: *, endContainer: *, endOffset: *}}\r\n     * @private\r\n     */\n    _wrapLineNodesOneLine: function (element, newInnerNode, validation, startCon, startOff, endCon, endOff) {\n      const el = element;\n      const pNode = element.cloneNode(false);\n      let startContainer = startCon;\n      let startOffset = startOff;\n      let endContainer = endCon;\n      let endOffset = endOff;\n      let startPass = false;\n      let endPass = false;\n      let pCurrent, newNode, appendNode, cssText;\n\n      function checkCss(vNode) {\n        const regExp = new RegExp('(?:;|^|\\\\s)(?:' + cssText + 'null)\\\\s*:[^;]*\\\\s*(?:;|$)', 'i');\n        let style = '';\n\n        if (regExp && vNode.style.cssText.length > 0) {\n          style = regExp.test(vNode.style.cssText);\n        }\n\n        return !style;\n      }\n\n      ;\n\n      (function recursionFunc(current, node) {\n        const childNodes = current.childNodes;\n\n        for (let i = 0, len = childNodes.length; i < len; i++) {\n          let child = childNodes[i];\n          let coverNode = node;\n\n          if (child.textContent.length > 0 && child.textContent !== '&#65279' || /^BR$/i.test(child.nodeName)) {\n            let cloneNode; // startContainer\n\n            if (child === startContainer) {\n              const prevNode = document.createTextNode(startContainer.substringData(0, startOffset));\n              const textNode = document.createTextNode(startContainer.substringData(startOffset, startContainer.length - startOffset));\n\n              if (prevNode.data.length > 0) {\n                node.appendChild(prevNode);\n              }\n\n              newNode = child;\n              pCurrent = [];\n              cssText = '';\n\n              while (newNode !== pNode && newNode !== el && newNode !== null) {\n                if (validation(newNode) && newNode.nodeType === 1 && checkCss(newNode)) {\n                  pCurrent.push(newNode.cloneNode(false));\n                  cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(':')) + '|';\n                }\n\n                newNode = newNode.parentNode;\n              }\n\n              const childNode = appendNode = newNode = pCurrent.pop() || textNode;\n\n              while (pCurrent.length > 0) {\n                newNode = pCurrent.pop();\n                appendNode.appendChild(newNode);\n                appendNode = newNode;\n              }\n\n              newInnerNode.appendChild(childNode);\n              pNode.appendChild(newInnerNode);\n              startContainer = textNode;\n              startOffset = 0;\n              startPass = true;\n              if (newNode !== textNode) newNode.appendChild(startContainer);\n              continue;\n            } // endContainer\n            else if (child === endContainer) {\n                const afterNode = document.createTextNode(endContainer.substringData(endOffset, endContainer.length - endOffset));\n                const textNode = document.createTextNode(endContainer.substringData(0, endOffset));\n\n                if (afterNode.data.length > 0) {\n                  newNode = child;\n                  cssText = '';\n                  pCurrent = [];\n\n                  while (newNode !== pNode && newNode !== el && newNode !== null) {\n                    if (newNode.nodeType === 1 && checkCss(newNode)) {\n                      pCurrent.push(newNode.cloneNode(false));\n                      cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(':')) + '|';\n                    }\n\n                    newNode = newNode.parentNode;\n                  }\n\n                  cloneNode = appendNode = newNode = pCurrent.pop() || afterNode;\n\n                  while (pCurrent.length > 0) {\n                    newNode = pCurrent.pop();\n                    appendNode.appendChild(newNode);\n                    appendNode = newNode;\n                  }\n\n                  pNode.appendChild(cloneNode);\n                  newNode.textContent = afterNode.data;\n                }\n\n                newNode = node;\n                pCurrent = [];\n                cssText = '';\n\n                while (newNode !== pNode && newNode !== el && newNode !== null) {\n                  if (validation(newNode) && newNode.nodeType === 1 && checkCss(newNode)) {\n                    pCurrent.push(newNode.cloneNode(false));\n                    cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(':')) + '|';\n                  }\n\n                  newNode = newNode.parentNode;\n                }\n\n                const childNode = appendNode = newNode = pCurrent.pop() || textNode;\n\n                while (pCurrent.length > 0) {\n                  newNode = pCurrent.pop();\n                  appendNode.appendChild(newNode);\n                  appendNode = newNode;\n                }\n\n                newInnerNode.appendChild(childNode);\n                endContainer = textNode;\n                endOffset = textNode.data.length;\n                endPass = true;\n                if (newNode !== textNode) newNode.appendChild(endContainer);\n                continue;\n              } // other\n\n\n            if (startPass) {\n              if (child.nodeType === 1) {\n                recursionFunc(child, child);\n                continue;\n              }\n\n              newNode = child;\n              pCurrent = [];\n              cssText = '';\n\n              while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {\n                if (newNode.nodeType === 1 && (endPass || validation(newNode)) && checkCss(newNode)) {\n                  pCurrent.push(newNode.cloneNode(false));\n                  cssText += newNode.style.cssText.substr(0, newNode.style.cssText.indexOf(':')) + '|';\n                }\n\n                newNode = newNode.parentNode;\n              }\n\n              const childNode = appendNode = newNode = pCurrent.pop() || child;\n\n              while (pCurrent.length > 0) {\n                newNode = pCurrent.pop();\n                appendNode.appendChild(newNode);\n                appendNode = newNode;\n              }\n\n              if (childNode === child) {\n                if (!endPass) node = newInnerNode;else node = pNode;\n              } else if (endPass) {\n                pNode.appendChild(childNode);\n                node = newNode;\n              } else {\n                newInnerNode.appendChild(childNode);\n                node = newNode;\n              }\n            }\n\n            cloneNode = child.cloneNode(false);\n            node.appendChild(cloneNode);\n            if (child.nodeType === 1) coverNode = cloneNode;\n          }\n\n          recursionFunc(child, coverNode);\n        }\n      })(element, pNode);\n\n      util.removeEmptyNode(pNode);\n      element.parentNode.insertBefore(pNode, element);\n      util.removeItem(element);\n      return {\n        startContainer: startContainer,\n        startOffset: startOffset,\n        endContainer: endContainer,\n        endOffset: endOffset\n      };\n    },\n\n    /**\r\n     * @description wraps mid lines selected text.\r\n     * @param {Element} element - The node of the line that contains the selected text node.\r\n     * @param {Element} newInnerNode - The dom that will wrap the selected text area\r\n     * @param {function} validation - Check if the node should be stripped.\r\n     * @private\r\n     */\n    _wrapLineNodes: function (element, newInnerNode, validation) {\n      (function recursionFunc(current, node) {\n        const childNodes = current.childNodes;\n\n        for (let i = 0, len = childNodes.length; i < len; i++) {\n          let child = childNodes[i];\n          let coverNode = node;\n\n          if (validation(child) && (child.textContent.length > 0 && child.textContent !== '&#65279' || /^BR$/i.test(child.nodeName))) {\n            let cloneNode = child.cloneNode(false);\n            node.appendChild(cloneNode);\n            if (child.nodeType === 1) coverNode = cloneNode;\n          }\n\n          recursionFunc(child, coverNode);\n        }\n      })(element, newInnerNode);\n\n      element.innerHTML = '';\n      element.appendChild(newInnerNode);\n    },\n\n    /**\r\n     * @description wraps first line selected text.\r\n     * @param {Element} element - The node of the line that contains the selected text node.\r\n     * @param {Element} newInnerNode - The dom that will wrap the selected text area\r\n     * @param {function} validation - Check if the node should be stripped.\r\n     * @param {Element} startCon - The startContainer property of the selection object.\r\n     * @param {Number} startOff - The startOffset property of the selection object.\r\n     * @returns {{container: *, offset: *}}\r\n     * @private\r\n     */\n    _wrapLineNodesStart: function (element, newInnerNode, validation, startCon, startOff) {\n      const el = element;\n      const pNode = element.cloneNode(false);\n      let container = startCon;\n      let offset = startOff;\n      let passNode = false;\n      let pCurrent, newNode, appendNode;\n\n      (function recursionFunc(current, node) {\n        const childNodes = current.childNodes;\n\n        for (let i = 0, len = childNodes.length; i < len; i++) {\n          const child = childNodes[i];\n          let coverNode = node;\n\n          if (passNode && !/^BR$/i.test(child.nodeName)) {\n            if (child.nodeType === 1) {\n              recursionFunc(child, child);\n              continue;\n            }\n\n            newNode = child;\n            pCurrent = [];\n\n            while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {\n              if (newNode.nodeType === 1 && validation(newNode)) {\n                pCurrent.push(newNode.cloneNode(false));\n              }\n\n              newNode = newNode.parentNode;\n            }\n\n            if (pCurrent.length > 0) {\n              const childNode = appendNode = newNode = pCurrent.pop();\n\n              while (pCurrent.length > 0) {\n                newNode = pCurrent.pop();\n                appendNode.appendChild(newNode);\n                appendNode = newNode;\n              }\n\n              newInnerNode.appendChild(childNode);\n              node = newNode;\n            } else {\n              node = newInnerNode;\n            }\n          } // startContainer\n\n\n          if (!passNode && child === container) {\n            const prevNode = document.createTextNode(container.substringData(0, offset));\n            const textNode = document.createTextNode(container.substringData(offset, container.length - offset));\n\n            if (prevNode.data.length > 0) {\n              node.appendChild(prevNode);\n            }\n\n            newNode = node;\n            pCurrent = [];\n\n            while (newNode !== pNode && newNode !== null) {\n              if (newNode.nodeType === 1 && validation(newNode)) {\n                pCurrent.push(newNode.cloneNode(false));\n              }\n\n              newNode = newNode.parentNode;\n            }\n\n            const childNode = appendNode = newNode = pCurrent.pop() || node;\n\n            while (pCurrent.length > 0) {\n              newNode = pCurrent.pop();\n              appendNode.appendChild(newNode);\n              appendNode = newNode;\n            }\n\n            if (childNode !== node) {\n              newInnerNode.appendChild(childNode);\n              node = newNode;\n            } else {\n              node = newInnerNode;\n            }\n\n            pNode.appendChild(newInnerNode);\n            container = textNode;\n            offset = 0;\n            passNode = true;\n            node.appendChild(container);\n            continue;\n          }\n\n          if ((!passNode || validation(child)) && (child.textContent.length > 0 && child.textContent !== '&#65279' || /^BR$/i.test(child.nodeName))) {\n            const cloneNode = child.cloneNode(false);\n            node.appendChild(cloneNode);\n            if (child.nodeType === 1) coverNode = cloneNode;\n          }\n\n          recursionFunc(child, coverNode);\n        }\n      })(element, pNode);\n\n      element.parentNode.insertBefore(pNode, element);\n      util.removeItem(element);\n      return {\n        container: container,\n        offset: offset\n      };\n    },\n\n    /**\r\n     * @description wraps last line selected text.\r\n     * @param {Element} element - The node of the line that contains the selected text node.\r\n     * @param {Element} newInnerNode - The dom that will wrap the selected text area\r\n     * @param {function} validation - Check if the node should be stripped.\r\n     * @param {Element} endCon - The endContainer property of the selection object.\r\n     * @param {Number} endOff - The endOffset property of the selection object.\r\n     * @returns {{container: *, offset: *}}\r\n     * @private\r\n     */\n    _wrapLineNodesEnd: function (element, newInnerNode, validation, endCon, endOff) {\n      const el = element;\n      const pNode = element.cloneNode(false);\n      let container = endCon;\n      let offset = endOff;\n      let passNode = false;\n      let pCurrent, newNode, appendNode;\n\n      (function recursionFunc(current, node) {\n        const childNodes = current.childNodes;\n\n        for (let i = childNodes.length - 1; 0 <= i; i--) {\n          const child = childNodes[i];\n          let coverNode = node;\n\n          if (passNode && !/^BR$/i.test(child.nodeName)) {\n            if (child.nodeType === 1) {\n              recursionFunc(child, child);\n              continue;\n            }\n\n            newNode = child;\n            pCurrent = [];\n\n            while (newNode.parentNode !== null && newNode !== el && newNode !== newInnerNode) {\n              if (validation(newNode) && newNode.nodeType === 1) {\n                pCurrent.push(newNode.cloneNode(false));\n              }\n\n              newNode = newNode.parentNode;\n            }\n\n            if (pCurrent.length > 0) {\n              const childNode = appendNode = newNode = pCurrent.pop();\n\n              while (pCurrent.length > 0) {\n                newNode = pCurrent.pop();\n                appendNode.appendChild(newNode);\n                appendNode = newNode;\n              }\n\n              newInnerNode.insertBefore(childNode, newInnerNode.firstChild);\n              node = newNode;\n            } else {\n              node = newInnerNode;\n            }\n          } // endContainer\n\n\n          if (!passNode && child === container) {\n            const afterNode = document.createTextNode(container.substringData(offset, container.length - offset));\n            const textNode = document.createTextNode(container.substringData(0, offset));\n\n            if (afterNode.data.length > 0) {\n              node.insertBefore(afterNode, node.firstChild);\n            }\n\n            newNode = node;\n            pCurrent = [];\n\n            while (newNode !== pNode && newNode !== null) {\n              if (validation(newNode) && newNode.nodeType === 1) {\n                pCurrent.push(newNode.cloneNode(false));\n              }\n\n              newNode = newNode.parentNode;\n            }\n\n            const childNode = appendNode = newNode = pCurrent.pop() || node;\n\n            while (pCurrent.length > 0) {\n              newNode = pCurrent.pop();\n              appendNode.appendChild(newNode);\n              appendNode = newNode;\n            }\n\n            if (childNode !== node) {\n              newInnerNode.insertBefore(childNode, newInnerNode.firstChild);\n              node = newNode;\n            } else {\n              node = newInnerNode;\n            }\n\n            pNode.insertBefore(newInnerNode, pNode.firstChild);\n            container = textNode;\n            offset = textNode.data.length;\n            passNode = true;\n            node.insertBefore(container, node.firstChild);\n            continue;\n          }\n\n          if ((!passNode || validation(child)) && (child.textContent.length > 0 && child.textContent !== '&#65279' || /^BR$/i.test(child.nodeName))) {\n            const cloneNode = child.cloneNode(false);\n            node.insertBefore(cloneNode, node.firstChild);\n            if (child.nodeType === 1) coverNode = cloneNode;\n          }\n\n          recursionFunc(child, coverNode);\n        }\n      })(element, pNode);\n\n      element.parentNode.insertBefore(pNode, element);\n      util.removeItem(element);\n      return {\n        container: container,\n        offset: offset\n      };\n    },\n\n    /**\r\n     * @description This function implements indentation.\r\n     * Set \"margin-left\" to \"25px\" in the top \"P\" tag of the parameter node.\r\n     * @param element {Element} - The element to indent (editor.getSelectionNode())\r\n     * @param command {String} - Separator (\"indent\" or \"outdent\")\r\n     */\n    indent: function (element, command) {\n      const p = util.getFormatElement(element);\n      if (!p) return;\n      let margin = /\\d+/.test(p.style.marginLeft) ? p.style.marginLeft.match(/\\d+/)[0] * 1 : 0;\n\n      if ('indent' === command) {\n        margin += 25;\n      } else {\n        margin -= 25;\n      }\n\n      p.style.marginLeft = (margin < 0 ? 0 : margin) + 'px';\n    },\n\n    /**\r\n     * @description Add or remove the class name of \"body\" so that the code block is visible\r\n     */\n    toggleDisplayBlocks: function () {\n      util.toggleClass(context.element.wysiwyg, 'sun-editor-show-block');\n    },\n\n    /**\r\n     * @description Changes to code view or wysiwyg view\r\n     */\n    toggleCodeView: function () {\n      const wysiwygActive = this._variable.wysiwygActive;\n      const disButtons = this.codeViewDisabledButtons;\n\n      for (let i = 0, len = disButtons.length; i < len; i++) {\n        disButtons[i].disabled = wysiwygActive;\n      }\n\n      if (!wysiwygActive) {\n        const code_html = context.element.code.value.trim();\n        context.element.wysiwyg.innerHTML = code_html.length > 0 ? util.convertContentsForEditor(code_html) : '<p>&#65279</p>';\n        context.element.wysiwyg.scrollTop = 0;\n        context.element.code.style.display = 'none';\n        context.element.wysiwyg.style.display = 'block';\n        this._variable.wysiwygActive = true;\n        this.focus();\n      } else {\n        context.element.code.value = context.element.wysiwyg.innerHTML.trim().replace(/<\\/P>(?=[^\\n])/gi, '<\\/p>\\n');\n        context.element.wysiwyg.style.display = 'none';\n        context.element.code.style.display = 'block';\n        this._variable.wysiwygActive = false;\n        context.element.code.focus();\n      }\n    },\n\n    /**\r\n     * @description Changes to full screen or default screen\r\n     * @param {Element} element - full screen button\r\n     */\n    toggleFullScreen: function (element) {\n      if (!this._variable.isFullScreen) {\n        context.element.topArea.style.position = 'fixed';\n        context.element.topArea.style.top = '0';\n        context.element.topArea.style.left = '0';\n        context.element.topArea.style.width = '100%';\n        context.element.topArea.style.height = '100%';\n        context.element.topArea.style.zIndex = '2147483647';\n        this._variable.innerHeight_fullScreen = window.innerHeight - context.tool.bar.offsetHeight;\n        context.element.editorArea.style.height = this._variable.innerHeight_fullScreen + 'px';\n        util.removeClass(element.firstElementChild, 'icon-expansion');\n        util.addClass(element.firstElementChild, 'icon-reduction');\n      } else {\n        context.element.topArea.style.cssText = this._variable.originCssText;\n        context.element.editorArea.style.height = this._variable.editorHeight + 'px';\n        util.removeClass(element.firstElementChild, 'icon-reduction');\n        util.addClass(element.firstElementChild, 'icon-expansion');\n      }\n\n      this._variable.isFullScreen = !this._variable.isFullScreen;\n    },\n\n    /**\r\n     * @description Open the preview window or open the print window\r\n     * @param {String} mode - 'preview' or 'print'\r\n     */\n    openWindowContents: function (mode) {\n      const isPrint = mode === 'print';\n      const windowObject = window.open('', '_blank');\n      windowObject.mimeType = 'text/html';\n      windowObject.document.write('' + '<!doctype html><html>' + '<head>' + '<meta charset=\"utf-8\" />' + '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">' + '<title>' + (isPrint ? lang.toolbar.print : lang.toolbar.preview) + '</title>' + '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + util.getIncludePath(['suneditor-contents', 'suneditor'], 'css') + '\">' + '</head>' + '<body class=\"sun-editor-editable\">' + context.element.wysiwyg.innerHTML + '</body>' + '</body>' + (isPrint ? '<script>window.print();</script>' : '') + '</html>');\n    }\n  };\n  /**\r\n   * @description event function\r\n   */\n\n  const event = {\n    _shortcutKeyCode: {\n      66: ['bold', 'B'],\n      83: ['strikethrough', 'STRIKE'],\n      85: ['underline', 'U'],\n      73: ['italic', 'I'],\n      89: ['redo'],\n      90: ['undo'],\n      219: ['outdent'],\n      221: ['indent']\n    },\n    _directionKeyKeyCode: new RegExp('^(?:8|13|32|46|33|34|35|36|37|38|39|40|98|100|102|104)$'),\n    _changeButtonClassTagCheck: new RegExp('^(?:B|U|I|STRIKE|SUB|SUP)$'),\n    _findButtonEffectTag: function () {\n      const commandMap = editor.commandMap;\n      const classOnCheck = this._changeButtonClassTagCheck;\n      const commandMapNodes = [];\n      const currentNodes = [];\n      let findFormat = true,\n          findFont = true,\n          findSize = true,\n          findA = true;\n      let findB = true,\n          findI = true,\n          findU = true,\n          findS = true;\n      let cssText = '',\n          nodeName = '';\n\n      for (let selectionParent = editor.getSelectionNode(); !util.isWysiwygDiv(selectionParent); selectionParent = selectionParent.parentNode) {\n        if (!selectionParent) break;\n        if (selectionParent.nodeType !== 1) continue;\n        nodeName = selectionParent.nodeName.toUpperCase();\n        currentNodes.push(nodeName);\n        /** Format */\n\n        if (findFormat && util.isFormatElement(selectionParent)) {\n          commandMapNodes.push('FORMAT');\n          util.changeTxt(commandMap['FORMAT'], nodeName);\n          findFormat = false;\n          continue;\n        }\n        /** Font */\n\n\n        if (findFont && (selectionParent.style.fontFamily.length > 0 || selectionParent.face && selectionParent.face.length > 0)) {\n          commandMapNodes.push('FONT');\n          const selectFont = (selectionParent.style.fontFamily || selectionParent.face || lang.toolbar.font).replace(/[\"']/g, '');\n          util.changeTxt(commandMap['FONT'], selectFont);\n          findFont = false;\n        }\n        /** A */\n\n\n        if (findA && /^A$/.test(nodeName) && selectionParent.getAttribute('data-image-link') === null) {\n          if (!context.link || editor.controllerArray[0] !== context.link.linkBtn) {\n            editor.callPlugin('link', function () {\n              editor.plugins.link.call_controller_linkButton.call(editor, selectionParent);\n            });\n          }\n\n          findA = false;\n        } else if (findA && context.link && editor.controllerArray[0] === context.link.linkBtn) {\n          editor.controllersOff();\n        }\n        /** SPAN */\n\n\n        if (findSize && /^SPAN$/.test(nodeName)) {\n          /** font size */\n          if (selectionParent.style.fontSize.length > 0) {\n            commandMapNodes.push('SIZE');\n            util.changeTxt(commandMap['SIZE'], selectionParent.style.fontSize.match(/\\d+/)[0]);\n            findSize = false;\n          }\n        }\n        /** command map */\n\n\n        cssText = selectionParent.style.cssText;\n\n        if (findB && /font\\-weight\\s*:\\s*(?:\\d+|bold|bolder)(?:;|\\s|)/.test(cssText)) {\n          commandMapNodes.push('B');\n          findB = false;\n        }\n\n        if (findI && /font\\-style\\s*:\\s*(?:italic|oblique)(?:;|\\s)/.test(cssText)) {\n          commandMapNodes.push('I');\n          findI = false;\n        }\n\n        if (findU && /text\\-decoration(?:\\-line)?\\s*:\\s*underline(?:;|\\s|)/.test(cssText)) {\n          commandMapNodes.push('U');\n          findU = false;\n        }\n\n        if (findS && /text\\-decoration(?:\\-line)?\\s*:\\s*line-through(?:;|\\s|)/.test(cssText)) {\n          commandMapNodes.push('STRIKE');\n          findS = false;\n        }\n\n        commandMapNodes.push(/^STRONG$/.test(nodeName) ? 'B' : /^EM$/.test(nodeName) ? 'I' : nodeName);\n      }\n      /** A Tag edit controller off */\n\n\n      if (findA) editor.controllersOff();\n      /** toggle class on */\n\n      for (let i = 0; i < commandMapNodes.length; i++) {\n        nodeName = commandMapNodes[i];\n\n        if (classOnCheck.test(nodeName)) {\n          util.addClass(commandMap[nodeName], 'on');\n        }\n      }\n      /** remove class, display text */\n\n\n      for (let key in commandMap) {\n        if (commandMapNodes.indexOf(key) > -1) continue;\n\n        if (/^FONT/i.test(key)) {\n          util.changeTxt(commandMap[key], lang.toolbar.font);\n        } else if (/^SIZE$/i.test(key)) {\n          util.changeTxt(commandMap[key], lang.toolbar.fontSize);\n        } else {\n          util.removeClass(commandMap[key], 'on');\n        }\n      }\n      /** save current nodes */\n\n\n      editor._variable.currentNodes = currentNodes.reverse();\n      /**  Displays the current node structure to resizebar */\n\n      if (context.user.showPathLabel) context.element.navigation.textContent = editor._variable.currentNodes.join(' > ');\n    },\n    resize_window: function () {\n      if (editor._variable.isFullScreen) {\n        editor._variable.innerHeight_fullScreen += window.innerHeight - context.tool.bar.offsetHeight - editor._variable.innerHeight_fullScreen;\n        context.element.editorArea.style.height = editor._variable.innerHeight_fullScreen + 'px';\n      }\n    },\n    onClick_toolbar: function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      let target = e.target;\n      let display = target.getAttribute('data-display');\n      let command = target.getAttribute('data-command');\n      let className = target.className;\n\n      while (!command && !/editor_tool/.test(className) && !/sun-editor-id-toolbar/.test(className)) {\n        target = target.parentNode;\n        command = target.getAttribute('data-command');\n        display = target.getAttribute('data-display');\n        className = target.className;\n      }\n\n      if (!command && !display) return;\n      if (target.disabled) return;\n      /** Dialog, Submenu */\n\n      if (display) {\n        if (/submenu/.test(display) && (target.nextElementSibling === null || target !== editor.submenuActiveButton)) {\n          editor.submenuOff();\n          editor.callPlugin(command, function () {\n            editor.submenuOn(target);\n          });\n          return;\n        } else if (/dialog/.test(display)) {\n          editor.callPlugin(command, function () {\n            editor.plugins.dialog.openDialog.call(editor, command, target.getAttribute('data-option'), false);\n          });\n        }\n\n        editor.submenuOff();\n        return;\n      }\n\n      editor.submenuOff();\n      /** default command */\n\n      if (command) {\n        editor.focus();\n\n        switch (command) {\n          case 'codeView':\n            editor.toggleCodeView();\n            util.toggleClass(target, 'on');\n            break;\n\n          case 'fullScreen':\n            editor.toggleFullScreen(target);\n            util.toggleClass(target, 'on');\n            break;\n\n          case 'indent':\n          case 'outdent':\n            editor.indent(editor.getSelectionNode(), command);\n            break;\n\n          case 'redo':\n          case 'undo':\n          case 'removeFormat':\n            editor.execCommand(command, false, null);\n            break;\n\n          case 'preview':\n          case 'print':\n            editor.openWindowContents(command);\n            break;\n\n          case 'showBlocks':\n            editor.toggleDisplayBlocks();\n            util.toggleClass(target, 'on');\n            break;\n\n          case 'subscript':\n            if (util.hasClass(context.tool.superscript, 'on')) {\n              editor.execCommand('superscript', false, null);\n              util.removeClass(context.tool.superscript, 'on');\n            }\n\n            editor.execCommand(command, false, null);\n            util.toggleClass(target, 'on');\n            break;\n\n          case 'superscript':\n            if (util.hasClass(context.tool.subscript, 'on')) {\n              editor.execCommand('subscript', false, null);\n              util.removeClass(context.tool.subscript, 'on');\n            }\n\n            editor.execCommand(command, false, null);\n            util.toggleClass(target, 'on');\n            break;\n\n          default:\n            editor.execCommand(command, false, target.getAttribute('data-value'));\n            util.toggleClass(target, 'on');\n        }\n      }\n    },\n    onMouseUp_wysiwyg: function (e) {\n      e.stopPropagation();\n      const targetElement = e.target;\n      editor.submenuOff();\n\n      if (/^HTML$/i.test(targetElement.nodeName)) {\n        e.preventDefault();\n        editor.focus();\n        return;\n      }\n\n      editor._setEditorRange();\n\n      event._findButtonEffectTag();\n\n      if (/^IMG$/i.test(targetElement.nodeName)) {\n        e.preventDefault();\n        editor.callPlugin('image', function () {\n          const size = editor.plugins.resizing.call_controller_resize.call(editor, targetElement, 'image');\n          editor.plugins.image.onModifyMode.call(editor, targetElement, size);\n        });\n        return;\n      }\n\n      if (/^TD$/i.test(targetElement.nodeName) || /^TD$/i.test(targetElement.parentNode.nodeName)) {\n        editor.controllersOff();\n        let td = targetElement;\n\n        while (!/^TD$/i.test(td.nodeName)) {\n          td = td.parentNode;\n        }\n\n        editor.callPlugin('table', editor.plugins.table.call_controller_tableEdit.bind(editor, td));\n        return;\n      }\n    },\n    onKeyDown_wysiwyg: function (e) {\n      const keyCode = e.keyCode;\n      const shift = e.shiftKey;\n      const ctrl = e.ctrlKey || e.metaKey;\n      const alt = e.altKey;\n      e.stopPropagation();\n\n      function shortcutCommand(keyCode) {\n        const key = event._shortcutKeyCode[keyCode];\n        if (!key) return false;\n        editor.execCommand(key[0], false, null);\n        util.toggleClass(editor.commandMap[key[1]], 'on');\n        return true;\n      }\n      /** Shortcuts */\n\n\n      if (ctrl && !/^(?:16|17|18)$/.test(keyCode)) {\n        if (!(shift && keyCode !== 83) && shortcutCommand(keyCode)) {\n          e.preventDefault();\n          return;\n        }\n      }\n      /** default key action */\n\n\n      const selectionNode = editor.getSelectionNode();\n\n      switch (keyCode) {\n        case 8:\n          /**backspace key*/\n          if (util.isFormatElement(selectionNode) && util.isWysiwygDiv(selectionNode.parentNode) && selectionNode.previousSibling === null) {\n            e.preventDefault();\n            e.stopPropagation();\n            selectionNode.innerHTML = '&#65279';\n            return false;\n          }\n\n          break;\n\n        case 9:\n          /**tab key*/\n          e.preventDefault();\n          if (ctrl || alt) break;\n          editor.controllersOff();\n          let currentNode = selectionNode || editor.getSelectionNode();\n\n          while (!/^TD$/i.test(currentNode.nodeName) && !util.isWysiwygDiv(currentNode)) {\n            currentNode = currentNode.parentNode;\n          }\n\n          if (currentNode && /^TD$/i.test(currentNode.nodeName)) {\n            const table = util.getParentElement(currentNode, 'table');\n            const cells = util.getListChildren(table, util.isCell);\n            let idx = shift ? util.prevIdx(cells, currentNode) : util.nextIdx(cells, currentNode);\n            if (idx === cells.length && !shift) idx = 0;\n            if (idx === -1 && shift) idx = cells.length - 1;\n            const moveCell = cells[idx];\n            if (!moveCell) return false;\n            editor.setRange(moveCell, 0, moveCell, 0);\n            break;\n          }\n          /** if P Tag */\n\n\n          if (shift) break;\n          const tabText = document.createTextNode(new Array(editor._variable.tabSize + 1).join('\\u00A0'));\n          editor.insertNode(tabText);\n          editor.setRange(tabText, editor._variable.tabSize, tabText, editor._variable.tabSize);\n          break;\n      }\n    },\n    onKeyUp_wysiwyg: function (e) {\n      editor._setEditorRange();\n\n      editor.controllersOff();\n      const selectionNode = editor.getSelectionNode();\n      /** when format tag deleted */\n\n      if (e.keyCode === 8 && util.isWysiwygDiv(selectionNode) && context.element.wysiwyg.textContent.length === 0) {\n        e.preventDefault();\n        e.stopPropagation();\n        const oFormatTag = document.createElement(util.isFormatElement(editor._variable.currentNodes[0]) ? editor._variable.currentNodes[0] : 'P');\n        oFormatTag.innerHTML = '&#65279';\n        selectionNode.appendChild(oFormatTag);\n        editor.setSelectionNode(oFormatTag);\n        editor.setRange(oFormatTag, 0, oFormatTag, 0);\n        return;\n      }\n\n      if ((util.isWysiwygDiv(selectionNode.parentElement) || util.isRangeFormatElement(selectionNode.parentElement)) && selectionNode.nodeType === 3) {\n        editor.execCommand('formatBlock', false, util.isFormatElement(editor._variable.currentNodes[0]) ? editor._variable.currentNodes[0] : 'P');\n        return;\n      }\n\n      if (event._directionKeyKeyCode.test(e.keyCode)) {\n        event._findButtonEffectTag();\n      }\n    },\n    onScroll_wysiwyg: function () {\n      editor.controllersOff();\n    },\n    onDrop_wysiwyg: function (e) {\n      const files = e.dataTransfer.files;\n      if (files.length === 0) return true;\n      e.stopPropagation();\n      e.preventDefault();\n      editor.focus();\n      editor.callPlugin('image', function () {\n        context.image.imgInputFile.files = files;\n        editor.plugins.image.onRender_imgInput.call(editor);\n        context.image.imgInputFile.files = null;\n      });\n    },\n    onMouseDown_resizeBar: function (e) {\n      e.stopPropagation();\n      editor._variable.resizeClientY = e.clientY;\n      context.element.resizeBackground.style.display = 'block';\n\n      function closureFunc() {\n        context.element.resizeBackground.style.display = 'none';\n        document.removeEventListener('mousemove', event.resize_editor);\n        document.removeEventListener('mouseup', closureFunc);\n      }\n\n      document.addEventListener('mousemove', event.resize_editor);\n      document.addEventListener('mouseup', closureFunc);\n    },\n    resize_editor: function (e) {\n      const resizeInterval = e.clientY - editor._variable.resizeClientY;\n      context.element.editorArea.style.height = context.element.editorArea.offsetHeight + resizeInterval + 'px';\n      editor._variable.editorHeight = context.element.editorArea.offsetHeight + resizeInterval;\n      editor._variable.resizeClientY = e.clientY;\n    }\n  };\n  /** add event listeners */\n\n  /** tool bar event */\n\n  context.tool.bar.addEventListener('click', event.onClick_toolbar, false);\n  /** editor area */\n\n  context.element.wysiwyg.addEventListener('scroll', event.onScroll_wysiwyg, false);\n  context.element.wysiwyg.addEventListener('mouseup', event.onMouseUp_wysiwyg, false);\n  context.element.wysiwyg.addEventListener('keydown', event.onKeyDown_wysiwyg, false);\n  context.element.wysiwyg.addEventListener('keyup', event.onKeyUp_wysiwyg, false);\n  context.element.wysiwyg.addEventListener('drop', event.onDrop_wysiwyg, false);\n  /** resize bar */\n\n  context.element.resizebar.addEventListener('mousedown', event.onMouseDown_resizeBar, false);\n  /** window resize event */\n\n  window.addEventListener('resize', event.resize_window, false);\n  /** add plugin to plugins object */\n\n  if (plugins) {\n    Object.keys(plugins).map(function (key) {\n      let plugin = plugins[key];\n      editor.plugins[plugin.name] = util.copyObj(plugin);\n    });\n  }\n  /** User function */\n\n\n  return {\n    /**\r\n     * @description Copying the contents of the editor to the original textarea\r\n     */\n    save: function () {\n      if (editor._variable.wysiwygActive) {\n        context.element.originElement.value = context.element.wysiwyg.innerHTML;\n      } else {\n        context.element.originElement.value = context.element.code.value;\n      }\n    },\n\n    /**\r\n     * @description Gets the suneditor's context object. Contains settings, plugins, and cached element objects\r\n     * @returns {Object}\r\n     */\n    getContext: function () {\n      return context;\n    },\n\n    /**\r\n     * @description Gets the contents of the suneditor\r\n     * @returns {String}\r\n     */\n    getContents: function () {\n      let content = '';\n      if (context.element.wysiwyg.innerText.trim().length === 0) return content;\n\n      if (editor._variable.wysiwygActive) {\n        content = context.element.wysiwyg.innerHTML;\n      } else {\n        content = context.element.code.value;\n      }\n\n      return content;\n    },\n\n    /**\r\n     * @description Change the contents of the suneditor\r\n     * @param {String} content - Content to Input\r\n     */\n    setContents: function (content) {\n      const innerHTML = util.convertContentsForEditor(content);\n\n      if (editor._variable.wysiwygActive) {\n        context.element.wysiwyg.innerHTML = innerHTML;\n      } else {\n        context.element.code.value = innerHTML;\n      }\n    },\n\n    /**\r\n     * @description Add content to the suneditor\r\n     * @param {String} content - to Input\r\n     */\n    appendContent: function (content) {\n      if (editor._variable.wysiwygActive) {\n        const oP = document.createElement('P');\n        oP.innerHTML = content;\n        context.element.wysiwyg.appendChild(oP);\n      } else {\n        context.element.code.value += oP.outerHTML;\n      }\n    },\n\n    /**\r\n     * @description Disable the suneditor\r\n     */\n    disabled: function () {\n      context.tool.cover.style.display = 'block';\n      context.element.wysiwyg.setAttribute('contenteditable', false);\n    },\n\n    /**\r\n     * @description Enabled the suneditor\r\n     */\n    enabled: function () {\n      context.tool.cover.style.display = 'none';\n      context.element.wysiwyg.setAttribute('contenteditable', true);\n    },\n\n    /**\r\n     * @description Show the suneditor\r\n     */\n    show: function () {\n      const topAreaStyle = context.element.topArea.style;\n      if (topAreaStyle.display === 'none') topAreaStyle.display = context.user.display;\n    },\n\n    /**\r\n     * @description Hide the suneditor\r\n     */\n    hide: function () {\n      context.element.topArea.style.display = 'none';\n    },\n\n    /**\r\n     * @description Destroy the suneditor\r\n     */\n    destroy: function () {\n      /** remove window event listeners */\n      window.removeEventListener('resize', event.resize_window);\n      /** remove element */\n\n      util.removeItem(context.element.topArea);\n      this.save = null;\n      this.getContext = null;\n      this.getContent = null;\n      this.setContent = null;\n      this.appendContent = null;\n      this.disabled = null;\n      this.enabled = null;\n      this.show = null;\n      this.hide = null;\n      this.destroy = null;\n    }\n  };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (core);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/core.js\n");

/***/ }),

/***/ "./src/lib/util.js":
/*!*************************!*\
  !*** ./src/lib/util.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n/**\r\n * @description utility function\r\n */\n\nconst util = {\n  /**\r\n   * @description Gets XMLHttpRequest object\r\n   * @returns {Object}\r\n   */\n  getXMLHttpRequest: function () {\n    /** IE */\n    if (window.ActiveXObject) {\n      try {\n        return new ActiveXObject('Msxml2.XMLHTTP');\n      } catch (e) {\n        try {\n          return new ActiveXObject('Microsoft.XMLHTTP');\n        } catch (e1) {\n          return null;\n        }\n      }\n    }\n    /** netscape */\n    else if (window.XMLHttpRequest) {\n        return new XMLHttpRequest();\n      }\n      /** fail */\n      else {\n          return null;\n        }\n  },\n\n  /**\r\n   * @description Copies object\r\n   * @param {Object} obj - Object to be copy\r\n   * @returns {Object}\r\n   */\n  copyObj: function (obj) {\n    const copy = {};\n\n    for (let attr in obj) {\n      copy[attr] = obj[attr];\n    }\n\n    return copy;\n  },\n\n  /**\r\n   * @description Get the the tag path of the arguments value\r\n   * If not found, return the first found value\r\n   * @param {Array} nameArray - File name array\r\n   * @param {String} extension - js, css\r\n   * @returns {String}\r\n   */\n  getIncludePath: function (nameArray, extension) {\n    let path = '';\n    const pathList = [];\n    const tagName = extension === 'js' ? 'script' : 'link';\n    const src = extension === 'js' ? 'src' : 'href';\n    let fileName = '(?:';\n\n    for (let i = 0, len = nameArray.length; i < len; i++) {\n      fileName += nameArray[i] + (i < len - 1 ? '|' : ')');\n    }\n\n    const regExp = new RegExp('(^|.*[\\\\\\\\\\/])' + fileName + '(\\\\.[^\\\\\\\\/]+)?\\.' + extension + '(?:\\\\?.*|;.*)?$', 'i');\n    const extRegExp = new RegExp('.+\\\\.' + extension + '(?:\\\\?.*|;.*)?$', 'i');\n\n    for (let c = document.getElementsByTagName(tagName), i = 0; i < c.length; i++) {\n      if (extRegExp.test(c[i][src])) {\n        pathList.push(c[i]);\n      }\n    }\n\n    for (let i = 0; i < pathList.length; i++) {\n      let editorTag = pathList[i][src].match(regExp);\n\n      if (editorTag) {\n        path = editorTag[0];\n        break;\n      }\n    }\n\n    if (path === '') path = pathList.length > 0 ? pathList[0][src] : '';\n    -1 === path.indexOf(':/') && '//' !== path.slice(0, 2) && (path = 0 === path.indexOf('/') ? location.href.match(/^.*?:\\/\\/[^\\/]*/)[0] + path : location.href.match(/^[^\\?]*\\/(?:)/)[0] + path);\n    if (!path) throw '[SUNEDITOR.util.getIncludePath.fail] The SUNEDITOR installation path could not be automatically detected. (name: +' + name + ', extension: ' + extension + ')';\n    return path;\n  },\n\n  /**\r\n   * @description Converts contents into a format that can be placed in an editor\r\n   * @param contents - contents\r\n   * @returns {String}\r\n   */\n  convertContentsForEditor: function (contents) {\n    let tag,\n        baseHtml,\n        innerHTML = '';\n    contents = contents.trim();\n    tag = document.createRange().createContextualFragment(contents).childNodes;\n\n    for (let i = 0, len = tag.length; i < len; i++) {\n      baseHtml = tag[i].outerHTML || tag[i].textContent;\n\n      if (tag[i].nodeType === 3) {\n        const textArray = baseHtml.split(/\\n/g);\n        let text = '';\n\n        for (let t = 0, tLen = textArray.length; t < tLen; t++) {\n          text = textArray[t].trim();\n          if (text.length > 0) innerHTML += '<P>' + text + '</p>';\n        }\n      } else {\n        innerHTML += baseHtml;\n      }\n    }\n\n    const ec = {\n      '&': '&amp;',\n      '\\u00A0': '&nbsp;',\n      '\\'': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    };\n    contents = contents.replace(/&|\\u00A0|'|\\<|\\>/g, function (m) {\n      return typeof ec[m] === 'string' ? ec[m] : m;\n    });\n    if (innerHTML.length === 0) innerHTML = '<p>' + (contents.length > 0 ? contents : '&#65279') + '</p>';\n    return innerHTML;\n  },\n\n  /**\r\n   * @description It is judged whether it is the edit region top div element.\r\n   * @param {Element} element - The element to check\r\n   * @returns {Boolean}\r\n   */\n  isWysiwygDiv: function (element) {\n    if (element && element.nodeType === 1 && this.hasClass(element, 'sun-editor-id-wysiwyg')) return true;\n    return false;\n  },\n\n  /**\r\n   * @description It is judged whether it is the format element (P, DIV, H1-6, LI)\r\n   * @param {Element} element - The element to check\r\n   * @returns {Boolean}\r\n   */\n  isFormatElement: function (element) {\n    if (element && element.nodeType === 1 && /^(?:P|DIV|H[1-6]|LI)$/i.test(element.nodeName) && !/sun-editor-id-media-container/.test(element.className)) return true;\n    return false;\n  },\n\n  /**\r\n   * @description It is judged whether it is the range format element. (blockquote, TABLE, TR, TD, OL, UL, PRE)\r\n   * * Range format element is wrap the format element  (P, DIV, H1-6, LI)\r\n   * @param {Element} element - The element to check\r\n   * @returns {Boolean}\r\n   */\n  isRangeFormatElement: function (element) {\n    if (element && element.nodeType === 1 && /^(?:BLOCKQUOTE|TABLE|TBODY|THEAD|TFOOT|TR|TD|OL|UL|PRE)$/i.test(element.nodeName)) return true;\n    return false;\n  },\n\n  /**\r\n   * @description Get format element of the argument value (P, DIV, H[1-6], LI)\r\n   * @param {Element} element - Reference element if null or no value, it is relative to the current focus node.\r\n   * @returns {Element}\r\n   */\n  getFormatElement: function (element) {\n    if (!element) return null;\n\n    while (!this.isFormatElement(element) && !this.isWysiwygDiv(element.parentNode)) {\n      element = element.parentNode;\n    }\n\n    if (this.isWysiwygDiv(element) || this.isRangeFormatElement(element)) {\n      const firstFormatElement = this.getListChildren(element, function (current) {\n        return this.isFormatElement(current);\n      }.bind(this))[0];\n      return firstFormatElement;\n    }\n\n    return element;\n  },\n\n  /**\r\n   * @description Get range format element of the argument value (blockquote, TABLE, TR, TD, OL, UL, PRE)\r\n   * @param {Element} element - Reference element if null or no value, it is relative to the current focus node.\r\n   * @returns {Element|null}\r\n   */\n  getRangeFormatElement: function (element) {\n    if (!element) return null;\n\n    while (!this.isRangeFormatElement(element) && !this.isWysiwygDiv(element)) {\n      element = element.parentNode;\n    }\n\n    return this.isWysiwygDiv(element) ? null : element;\n  },\n\n  /**\r\n   * @description Get the index of the argument value in the element array\r\n   * @param {array} array - element array\r\n   * @param {Element} element - Element to find index\r\n   * @returns {Number}\r\n   */\n  getArrayIndex: function (array, element) {\n    let idx = -1;\n\n    for (let i = 0, len = array.length; i < len; i++) {\n      if (array[i] === element) {\n        idx = i;\n        break;\n      }\n    }\n\n    return idx;\n  },\n\n  /**\r\n   * @description Get the next index of the argument value in the element array\r\n   * @param {array} array - element array\r\n   * @param {Element} item - Element to find index\r\n   * @returns {Number}\r\n   */\n  nextIdx: function (array, item) {\n    let idx = this.getArrayIndex(array, item);\n    if (idx === -1) return -1;\n    return idx + 1;\n  },\n\n  /**\r\n   * @description Get the previous index of the argument value in the element array\r\n   * @param {array} array - element array\r\n   * @param {Element} item - Element to find index\r\n   * @returns {Number}\r\n   */\n  prevIdx: function (array, item) {\n    let idx = this.getArrayIndex(array, item);\n    if (idx === -1) return -1;\n    return idx - 1;\n  },\n\n  /**\r\n   * @description Gets whether the cell is a table\r\n   * @param {Element} node - Nodes to scan\r\n   * @returns {Boolean}\r\n   */\n  isCell: function (node) {\n    return node && /^(?:TD|TH)$/i.test(node.nodeName);\n  },\n\n  /**\r\n   * @description Get all child nodes of the argument value element (Without text node)\r\n   * @param {Element} element - element to get child node\r\n   * @param {(function|null)} validation - Conditional function\r\n   * @returns {Array}\r\n   */\n  getListChildren: function (element, validation) {\n    const children = [];\n\n    validation = validation || function () {\n      return true;\n    };\n\n    (function recursionFunc(current) {\n      if (element !== current && validation(current)) {\n        children.push(current);\n      }\n\n      for (let i = 0, len = current.children.length; i < len; i++) {\n        recursionFunc(current.children[i]);\n      }\n    })(element);\n\n    return children;\n  },\n\n  /**\r\n   * @description Get all child nodes of the argument value element (Include text nodes)\r\n   * @param {Element} element - element to get child node\r\n   * @param {(function|null)} validation - Conditional function\r\n   * @returns {Array}\r\n   */\n  getListChildNodes: function (element, validation) {\n    const children = [];\n\n    validation = validation || function () {\n      return true;\n    };\n\n    (function recursionFunc(current) {\n      if (validation(current)) {\n        children.push(current);\n      }\n\n      for (let i = 0, len = current.childNodes.length; i < len; i++) {\n        recursionFunc(current.childNodes[i]);\n      }\n    })(element);\n\n    return children;\n  },\n\n  /**\r\n   * @description Get the parent element of the argument value.\r\n   * A tag that satisfies the query condition is imported.\r\n   * Returns null if not found.\r\n   * @param {Node} element - Reference element\r\n   * @param {String} query - Query String (tagName, .className, #ID, :name)\r\n   * Not use it like jquery.\r\n   * Only one condition can be entered at a time.\r\n   * @returns {Element|null}\r\n   */\n  getParentElement: function (element, query) {\n    let attr;\n\n    if (/\\./.test(query)) {\n      attr = 'className';\n      query = query.split('.')[1];\n    } else if (/#/.test(query)) {\n      attr = 'id';\n      query = '^' + query.split('#')[1] + '$';\n    } else if (/:/.test(query)) {\n      attr = 'name';\n      query = '^' + query.split(':')[1] + '$';\n    } else {\n      attr = 'tagName';\n      query = '^' + query + '$';\n    }\n\n    const check = new RegExp(query, 'i');\n\n    while (element && (element.nodeType === 3 || !check.test(element[attr]))) {\n      if (this.isWysiwygDiv(element)) {\n        return null;\n      }\n\n      element = element.parentNode;\n    }\n\n    return element;\n  },\n\n  /**\r\n   * @description Returns the position of the left and top of argument. {left:0, top:0}\r\n   * @param {Element} element - Element node\r\n   * @returns {Object}\r\n   */\n  getOffset: function (element) {\n    let tableOffsetLeft = 0;\n    let tableOffsetTop = 0;\n    let tableElement = element.parentNode;\n\n    while (!this.isWysiwygDiv(tableElement)) {\n      if (/^(?:TD|TABLE)$/i.test(tableElement.nodeName)) {\n        tableOffsetLeft += tableElement.offsetLeft;\n        tableOffsetTop += tableElement.offsetTop;\n      }\n\n      tableElement = tableElement.parentNode;\n    }\n\n    if (/^(?:SUB|SUP)$/i.test(element.parentNode.nodeName)) {\n      tableOffsetLeft = element.parentNode.offsetLeft;\n      tableOffsetTop = element.parentNode.offsetTop;\n    }\n\n    return {\n      left: element.offsetLeft + tableOffsetLeft,\n      top: element.offsetTop + tableOffsetTop - tableElement.scrollTop\n    };\n  },\n\n  /**\r\n   * @description Set the text content value of the argument value element\r\n   * @param {Element} element - Element to replace text content\r\n   * @param {String} txt - Text to be applied\r\n   */\n  changeTxt: function (element, txt) {\n    if (!element || !txt) return;\n    element.textContent = txt;\n  },\n\n  /**\r\n   * @description Determine whether any of the matched elements are assigned the given class\r\n   * @param {Element} element - Elements to search class name\r\n   * @param {String} className - Class name to search for\r\n   * @returns {Boolean}\r\n   */\n  hasClass: function (element, className) {\n    if (!element) return;\n    return element.classList.contains(className.trim());\n  },\n\n  /**\r\n   * @description Append the className value of the argument value element\r\n   * @param {Element} element - Elements to add class name\r\n   * @param {String} className - Class name to be add\r\n   */\n  addClass: function (element, className) {\n    if (!element) return;\n    const check = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    if (check.test(element.className)) return;\n    element.className += ' ' + className;\n  },\n\n  /**\r\n   * @description Delete the className value of the argument value element\r\n   * @param {Element} element - Elements to remove class name\r\n   * @param {String} className - Class name to be remove\r\n   */\n  removeClass: function (element, className) {\n    if (!element) return;\n    const check = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n    element.className = element.className.replace(check, ' ').trim();\n  },\n\n  /**\r\n   * @description Argument value If there is no class name, insert it and delete the class name if it exists\r\n   * @param {Element} element - Elements to replace class name\r\n   * @param {String} className - Class name to be change\r\n   */\n  toggleClass: function (element, className) {\n    if (!element) return;\n    const check = new RegExp('(\\\\s|^)' + className + '(\\\\s|$)');\n\n    if (check.test(element.className)) {\n      element.className = element.className.replace(check, ' ').trim();\n    } else {\n      element.className += ' ' + className;\n    }\n  },\n\n  /**\r\n   * @description Delete argumenu value element\r\n   * @param {Element} item - Element to be remove\r\n   */\n  removeItem: function (item) {\n    try {\n      item.remove();\n    } catch (e) {\n      item.parentNode.removeChild(item);\n    }\n  },\n\n  /**\r\n   * @description Delete a empty child node of argument element\r\n   * @param {Element} element - Element node\r\n   */\n  removeEmptyNode: function (element) {\n    (function recursionFunc(current) {\n      if ((current.textContent.trim().length === 0 || current.textContent === '&#65279') && !/^BR$/i.test(current.nodeName)) {\n        current.parentNode.removeChild(current);\n      } else {\n        for (let i = 0, len = current.children.length; i < len; i++) {\n          if (!current.children[i]) break;\n          recursionFunc(current.children[i]);\n        }\n      }\n    })(element);\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (util);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/util.js\n");

/***/ }),

/***/ "./src/suneditor.js":
/*!**************************!*\
  !*** ./src/suneditor.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/util */ \"./src/lib/util.js\");\n/* harmony import */ var _lib_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/core */ \"./src/lib/core.js\");\n/* harmony import */ var _lib_constructor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/constructor */ \"./src/lib/constructor.js\");\n/* harmony import */ var _lib_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/context */ \"./src/lib/context.js\");\n/* harmony import */ var _lang_en__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lang/en */ \"./src/lang/en.js\");\n/*\r\n * wysiwyg web editor\r\n *\r\n * suneditor.js\r\n * Copyright 2017 JiHong Lee.\r\n * MIT license.\r\n */\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  util: _lib_util__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  core: _lib_core__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _Constructor: _lib_constructor__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n  _Context: _lib_context__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n  _defaultLang: _lang_en__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n\n  /**\r\n   * @description Returns the create function with preset options.\r\n   * If the options overlap, the options of the 'create' function take precedence.\r\n   * @param {Json} options - Initialization options\r\n   * @returns {function}\r\n   */\n  init: function (init_options) {\n    const self = this;\n    return {\n      create: function (idOrElement, options) {\n        return self.create(idOrElement, options, init_options);\n      }\n    };\n  },\n\n  /**\r\n   * @description Create the suneditor\r\n   * @param {String|Element} idOrElement - textarea Id or textarea element\r\n   * @param {Json} options - user options\r\n   * @returns {{save: save, getContext: getContext, getContent: getContent, setContent: setContent, appendContent: appendContent, disabled: disabled, enabled: enabled, show: show, hide: hide, destroy: destroy}}\r\n   */\n  create: function (idOrElement, options, _init_options) {\n    if (typeof options !== 'object') options = {};\n\n    if (_init_options) {\n      // options = Object.assign(this.util.copyObj(_init_options), options);\n      options = [this.util.copyObj(_init_options), options].reduce(function (init, option) {\n        Object.keys(option).forEach(function (key) {\n          init[key] = option[key];\n        });\n        return init;\n      }, {});\n    }\n\n    const element = typeof idOrElement === 'string' ? document.getElementById(idOrElement) : idOrElement;\n\n    if (!element) {\n      if (typeof idOrElement === 'string') {\n        throw Error('[SUNEDITOR.create.fail] The element for that id was not found (ID:\"' + idOrElement + '\")');\n      }\n\n      throw Error('[SUNEDITOR.create.fail] suneditor requires textarea\\'s element or id value');\n    }\n\n    const cons = this._Constructor.init(element, options, options.lang || this._defaultLang, options.plugins, this.util);\n\n    if (document.getElementById(cons.constructed._top.id)) {\n      throw Error('[SUNEDITOR.create.fail] The ID of the suneditor you are trying to create already exists (ID:\"' + cons.constructed._top.id + '\")');\n    }\n\n    element.style.display = 'none';\n    cons.constructed._top.style.display = 'block';\n    /** Create to sibling node */\n\n    if (typeof element.nextElementSibling === 'object') {\n      element.parentNode.insertBefore(cons.constructed._top, element.nextElementSibling);\n    } else {\n      element.parentNode.appendChild(cons.constructed._top);\n    }\n\n    return this.core(this._Context(element, cons.constructed, cons.options), this.util, cons.plugins, cons.options.lang);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3VuZWRpdG9yLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3N1bmVkaXRvci5qcz9iNTliIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIHd5c2l3eWcgd2ViIGVkaXRvclxyXG4gKlxyXG4gKiBzdW5lZGl0b3IuanNcclxuICogQ29weXJpZ2h0IDIwMTcgSmlIb25nIExlZS5cclxuICogTUlUIGxpY2Vuc2UuXHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgdXRpbCBmcm9tICcuL2xpYi91dGlsJztcclxuaW1wb3J0IGNvcmUgZnJvbSAnLi9saWIvY29yZSc7XHJcbmltcG9ydCBfQ29uc3RydWN0b3IgZnJvbSAnLi9saWIvY29uc3RydWN0b3InO1xyXG5pbXBvcnQgX0NvbnRleHQgZnJvbSAnLi9saWIvY29udGV4dCc7XHJcbmltcG9ydCBfZGVmYXVsdExhbmcgZnJvbSAnLi9sYW5nL2VuJ1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHV0aWwsXHJcbiAgICBjb3JlLFxyXG4gICAgX0NvbnN0cnVjdG9yLFxyXG4gICAgX0NvbnRleHQsXHJcbiAgICBfZGVmYXVsdExhbmcsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gUmV0dXJucyB0aGUgY3JlYXRlIGZ1bmN0aW9uIHdpdGggcHJlc2V0IG9wdGlvbnMuXHJcbiAgICAgKiBJZiB0aGUgb3B0aW9ucyBvdmVybGFwLCB0aGUgb3B0aW9ucyBvZiB0aGUgJ2NyZWF0ZScgZnVuY3Rpb24gdGFrZSBwcmVjZWRlbmNlLlxyXG4gICAgICogQHBhcmFtIHtKc29ufSBvcHRpb25zIC0gSW5pdGlhbGl6YXRpb24gb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9ufVxyXG4gICAgICovXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoaW5pdF9vcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gKGlkT3JFbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5jcmVhdGUoaWRPckVsZW1lbnQsIG9wdGlvbnMsIGluaXRfb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIENyZWF0ZSB0aGUgc3VuZWRpdG9yXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xFbGVtZW50fSBpZE9yRWxlbWVudCAtIHRleHRhcmVhIElkIG9yIHRleHRhcmVhIGVsZW1lbnRcclxuICAgICAqIEBwYXJhbSB7SnNvbn0gb3B0aW9ucyAtIHVzZXIgb3B0aW9uc1xyXG4gICAgICogQHJldHVybnMge3tzYXZlOiBzYXZlLCBnZXRDb250ZXh0OiBnZXRDb250ZXh0LCBnZXRDb250ZW50OiBnZXRDb250ZW50LCBzZXRDb250ZW50OiBzZXRDb250ZW50LCBhcHBlbmRDb250ZW50OiBhcHBlbmRDb250ZW50LCBkaXNhYmxlZDogZGlzYWJsZWQsIGVuYWJsZWQ6IGVuYWJsZWQsIHNob3c6IHNob3csIGhpZGU6IGhpZGUsIGRlc3Ryb3k6IGRlc3Ryb3l9fVxyXG4gICAgICovXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIChpZE9yRWxlbWVudCwgb3B0aW9ucywgX2luaXRfb3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICBpZiAoX2luaXRfb3B0aW9ucykge1xyXG4gICAgICAgICAgICAvLyBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLnV0aWwuY29weU9iaihfaW5pdF9vcHRpb25zKSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIG9wdGlvbnMgPSAgW3RoaXMudXRpbC5jb3B5T2JqKF9pbml0X29wdGlvbnMpLCBvcHRpb25zXS5yZWR1Y2UoZnVuY3Rpb24gKGluaXQsIG9wdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMob3B0aW9uKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0W2tleV0gPSBvcHRpb25ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHR5cGVvZiBpZE9yRWxlbWVudCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZE9yRWxlbWVudCkgOiBpZE9yRWxlbWVudDtcclxuXHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaWRPckVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gVGhlIGVsZW1lbnQgZm9yIHRoYXQgaWQgd2FzIG5vdCBmb3VuZCAoSUQ6XCInICsgaWRPckVsZW1lbnQgKyAnXCIpJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdbU1VORURJVE9SLmNyZWF0ZS5mYWlsXSBzdW5lZGl0b3IgcmVxdWlyZXMgdGV4dGFyZWFcXCdzIGVsZW1lbnQgb3IgaWQgdmFsdWUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnMgPSB0aGlzLl9Db25zdHJ1Y3Rvci5pbml0KGVsZW1lbnQsIG9wdGlvbnMsIChvcHRpb25zLmxhbmcgfHwgIHRoaXMuX2RlZmF1bHRMYW5nKSwgb3B0aW9ucy5wbHVnaW5zLCB0aGlzLnV0aWwpO1xyXG5cclxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29ucy5jb25zdHJ1Y3RlZC5fdG9wLmlkKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignW1NVTkVESVRPUi5jcmVhdGUuZmFpbF0gVGhlIElEIG9mIHRoZSBzdW5lZGl0b3IgeW91IGFyZSB0cnlpbmcgdG8gY3JlYXRlIGFscmVhZHkgZXhpc3RzIChJRDpcIicgKyBjb25zLmNvbnN0cnVjdGVkLl90b3AuaWQgKyAnXCIpJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgY29ucy5jb25zdHJ1Y3RlZC5fdG9wLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG5cclxuICAgICAgICAvKiogQ3JlYXRlIHRvIHNpYmxpbmcgbm9kZSAqL1xyXG4gICAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY29ucy5jb25zdHJ1Y3RlZC5fdG9wLCBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGNvbnMuY29uc3RydWN0ZWQuX3RvcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jb3JlKHRoaXMuX0NvbnRleHQoZWxlbWVudCwgY29ucy5jb25zdHJ1Y3RlZCwgY29ucy5vcHRpb25zKSwgdGhpcy51dGlsLCBjb25zLnBsdWdpbnMsIGNvbnMub3B0aW9ucy5sYW5nKTtcclxuICAgIH1cclxufTtcclxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFwRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/suneditor.js\n");

/***/ }),

/***/ "./test/dev/custom_plugin_submenu.js":
/*!*******************************************!*\
  !*** ./test/dev/custom_plugin_submenu.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// ex) A submenu plugin that appends the contents of the input element to the editor\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  // plugin name (Required)\n  name: 'custom_plugin_submenu',\n  // add function - It is called only once when the plugin is first run.\n  // This function generates HTML to append and register the event.\n  // arguments - (core : core object, targetElement : clicked button element)\n  add: function (core, targetElement) {\n    // Registering a namespace for caching as a plugin name in the context object\n    const context = core.context;\n    context.custom = {\n      textElement: null\n    }; // Generate submenu HTML\n\n    let listDiv = eval(this.setSubmenu(core.lang)); // Input tag caching\n\n    context.custom.textElement = listDiv.getElementsByTagName('INPUT')[0]; // In addition to the button, elements that should operate within the submenu, such as focus,\n    // must call stopPropagation in the mousedown event to prevent the toolbar from executing events.\n\n    context.custom.textElement.addEventListener('mousedown', function (e) {\n      e.stopPropagation();\n    }); // You must bind \"core\" object when registering an event.\n\n    /** add event listeners */\n\n    listDiv.getElementsByTagName('BUTTON')[0].addEventListener('click', this.onClick.bind(core));\n    context.custom.textElement.addEventListener('mousedown', function () {});\n    /** append html */\n\n    targetElement.parentNode.appendChild(listDiv);\n  },\n  setSubmenu: function (lang) {\n    const listDiv = document.createElement('DIV');\n    listDiv.className = 'layer_editor layer_align';\n    listDiv.style.display = 'none';\n    listDiv.innerHTML = '' + '<div class=\"inner_layer\">' + '   <ul class=\"list_editor\">' + '       <li><input type=\"text\" placeholder=\"insert text\" style=\"width: 100%; border: 1px solid #CCC;\" /></li>' + '       <li><button type=\"button\" class=\"btn_editor\" title=\"Append text\">Append text</button></li>' + '   </ul>' + '</div>';\n    return listDiv;\n  },\n  onClick: function () {\n    // Get Input value\n    const value = document.createTextNode(this.context.custom.textElement.value); // insert\n\n    this.insertNode(value); // focus\n\n    this.focus();\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZXN0L2Rldi9jdXN0b21fcGx1Z2luX3N1Ym1lbnUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi90ZXN0L2Rldi9jdXN0b21fcGx1Z2luX3N1Ym1lbnUuanM/NjAwZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleCkgQSBzdWJtZW51IHBsdWdpbiB0aGF0IGFwcGVuZHMgdGhlIGNvbnRlbnRzIG9mIHRoZSBpbnB1dCBlbGVtZW50IHRvIHRoZSBlZGl0b3JcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8gcGx1Z2luIG5hbWUgKFJlcXVpcmVkKVxyXG4gICAgbmFtZTogJ2N1c3RvbV9wbHVnaW5fc3VibWVudScsXHJcblxyXG4gICAgLy8gYWRkIGZ1bmN0aW9uIC0gSXQgaXMgY2FsbGVkIG9ubHkgb25jZSB3aGVuIHRoZSBwbHVnaW4gaXMgZmlyc3QgcnVuLlxyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgSFRNTCB0byBhcHBlbmQgYW5kIHJlZ2lzdGVyIHRoZSBldmVudC5cclxuICAgIC8vIGFyZ3VtZW50cyAtIChjb3JlIDogY29yZSBvYmplY3QsIHRhcmdldEVsZW1lbnQgOiBjbGlja2VkIGJ1dHRvbiBlbGVtZW50KVxyXG4gICAgYWRkOiBmdW5jdGlvbiAoY29yZSwgdGFyZ2V0RWxlbWVudCkge1xyXG5cclxuICAgICAgICAvLyBSZWdpc3RlcmluZyBhIG5hbWVzcGFjZSBmb3IgY2FjaGluZyBhcyBhIHBsdWdpbiBuYW1lIGluIHRoZSBjb250ZXh0IG9iamVjdFxyXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjb3JlLmNvbnRleHQ7XHJcbiAgICAgICAgY29udGV4dC5jdXN0b20gPSB7XHJcbiAgICAgICAgICAgIHRleHRFbGVtZW50OiBudWxsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgc3VibWVudSBIVE1MXHJcbiAgICAgICAgbGV0IGxpc3REaXYgPSBldmFsKHRoaXMuc2V0U3VibWVudShjb3JlLmxhbmcpKTtcclxuXHJcbiAgICAgICAgLy8gSW5wdXQgdGFnIGNhY2hpbmdcclxuICAgICAgICBjb250ZXh0LmN1c3RvbS50ZXh0RWxlbWVudCA9IGxpc3REaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0lOUFVUJylbMF07XHJcblxyXG4gICAgICAgIC8vIEluIGFkZGl0aW9uIHRvIHRoZSBidXR0b24sIGVsZW1lbnRzIHRoYXQgc2hvdWxkIG9wZXJhdGUgd2l0aGluIHRoZSBzdWJtZW51LCBzdWNoIGFzIGZvY3VzLFxyXG4gICAgICAgIC8vIG11c3QgY2FsbCBzdG9wUHJvcGFnYXRpb24gaW4gdGhlIG1vdXNlZG93biBldmVudCB0byBwcmV2ZW50IHRoZSB0b29sYmFyIGZyb20gZXhlY3V0aW5nIGV2ZW50cy5cclxuICAgICAgICBjb250ZXh0LmN1c3RvbS50ZXh0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIFlvdSBtdXN0IGJpbmQgXCJjb3JlXCIgb2JqZWN0IHdoZW4gcmVnaXN0ZXJpbmcgYW4gZXZlbnQuXHJcbiAgICAgICAgLyoqIGFkZCBldmVudCBsaXN0ZW5lcnMgKi9cclxuICAgICAgICBsaXN0RGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdCVVRUT04nKVswXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljay5iaW5kKGNvcmUpKTtcclxuICAgICAgICBjb250ZXh0LmN1c3RvbS50ZXh0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8qKiBhcHBlbmQgaHRtbCAqL1xyXG4gICAgICAgIHRhcmdldEVsZW1lbnQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChsaXN0RGl2KTtcclxuICAgIH0sXHJcblxyXG4gICAgc2V0U3VibWVudTogZnVuY3Rpb24gKGxhbmcpIHtcclxuICAgICAgICBjb25zdCBsaXN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnRElWJyk7XHJcblxyXG4gICAgICAgIGxpc3REaXYuY2xhc3NOYW1lID0gJ2xheWVyX2VkaXRvciBsYXllcl9hbGlnbic7XHJcbiAgICAgICAgbGlzdERpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIGxpc3REaXYuaW5uZXJIVE1MID0gJycgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImlubmVyX2xheWVyXCI+JyArXHJcbiAgICAgICAgICAgICcgICA8dWwgY2xhc3M9XCJsaXN0X2VkaXRvclwiPicgK1xyXG4gICAgICAgICAgICAnICAgICAgIDxsaT48aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cImluc2VydCB0ZXh0XCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgYm9yZGVyOiAxcHggc29saWQgI0NDQztcIiAvPjwvbGk+JyArXHJcbiAgICAgICAgICAgICcgICAgICAgPGxpPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuX2VkaXRvclwiIHRpdGxlPVwiQXBwZW5kIHRleHRcIj5BcHBlbmQgdGV4dDwvYnV0dG9uPjwvbGk+JyArXHJcbiAgICAgICAgICAgICcgICA8L3VsPicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgcmV0dXJuIGxpc3REaXY7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBHZXQgSW5wdXQgdmFsdWVcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuY29udGV4dC5jdXN0b20udGV4dEVsZW1lbnQudmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICB0aGlzLmluc2VydE5vZGUodmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBmb2N1c1xyXG4gICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgIH1cclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBSUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQS9EQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./test/dev/custom_plugin_submenu.js\n");

/***/ })

/******/ });