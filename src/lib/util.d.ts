export default util;
declare interface util {
    isIE: boolean;
    isIE_Edge: boolean;
    zeroWidthSpace: string;
    zeroWidthRegExp: RegExp;
    onlyZeroWidthRegExp: RegExp;
    onlyZeroWidthSpace(text: string | Node): boolean;
    getXMLHttpRequest(): XMLHttpRequest | ActiveXObject;
    createElement(elementName: string): Element;
    createTextNode(text: string): Node;
    getIncludePath(nameArray: any[], extension: string): string;
    getPageStyle(doc: Document): string;
    getIframeDocument(iframe: Element): Document;
    getAttributesToString(element: Element, exceptAttrs: any[]): string;
    getByteLength(text: string): number;
    isWysiwygDiv(element: Node): boolean;
    isTextStyleElement(element: Node): boolean;
    isFormatElement(element: Node): boolean;
    isRangeFormatElement(element: Node): boolean;
    isFreeFormatElement(element: Node): boolean;
    isComponent(element: Node): boolean;
    isMediaComponent(element: Node): boolean;
    getFormatElement(element: Node, validation: Function): Element;
    getRangeFormatElement(element: Node, validation: Function): Element;
    getFreeFormatElement(element: Node, validation: Function): Element;
    copyTagAttributes(originEl: Element, copyEl: Element): void;
    copyFormatAttributes(originEl: Element, copyEl: Element): void;
    getArrayItem(array: any[] | HTMLCollection | NodeList, validation: Function, multi: boolean): any;
    getArrayIndex(array: any[] | HTMLCollection | NodeList, element: Node): number;
    nextIdx(array: any[] | HTMLCollection | NodeList, item: Node): number;
    prevIdx(array: any[] | HTMLCollection | NodeList, item: Node): number;
    getPositionIndex(node: Node): number;
    getNodePath(node: Node, parentNode: Node, _newOffsets: any): any[];
    getNodeFromPath(offsets: any[], parentNode: Node): Node;
    isSameAttributes(a: Node, b: Node): boolean;
    isList(node: string | Node): boolean;
    isListCell(node: string | Node): boolean;
    isTable(node: string | Node): boolean;
    isCell(node: string | Node): boolean;
    isBreak(node: string | Node): boolean;
    isAnchor(node: string | Node): boolean;
    isMedia(node: string | Node): boolean;
    isNumber(text: string | number): boolean;
    getNumber(text: string | number, maxDec: number): number;
    getListChildren(element: Element, validation: Function): any[];
    getListChildNodes(element: Node, validation: Function): any[];
    getElementDepth(element: Node): number;
    getParentElement(element: Node, query: TimerHandler): Element;
    getChildElement(element: Node, query: TimerHandler, last: boolean): Element;
    getEdgeChildNodes(first: Node, last: Node): any;
    getOffset(element: Node, wysiwygFrame: Node): any;
    getOverlapRangeAtIndex(aStart: number, aEnd: number, bStart: number, bEnd: number): number;
    changeTxt(element: Node, txt: string): void;
    setStyle(element: Element, styleName: string, value: string | number): void;
    hasClass(element: Element, className: string): boolean;
    addClass(element: Element, className: string): void;
    removeClass(element: Element, className: string): void;
    toggleClass(element: Element, className: string): void;
    removeItem(item: Node): void;
    removeItemAllParents(item: Node, validation: Function, stopParent: Element): any;
    detachNestedList(baseNode: Node, all: boolean): Element;
    splitElement(baseNode: Node, offset: number, depth: number): Element;
    mergeSameTags(element: Element, nodePathArray: any[], onlyText: boolean): any[];
    mergeNestedTags(element: Element, validation: TimerHandler): void;
    removeEmptyNode(element: Element, notRemoveNode: Node): void;
    htmlRemoveWhiteSpace(html: string): string;
    sortByDepth(array: any[], des: boolean): void;
    changeIcon(icon: Element, newIcon: string | Element): void;
    createTagsWhitelist(list: string): RegExp;
}
