/** * test editor */(function(){    /**	 * utile func     * @type {{returnTrue}}     */    var func = (function(){        var returnTrue = function() {            return true;        };        return {            returnTrue : returnTrue        };    })();    /**	 * document func     * @type {{nextIdx, prevIdx, isCell, getListChildren, getParentNode, changeTxt, changeClass, addClass, removeClass, toggleClass}}     */    var dom = (function(){        var nextIdx = function(array, item) {            var idx = list.getArrayIndex(array, item);            if (idx === -1) return -1;            return idx + 1;        };        var prevIdx = function(array, item) {            var idx = list.getArrayIndex(array, item);            if (idx === -1) return -1;            return idx - 1;        };        var isCell = function(node) {            return node && /^TD|^TH/i.test(node.nodeName);        };        var getListChildren = function(element, validation) {            var children = [];            validation = validation || func.returnTrue;            (function recursionFunc(current){                if (element !== current && validation(current)) {                    children.push(current);                }                for (var i = 0, len = current.children.length; i < len; i++) {                    recursionFunc(current.children[i]);                }            })(element);            return children;        };        var getParentNode = function(element, tagName) {            var check = new RegExp('^' + tagName + '$', 'i');            while(!check.test(element.tagName)) {                element = element.parentNode;            }            return element;        };        var changeTxt = function(element, txt) {            element.textContent = txt;        };        var changeClass = function(element, className) {            element.className = className;        };        var addClass = function(element, className) {            if(!element) return;            var check = new RegExp("(\\s|^)" + className + "(\\s|$)");            if(check.test(element.className)) return;            element.className += " " + className;        };        var removeClass = function(element, className) {            if(!element) return;            var check = new RegExp("(\\s|^)" + className + "(\\s|$)");            element.className = element.className.replace(check, " ").trim();        };        var toggleClass = function(element, className) {            var check = new RegExp("(\\s|^)" + className + "(\\s|$)");            if (check.test(element.className)) {                element.className = element.className.replace(check, " ").trim();            }            else {                element.className += " " + className;            }        };        return {            nextIdx : nextIdx,            prevIdx : prevIdx,            isCell : isCell,            getListChildren : getListChildren,            getParentNode : getParentNode,            changeTxt : changeTxt,            changeClass : changeClass,            addClass : addClass,            removeClass : removeClass,            toggleClass : toggleClass        };    })();    /**	 * SunEditor     * @param context     */	var SunEditor = function(context){		/* 배열 관련 */        var list = (function(){            var getArrayIndex = function(array, element) {                var idx = -1;                for(var i=0; i<array.length; i++) {                    if(array[i] == element) {                        idx = i;                        break;                    }                }                return idx;            };            var commandMap = {                'FONT': context.tool.fontFamily,                'B' : context.tool.bold,                'U' : context.tool.underline,                'I' : context.tool.italic,                'STRIKE' : context.tool.strike            };            var fontFamilyMap = {};			var list_fontFamily = context.tool.list_fontFamily.children;			 list_fontFamily[0].firstChild.getAttribute("data-value");			 for(var i=0; i<list_fontFamily.length; i++) {			 fontFamilyMap[list_fontFamily[i].firstChild.getAttribute("data-value").replace(/\s*!/g,"")] = list_fontFamily[i].firstChild.getAttribute("data-txt");			 };			 list_fontFamily = context.tool.list_fontFamily_add.children;			 for(var i=0; i<list_fontFamily.length; i++) {			 fontFamilyMap[list_fontFamily[i].firstChild.getAttribute("data-value").replace(/\s*!/g,"")] = list_fontFamily[i].firstChild.getAttribute("data-txt");			 };			 list_fontFamily = null;            return {                getArrayIndex : getArrayIndex,                commandMap : commandMap,                fontFamilyMap : fontFamilyMap            }        })();		/* selection 관련 */        var wysiwygSelection = (function(){            var focus = function(){                context.element.wysiwygWindow.document.body.focus();            };            var isEdgePoint = function(container, offset) {                return (offset === 0) || (offset === container.nodeValue.length); // isLeftEdgePoint || isRightEdgePoint            };            var createRange = function() {                return context.element.wysiwygWindow.document.createRange();            };            var getFocusNode = function() {                return context.element.wysiwygWindow.window.getSelection().focusNode;            };            var getPElementInFocusNode = function() {                var parentElement = context.argument._selectionNode;                while(!/P/.test(parentElement.tagName) && !/BODY/.test(parentElement.tagName)) {                    parentElement = parentElement.parentNode;                }                return parentElement;            };            return {                focus : focus,                isEdgePoint : isEdgePoint,                createRange : createRange,                getFocusNode : getFocusNode,                getPElementInFocusNode : getPElementInFocusNode            };        })();		/* 에디터 */		var editor = (function(){            var subMenu = null;            var originSub = null;            var modalForm = null;            var tabSize = 4;            var pure_execCommand = function(command, showDefaultUI, value) {                if(value) {                    context.element.wysiwygWindow.document.execCommand(command, showDefaultUI, value);                } else {                    context.element.wysiwygWindow.document.execCommand(command, showDefaultUI);                }            };            var cancel_table_picker = function() {                context.tool.tableHighlight.style.width = "1em";                context.tool.tableHighlight.style.height = "1em";                context.tool.tableUnHighlight.style.width = "5em";                context.tool.tableUnHighlight.style.height = "5em";                dom.changeTxt(context.tool.tableDisplay, "1 x 1");            };            var subOff = function() {                if(this.subMenu) {                    this.subMenu.style.display = "none";                    this.subMenu = null;                    this.cancel_table_picker();                }                if(this.modalForm) {                    this.modalForm.style.display = "none";                    context.dialog.back.style.display = "none";                    context.dialog.modalArea.style.display = "none";                }                if(context.argument._imageElement) {                    event.cancel_resize_image();                }                return;            };            var toggleFrame = function(){                if(!context.argument._wysiwygActive) {                    var ec = {"&amp;":"&","&nbsp;":"\u00A0","&quot;":"\"","&lt;":"<","&gt;":">"};                    var je_source_html = context.element.source.value.replace(/&[a-z]+;/g, function(m){ return (typeof ec[m] == "string")?ec[m]:m; });                    context.element.wysiwygWindow.document.body.innerHTML = je_source_html.trim().length > 0? je_source_html: "<p>&#65279</p>";                    context.element.wysiwygElement.style.display = "block";                    context.element.source.style.display = "none";                    // context.tool.cover.style.display = "none";                    context.argument._wysiwygActive = true;                }                else {                    context.element.source.value = context.element.wysiwygWindow.document.body.innerHTML.trim();                    context.element.source.style.display = "block";                    context.element.wysiwygElement.style.display = "none";                    // context.tool.cover.style.display = "block";                    context.argument._wysiwygActive = false;                }            };            var toggleFullScreen = function(element){                if(!context.argument._isFullScreen) {                    context.element.topArea.style.position = "fixed";                    context.element.topArea.style.top = "0";                    context.element.topArea.style.left = "0";                    context.element.topArea.style.width = "100%";                    context.element.topArea.style.height = "100%";                    context.argument._innerHeight_fullScreen = (window.innerHeight - context.tool.bar.offsetHeight);                    context.element.editorArea.style.height = context.argument._innerHeight_fullScreen + "px"                    dom.removeClass(element.firstElementChild, 'ico_full_screen_e');                    dom.addClass(element.firstElementChild, 'ico_full_screen_i');                }                else {                    context.element.topArea.style.cssText = context.argument._originCssText;                    context.element.editorArea.style.height = context.argument._innerHeight + "px";                    dom.removeClass(element.firstElementChild, 'ico_full_screen_i');                    dom.addClass(element.firstElementChild, 'ico_full_screen_e');                }                context.argument._isFullScreen = !context.argument._isFullScreen;            };            var appendHr = function(value) {                var borderStyle = "";                switch(value) {                    case 'hr1':                        borderStyle = "black 1px solid";                        break;                    case 'hr2':                        borderStyle = "black 1px dotted";                        break;                    case 'hr3':                        borderStyle = "black 1px dashed";                        break;                }                var oHr = document.createElement("HR");                oHr.style.border = "black 0px none";                oHr.style.borderTop = borderStyle;                oHr.style.height = "1px";                context.argument._selectionNode.parentNode.appendChild(oHr);                editor.appendP(oHr);            };            var appendTable = function(x, y) {                var oTable = document.createElement("TABLE");                oTable.style.cssText = "border:1px solid #ccc;width:100%; max-width:100%; margin-bottom:20px; background-color:transparent; border-spacing:0; border-collapse:collapse;";                var tableHTML = '<tbody>';                while(y>0) {                    tableHTML += '<tr style="border: 1px solid #ccc;">';                    var tdCnt = x;                    while(tdCnt>0) {                        tableHTML += '<td style="border: 1px solid #ccc; padding:8px;"><p>&#65279</p></td>';                        --tdCnt;                    }                    tableHTML += '</tr>';                    --y;                }                tableHTML += '</tbody>';                oTable.innerHTML = tableHTML;                wysiwygSelection.getPElementInFocusNode().appendChild(oTable);;                editor.appendP(oTable);            };            var appendP = function(element) {                var oP = document.createElement("P");                oP.innerHTML = '&#65279';                element.parentNode.insertBefore(oP, element.nextElementSibling);            };            var openDialog = function(kind) {                switch(kind) {                    case 'link':                        this.modalForm = context.dialog.link;                        context.dialog.linkText.focus();                        break;                    case 'image':                        this.modalForm = context.dialog.image;                        break;                    case 'video':                        this.modalForm = context.dialog.video;                        break;                }                context.dialog.modalArea.style.display = "block";                context.dialog.back.style.display = "block";                context.dialog.modal.style.display = "block";                this.modalForm.style.display = "block";                this.subMenu = context.dialog.modal;            };            var showLoding = function() {                context.element.loding.style.display = "block";            };            var closeLoding = function() {                context.element.loding.style.display = "none";            };            var insertDataToSave = function() {                if(context.argument._wysiwygActive) {                    context.element.textElement.innerHTML = context.element.wysiwygWindow.document.body.innerHTML;                } else {                    context.element.textElement.innerHTML = context.element.source.value;                }            };            return {                subMenu : subMenu,                originSub : originSub,                modalForm : modalForm,                tabSize : tabSize,                pure_execCommand : pure_execCommand,                cancel_table_picker : cancel_table_picker,                subOff : subOff,                toggleFrame : toggleFrame,                toggleFullScreen : toggleFullScreen,                appendHr : appendHr,                appendTable : appendTable,                appendP : appendP,                openDialog : openDialog,                showLoding : showLoding,                closeLoding : closeLoding,                insertDataToSave : insertDataToSave            };		})();		/* 이벤트 */        var event = (function(){            var window_resize = function() {                if(context.tool.barHeight == context.tool.bar.offsetHeight) return;                if(!context.argument._isFullScreen) {                    context.tool.barHeight = context.tool.bar.offsetHeight;                }                else {                    context.argument._innerHeight_fullScreen += (context.tool.barHeight - context.tool.bar.offsetHeight);                    context.element.editorArea.style.height = context.argument._innerHeight_fullScreen + "px";                    context.tool.barHeight = context.tool.bar.offsetHeight;                }            };            var onClick_toolbar = function(e) {                var targetElement = e.target;                var display = targetElement.getAttribute("data-display");                var command = targetElement.getAttribute("data-command");                var className = targetElement.className;                wysiwygSelection.focus();                while(!command && !display && !/layer_color|layer_url|editor_tool/.test(className) && !/BODY/.test(targetElement.tagName)){                    targetElement = targetElement.parentNode;                    command = targetElement.getAttribute("data-command");                    display = targetElement.getAttribute("data-display");                    className = targetElement.className;                }                var value = targetElement.getAttribute("data-value");                var txt = targetElement.getAttribute("data-txt");                // 서브메뉴 보이기                if(display || /BODY/.test(targetElement.tagName)) {                    var nextSibling = editor.subMenu;                    editor.subOff();                    if(targetElement.nextElementSibling != null && targetElement.nextElementSibling != nextSibling){                        editor.subMenu = targetElement.nextElementSibling;                        editor.subMenu.style.display = "block";                        editor.originSub = editor.subMenu.previousElementSibling;                    }                    else if(/modal/.test(display)) {                        editor.openDialog(command);                    }                    nextSibling = null;                    return;                }                if(/layer_color/.test(className) && /BUTTON/.test(e.target.tagName)) {                    value = e.target.textContent;                }                // 커멘드 명령어 실행                if(command) {                    if(/fontName/.test(command)) {                        dom.changeTxt(editor.originSub.firstElementChild, txt);                        editor.pure_execCommand(command, false, value);                    }                    else if(/format/.test(command)) {                        editor.pure_execCommand("formatBlock", false, value);                    }                    else if(/justifyleft|justifyright|justifycenter|justifyfull/.test(command)) {                        dom.changeTxt(editor.originSub.firstElementChild, targetElement.title.split(" ")[0]);//					dom.changeClass(editor.originSub.firstElementChild, targetElement.firstElementChild.className);                        editor.pure_execCommand(command, false);                    }                    else if(/foreColor|hiliteColor/.test(command)) {                        editor.pure_execCommand(command, false, value);                    }                    else if(/horizontalRules/.test(command)) {                        editor.appendHr(value);                    }                    else if(/sorceFrame/.test(command)) {                        editor.toggleFrame();                        dom.toggleClass(targetElement, 'on');                    }                    else if(/fullScreen/.test(command)) {                        editor.toggleFullScreen(targetElement);                        dom.toggleClass(targetElement, "on");                    }                    else if(/indent|outdent/.test(command)) {                        editor.pure_execCommand(command, false);                    }                    else if(/insertTable/.test(command)) {                        editor.appendTable(context.argument._tableXY[0], context.argument._tableXY[1]);                    }                    else {                        editor.pure_execCommand(command, false, value);                        dom.toggleClass(targetElement, "on");                    }                    editor.subOff();                }            };            var onMouseDown_wysiwyg = function(e) {                var targetElement = e.target;                editor.subOff();                if(/IMG/.test(targetElement.tagName)) {                    var resizeDiv = context.element.imageResizeDiv;                    var w = targetElement.offsetWidth;                    var h = targetElement.offsetHeight;                    var t = 0;                    var l = 0;                    var parentElement = targetElement.offsetParent;                    var parentT = 1;                    var parentL = 1;                    while(parentElement) {                        parentT += (parentElement.offsetTop + parentElement.clientTop);                        parentL += (parentElement.offsetLeft + + parentElement.clientLeft);                        parentElement = parentElement.offsetParent;                    }                    context.argument._imageResize_parent_t = (context.tool.bar.offsetHeight + parentT);                    context._imageResize_parent_l = parentL;                    t = (targetElement.offsetTop + context.argument._imageResize_parent_t - context.element.wysiwygWindow.scrollY);                    l = (targetElement.offsetLeft + parentL);                    resizeDiv.style.top = t + "px";                    resizeDiv.style.left = l + "px";                    resizeDiv.style.width = w + "px";                    resizeDiv.style.height = h + "px";                    context.element.imageResizeBtn.style.top = (h + t) + "px";                    context.element.imageResizeBtn.style.left = l + "px";                    dom.changeTxt(context.element.imageResizeDisplay, w + " x " + h);                    context.argument._imageElement = targetElement;                    context.argument._imageElement_w = w;                    context.argument._imageElement_h = h;                    context.argument._imageElement_t = t;                    context.argument._imageElement_l = l;                    context.element.imageResizeDiv.style.display = "block";                    context.element.imageResizeBtn.style.display = "block";                }                else {                    wysiwygSelection.focus();                }            };            var onSelectionChange_wysiwyg = function(e) {                context.argument._selectionNode = context.element.wysiwygWindow.getSelection().anchorNode;                var selectionParent = context.argument._selectionNode;                var selectionNodeStr = "";                var fontFamily = context.tool.default_fontFamily;                while(!/P|BODY|HTML/.test(selectionParent.tagName)) {                    selectionNodeStr += selectionParent.tagName + "|";                    if(/FONT/.test(selectionParent.tagName)) {                        fontFamily = list.fontFamilyMap[selectionParent.face.replace(/\s*/g,"")];                    }                    selectionParent = selectionParent.parentNode;                }                if(/SPAN/.test(selectionParent.tagName)) {                    for(var i=0; i<selectionParent.children.length; i++) {                        selectionNodeStr += selectionParent.children[i].tagName;                    }                }                // add                var onNode = selectionNodeStr.split("|");                var map = "B|U|I|STRIKE|FONT|";                for(var i=0; i<onNode.length - 1; i++) {                    if(/FONT/.test(onNode[i])) {                        dom.changeTxt(list.commandMap[onNode[i]], fontFamily);                    }                    else {                        dom.addClass(list.commandMap[onNode[i]], "on");                    }                    map = map.replace(onNode[i]+"|", "");                }                // remove                map = map.split("|");                for(var i=0; i<map.length - 1; i++) {                    if(/FONT/.test(map[i])) {                        dom.changeTxt(list.commandMap[map[i]], fontFamily);                    }                    else {                        dom.removeClass(list.commandMap[map[i]], "on");                    }                }            };            var onKeyDown_wysiwyg = function(e) {                var target = e.target;                var keyCode = e.keyCode;                var shift = e.shiftKey;                var ctrl = e.ctrlKey;                var alt = e.altKey;                switch(keyCode) {                    case 8: //backspace                        if(target.childElementCount == 1 && target.children[0].innerHTML == "<br>") {//					target.innerHTML = "<p>&#65279</p>";                            e.preventDefault();                            e.stopPropagation();                            return false;                        }                        break;                    case 9: //tab                        e.preventDefault();                        e.stopPropagation();                        if(ctrl || alt) break;                        var currentNode = wysiwygSelection.getPElementInFocusNode().parentNode;                        if(currentNode && /TD/.test(currentNode.tagName)) {                            var table = dom.getParentNode(currentNode, "table");                            var cells = dom.getListChildren(table, dom.isCell);                            var idx = shift? dom.prevIdx(cells, currentNode): dom.nextIdx(cells, currentNode);                            if(idx == cells.length && !shift) idx = 0;                            if(idx == -1 && shift) idx = cells.length - 1;                            var moveCell = cells[idx];                            if(!moveCell) return false;                            var range = wysiwygSelection.createRange();                            range.setStart(moveCell, 0);                            range.setEnd(moveCell, 0);                            var selection = context.element.wysiwygWindow.getSelection();                            if (selection.rangeCount > 0) {                                selection.removeAllRanges();                            }                            selection.addRange(range);                            break;                        }                        // P 노드일때                        if(shift) break;                        var selection = context.element.wysiwygWindow.getSelection();                        var tabText = context.element.wysiwygWindow.document.createTextNode(new Array(editor.tabSize + 1).join("\u00A0"));//				if(selection.anchorNode.nodeName.toUpperCase() == "BODY") break;                        var nativeRng = selection.getRangeAt(0);                        var startCon = nativeRng.startContainer;                        var startOff = nativeRng.startOffset;                        var endCon = nativeRng.endContainer;                        var endOff = nativeRng.endOffset;                        var pNode = startCon;                        if(/#text/i.test(startCon.nodeName)) {                            pNode = startCon.parentNode;                        }                        // 범위선택 없을때                        if(startCon === endCon && startOff === endOff) {                            if(/text/i.test(selection.focusNode.nodeName)) {                                var rightNode = selection.focusNode.splitText(endOff);                                pNode.insertBefore(tabText, rightNode);                            }                            else {                                if(/BR/.test(pNode.lastChild.nodeName)) {                                    pNode.removeChild(pNode.lastChild);                                }                                pNode.appendChild(tabText);                            }                            var rng = wysiwygSelection.createRange();                            rng.setStart(tabText, shift? 1: editor.tabSize);                            rng.setEnd(tabText, shift? 1: editor.tabSize);                            if (selection.rangeCount > 0) {                                selection.removeAllRanges();                            }                            selection.addRange(rng);                        }                        // 범위선택 했을때                        else {                            var removeNode = startCon;                            var rightNode = null;                            var isSameContainer = startCon === endCon;                            if(isSameContainer) {                                if(!wysiwygSelection.isEdgePoint(endCon, endOff)) {                                    rightNode = endCon.splitText(endOff);                                }                                if(!wysiwygSelection.isEdgePoint(startCon, startOff)) {                                    removeNode = startCon.splitText(startOff);                                    startOff = 0;                                }                                endOff = endOff - startOff;                                pNode.removeChild(removeNode);                            }                            else {                                var nodes = [];                                var container = startCon;                                while(container.nodeType == 3 && !(endCon == container)) {                                    nodes.push(container);                                    container = container.nextSibling;                                }                                nodes.push(container);                                for(var i=0; i<nodes.length; i++) {                                    pNode.removeChild(nodes[i]);                                }                            }                            // 반복                            pNode.insertBefore(tabText, rightNode);                            var rng = wysiwygSelection.createRange();                            rng.setStart(tabText, editor.tabSize);                            rng.setEnd(tabText, editor.tabSize);                            if (selection.rangeCount > 0) {                                selection.removeAllRanges();                            }                            selection.addRange(rng);                        }                        break;                }            };            var onScroll_wysiwyg = function(e) {                if(context.argument._imageElement) {                    var t = (context.argument._imageElement.offsetTop + context.argument._imageResize_parent_t - context.element.wysiwygWindow.scrollY);                    context.element.imageResizeDiv.style.top = t + "px"                    context.element.imageResizeBtn.style.top = (t + context.argument._imageElement_h) + "px";                }            };            var onBlur_wysiwyg = function(e) {                context.argument._selectionNode = e.target.getSelection().anchorNode;            };            var onClick_dialog = function(e) {                if(/modal-dialog/.test(e.target.className) || /close/.test(e.target.getAttribute("data-command"))) {                    editor.subOff();                }            };            var onChange_imgInput = function(e) {                if (this.files && this.files[0]) {                    editor.showLoding();                    editor.subOff();                    var reader = new FileReader();                    reader.onload = function (e) {                        context.argument._imageFileSrc =  e.target.result;                        var oImg = document.createElement("IMG");                        oImg.src = context.dialog.imgInputUrl.value.trim().length>0? context.dialog.imgInputUrl.value: context.argument._imageFileSrc;                        oImg.style.width = "350px";                        wysiwygSelection.getPElementInFocusNode().appendChild(oImg);                        editor.appendP(oImg);                        context.argument._imageFileSrc = null;                        context.dialog.imgInputFile.value = "";                        context.dialog.imgInputUrl.value = "";                        editor.closeLoding();                    }                    reader.readAsDataURL(this.files[0]);                }            };            var onClick_imageResize_btn = function(e) {                var command = e.target.getAttribute("data-command") || e.target.parentNode.getAttribute("data-command");                if(!command) return;                if(/^\d+$/.test(command)) {                    context.argument._imageElement.style.height = "";                    context.argument._imageElement.style.width = command + "%";                }                else if(/remove/.test(command)){                    context.argument._imageElement.remove();                }                editor.subOff();                wysiwygSelection.focus();            };            var onKeyDown_image_ctrl = function() {                context.element.resizeBackground.style.display = "block";                context.element.imageResizeBtn.style = "none";                document.addEventListener('mousemove', resize_image);                document.addEventListener('mouseup', function () {                    document.removeEventListener('mousemove', resize_image);                    cancel_resize_image();                });            };            var resize_image = function(e) {                var w = (e.clientX - context.argument._imageElement_l - context.element.topArea.offsetLeft);                var h = ((context.argument._imageElement_h/context.argument._imageElement_w) * w);                var l = 0;                context.argument._imageElement.style.width = w + "px";                context.argument._imageElement.style.height = h + "px";                var parentElement = context.argument._imageElement.offsetParent;                var parentL = 1;                while(parentElement) {                    parentL += (parentElement.offsetLeft + + parentElement.clientLeft);                    parentElement = parentElement.offsetParent;                }                l = (context.argument._imageElement.offsetLeft + parentL);                context.element.imageResizeDiv.style.left = l + "px";                context.element.imageResizeDiv.style.width = w + "px";                context.element.imageResizeDiv.style.height = h + "px";                dom.changeTxt(context.element.imageResizeDisplay, Math.round(w) + " x " + Math.round(h));                console.log(e.clientX + " : " + e.offsetX);            };            var cancel_resize_image = function() {                context.element.resizeBackground.style.display = "none";                context.element.imageResizeDiv.style.display = "none";                context.element.imageResizeBtn.style.display = "none";                // context.argument._imageElement = null;            };            var onMouseMove_tablePicker = function(e) {                var x = Math.ceil(e.offsetX/18);                var y = Math.ceil(e.offsetY/18);                x = x<1? 1: x;                y = y<1? 1: y;                context.tool.tableHighlight.style.width = x + "em";                context.tool.tableHighlight.style.height = y + "em";                var x_u = x<5? 5: (x>9? 10: x+1);                var y_u = y<5? 5: (y>9? 10: y+1);                context.tool.tableUnHighlight.style.width = x_u + "em";                context.tool.tableUnHighlight.style.height = y_u + "em";                dom.changeTxt(context.tool.tableDisplay, x + " x " + y);                context.argument._tableXY = [x, y];            };            var onSubmit = function(e) {                var className = e.target.className;                editor.subOff();                try {                    switch(className) {                        case 'editor_link':                            if(context.dialog.linkText.value.trim().length == 0) break;                            var url = /^https?:\/\//.test(context.dialog.linkText.value)? context.dialog.linkText.value: "http://" +  context.dialog.linkText.value;                            var anchor = context.dialog.linkAnchorText || context.dialog.document.getElementById("linkAnchorText");                            var anchorText = anchor.value.length == 0? url: anchor.value;                            editor.pure_execCommand("createLink", false, url);                            wysiwygSelection.getFocusNode().parentNode.text = anchorText;                            context.dialog.linkText.value = "";                            context.dialog.linkAnchorText.value = "";                            break;                        case 'editor_image':                            if(!context.argument._imageFileSrc && context.dialog.imgInputUrl.value.trim().length == 0) break;                            var oImg = document.createElement("IMG");                            oImg.src = context.dialog.imgInputUrl.value.trim().length>0? context.dialog.imgInputUrl.value: context.argument._imageFileSrc;                            oImg.style.width = "350px";                            wysiwygSelection.getPElementInFocusNode().appendChild(oImg);                            editor.appendP(oImg);                            context.argument._imageFileSrc = null;                            context.dialog.imgInputFile.value = "";                            context.dialog.imgInputUrl.value = "";                            break;                        case'editor_video':                            if(context.dialog.videoInputUrl.length == 0) break;                            editor.showLoding();                            var url = context.dialog.videoInputUrl.value.replace(/^https?:/, '');                            var oIframe = document.createElement("IFRAME");                            var x_v = context.dialog.video_x.value;                            var y_v = context.dialog.video_y.value;                            // youtube                            if(/youtu\.?be/.test(url)) {                                url = url.replace('watch?v=', '');                                if(!/^\/\/.+\/embed\//.test(url)) {                                    var youtubeUrl = url.match(/^\/\/.+\//)[0]                                    url = url.replace(youtubeUrl, '//www.youtube.com/embed/');                                }                            }                            oIframe.src = url;                            oIframe.width = (/^\d+$/.test(x_v)? x_v: context.videoX);                            oIframe.height = (/^\d+$/.test(y_v)? y_v: context.videoY);                            oIframe.frameBorder = "0";                            oIframe.allowFullscreen = true;                            wysiwygSelection.getPElementInFocusNode().appendChild(oIframe);                            editor.appendP(oIframe);                            context.dialog.videoInputUrl.value = "";                            context.dialog.video_x.value = context.videoX;                            context.dialog.video_y.value = context.videoY;                            editor.closeLoding();                            break;                    }                }catch(e) {                    return false;                }                return false;            };            var onMouseDown_resizeBar = function(e) {                context.argument._resizeEditor = true;                context.argument._resizeClientY = e.clientY;                context.element.resizeBackground.style.display = "block";                document.addEventListener('mousemove', resize_editor);                document.addEventListener('mouseup', function () {                    document.removeEventListener('mousemove', resize_editor);                    context.element.resizeBackground.style.display = "none";                });            };            var resize_editor = function(e) {                if(!context.argument._resizeEditor) return;                var resizeInterval = (e.clientY - context.argument._resizeClientY);                context.element.editorArea.style.height = (context.element.editorArea.offsetHeight + resizeInterval) + "px";                context.argument._innerHeight = (context.element.editorArea.offsetHeight + resizeInterval);                context.argument._resizeClientY = e.clientY;            };			/* 이벤트 등록 */            window.onresize = function(){window_resize()};            context.tool.bar.addEventListener("click", onClick_toolbar);            context.element.wysiwygWindow.addEventListener("mousedown", onMouseDown_wysiwyg);            context.element.wysiwygWindow.document.addEventListener("selectionchange", onSelectionChange_wysiwyg);            context.element.wysiwygWindow.addEventListener("keydown", onKeyDown_wysiwyg);            context.element.wysiwygWindow.addEventListener('scroll', onScroll_wysiwyg);            context.element.wysiwygWindow.addEventListener("blur", onBlur_wysiwyg);            context.dialog.modal.addEventListener("click", onClick_dialog);            context.dialog.imgInputFile.addEventListener("change", onChange_imgInput);            context.element.imageResizeController.addEventListener('mousedown', onKeyDown_image_ctrl);            context.element.imageResizeBtn.addEventListener('click', onClick_imageResize_btn);            /*context.modalDialog_image_background.addEventListener('mousemove', onMouseMove_image_Background);            context.modalDialog_image_background.addEventListener('mouseup', cancel_resize_image);            context.modalDialog_image_background.addEventListener('mouseout', cancel_resize_image);*/            context.tool.tablePicker.addEventListener('mousemove', onMouseMove_tablePicker);            context.element.resizebar.addEventListener("mousedown", onMouseDown_resizeBar);            for(var i=0; i<context.dialog.forms.length; i++) {                context.dialog.forms[i].onsubmit = onSubmit;            };            return {                cancel_resize_image : cancel_resize_image            }        })();	};    /**	 * testnote related html reading func     * @param file     * @returns {string}     */    var readTextFile = function(file) {        var rawFile = new XMLHttpRequest();        rawFile.open("GET", file, false);        var text = "";        rawFile.onreadystatechange = function () {            if(rawFile.readyState === 4) {                if(rawFile.status === 200 || rawFile.status == 0) {                    text = rawFile.responseText;                }            }        };        rawFile.send(null);        return text;    }    /**	 * document create     * @param element     * @param options     * @returns {{constructed: Element, options: *}}     * @constructor     */    var Constructor = function(element, options) {    	/* 옵션이 안들어 왔을 경우 */        if(!(typeof options === "object")) options = {};		/* 사용자 옵션 초기화 */        options.videoX = options.videoX || 560;        options.videoY = options.videoY || 315;		/* 최상위 div */        var top_div = document.createElement("DIV");        top_div.className = "test-note";        top_div.style.width = /%|auto/.test(element.style.width)? element.style.width: element.clientWidth + "px";        /* relative div */        var relative = document.createElement("DIV");        relative.className = "test-note-container";		/* 툴바 */        var tool_bar = document.createElement("DIV");        tool_bar.className = "test-note-id-toolbar";        tool_bar.innerHTML = readTextFile("./html/toolBar.html");		/* 에디터 */        var editor_div = document.createElement("DIV");        editor_div.className = "test-note-id-editorArea";        editor_div.style.height = element.clientHeight + "px";        editor_div.innerHTML = readTextFile("./html/editor.html");		/* 리사이즈바 */        var resize_bar = document.createElement("DIV");        resize_bar.className = "test-note-id-resizeBar";		/* 다이얼로그 */        var dialog_div = document.createElement("DIV");        dialog_div.className = "test-note-id-dialogBox";        dialog_div.innerHTML = readTextFile("./html/dialog.html");        /* 이미지 조절 div*/        var resize_img = document.createElement("DIV");        resize_img.className = "modal-image-resize";        resize_img.innerHTML = ''+            '<div class="image-resize-dot tl"></div>'+            '<div class="image-resize-dot tr"></div>'+            '<div class="image-resize-dot bl"></div>'+            '<div class="image-resize-dot br-controller test-note-img-controller"></div>'+            '<div class="image-size-display test-note-id-img-display"></div>';        /* 이미지 조절 버튼 */        var resize_img_button = document.createElement("DIV");        resize_img_button.className = "image-resize-btn";        resize_img_button.innerHTML = ''+            '<div class="btn-group">'+            '   <button type="button" data-command="100"><span class="note-fontsize-10">100%</span></button>'+            '   <button type="button" data-command="75"><span class="note-fontsize-10">75%</span></button>'+            '   <button type="button" data-command="50"><span class="note-fontsize-10">50%</span></button>'+            '   <button type="button" data-command="25"><span class="note-fontsize-10">25%</span></button>'+            '</div>'+            '<div class="btn-group remove">'+            '   <button type="button" data-command="remove"><div class="image_remove"></div></button>'+            '</div>';        /* loding box */        var loding_box = document.createElement("DIV");        loding_box.className = "test-note-id-loding";        loding_box.innerHTML = "<div class=\"ico-loding\"></div>";        /* resize 동작시 background */        var resize_back = document.createElement("DIV");        resize_back.className = "test-note-id-resize-background";        /* 사용자 옵션 값 넣기*/        dialog_div.getElementsByClassName('test-note-id-video-x')[0].value = options.videoX;        dialog_div.getElementsByClassName('test-note-id-video-y')[0].value = options.videoY;		/* 최상위 div에 append */        relative.appendChild(tool_bar);        relative.appendChild(editor_div);        relative.appendChild(resize_bar);        relative.appendChild(dialog_div);        relative.appendChild(resize_back);        relative.appendChild(resize_img);        relative.appendChild(resize_img_button);        relative.appendChild(loding_box);        top_div.appendChild(relative);        return {        	constructed : {                _top : top_div,				_toolBar : tool_bar,				_editorArea : editor_div,				_resizeBar : resize_bar,				_dialog : dialog_div,                _loding : loding_box,                _resizeImg : resize_img,                _resizeImgBtn : resize_img_button,                _resizeBack : resize_back			},			options : options        };    };    /**	 * option and module define     * @param cons     * @param options     * @returns {...}     * @constructor     */    var Context = function(element, cons, options) {        // 내부 옵션값 초기화        options._originCssText = cons._top.style.cssText; // 초기 css 저장        options._innerHeight = cons._editorArea.clientHeight;        return {            argument : {                _selectionNode : null,                _imageFileSrc : null,                _imageElement : null,                _imageElement_w : 0,                _imageElement_h : 0,                _imageElement_l : 0,                _imageElement_t : 0,                _imageResize_parent_t : 0,                _imageResize_parent_l : 0,                _wysiwygActive : true,                _isFullScreen : false,                _innerHeight_fullScreen : 0,                _tableXY : [],                _resizeEditor : false,                _resizeClientY : 0,                _originCssText : options._originCssText, // 기본 css 저장                _innerHeight : options._innerHeight			},			element : {                textElement: element,                topArea: cons._top,                resizebar: cons._resizeBar,                editorArea: cons._editorArea,                wysiwygWindow: cons._editorArea.getElementsByClassName('test-note-id-wysiwyg')[0].contentWindow,                wysiwygElement: cons._editorArea.getElementsByClassName('test-note-id-wysiwyg')[0],                source: cons._editorArea.getElementsByClassName('test-note-id-source')[0],                loding : cons._loding,                imageResizeDiv : cons._resizeImg,                imageResizeController : cons._resizeImg.getElementsByClassName('test-note-img-controller')[0],                imageResizeDisplay : cons._resizeImg.getElementsByClassName('test-note-id-img-display')[0],                imageResizeBtn : cons._resizeImgBtn,                resizeBackground : cons._resizeBack            },			tool : {				bar : cons._toolBar,				barHeight : cons._toolBar.offsetHeight,				cover : cons._toolBar.getElementsByClassName('test-note-id-toolbar-cover')[0],				bold : cons._toolBar.getElementsByClassName('test-note-id-bold')[0],				underline : cons._toolBar.getElementsByClassName('test-note-id-underline')[0],				italic : cons._toolBar.getElementsByClassName('test-note-id-italic')[0],				strike : cons._toolBar.getElementsByClassName('test-note-id-strike')[0],				tablePicker : cons._toolBar.getElementsByClassName('test-note-id-table-picker')[0],				tableHighlight : cons._toolBar.getElementsByClassName('test-note-id-table-highlighted')[0],				tableUnHighlight : cons._toolBar.getElementsByClassName('test-note-id-table-unhighlighted')[0],				tableDisplay : cons._toolBar.getElementsByClassName('test-note-table-display')[0],				fontFamily : cons._toolBar.getElementsByClassName('test-note-font-family')[0],				default_fontFamily : cons._toolBar.getElementsByClassName('test-note-font-family')[0].textContent,				list_fontFamily : cons._toolBar.getElementsByClassName('test-note-list-font-family')[0],				list_fontFamily_add : cons._toolBar.getElementsByClassName('test-note-list-font-family-add')[0]			},			dialog : {                modalArea : cons._dialog,                back : cons._dialog.getElementsByClassName('test-note-id-dialog-back')[0],                modal : cons._dialog.getElementsByClassName('test-note-id-dialog-modal')[0],                forms : cons._dialog.getElementsByTagName('FORM'),				link : cons._dialog.getElementsByClassName('test-note-id-dialog-link')[0],				linkText : cons._dialog.getElementsByClassName('test-note-id-linkurl')[0],				linkAnchorText : cons._dialog.getElementsByClassName('test-note-id-linktext')[0],				image : cons._dialog.getElementsByClassName('test-note-id-dialog-image')[0],				imgInputFile : cons._dialog.getElementsByClassName('test-note-id-image-file')[0],				imgInputUrl : cons._dialog.getElementsByClassName('test-note-id-image-url')[0],				video : cons._dialog.getElementsByClassName('test-note-id-dialog-video')[0],				videoInputUrl : cons._dialog.getElementsByClassName('test-note-id-video-url')[0],				video_x : cons._dialog.getElementsByClassName('test-note-id-video-x')[0],				video_y : cons._dialog.getElementsByClassName('test-note-id-video-y')[0]			},			user : {                videoX : options.videoX, // 동영상 프레임 기본 가로 크기                videoY : options.videoY// 동영상 프레임 기본 세로 크기            }		}    };    /**	 * testnote creator     * @param options     * @returns {Note}     */    Object.prototype.suneditor = function(options) {        var cons = Constructor(this, options);		/* 형제 노드로 생성 후 숨김 */        if(typeof this.nextElementSibling === 'object') {            this.parentNode.insertBefore(cons.constructed._top, this.nextElementSibling);        } else {            this.parentNode.appendChild(cons.constructed._top);        }        this.style.display = "none";        var context = Context(this, cons.constructed, cons.options);        var suneditor = new SunEditor(context);        return suneditor;    };})();